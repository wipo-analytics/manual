[
["index.html", "The WIPO Manual on Open Source Patent Analytics Frontmatter 0.1 Authorship 0.2 Acknowledgements 0.3 Further information 0.4 Conditions of use 0.5 Disclaimer", " The WIPO Manual on Open Source Patent Analytics 2016 Frontmatter 0.1 Authorship The Manual was written by Dr. Paul Oldham from One World Analytics, with contributions from and under the coordination of Ms. Irene Kitsara (WIPO). 0.2 Acknowledgements The WIPO Manual on Open Source Tools for Patent Analytics, 2016, was written with the generous financial support of the Patent Office of Japan (JPO). The Manual was prepared under the direction of Mr. Yo Takagi (Assistant Director General) and under the supervision of Mr. Alejandro Roca Campaña (Senior Director) and Mr. Andrew Czajkowski (Head of Section). Mr. Anthony Cutter prepared and analyzed the survey on the use of tools for patent analytics by patent information professionals. We are grateful to the participants in two regional workshops on patent analytics which took place in 2015 in Rio de Janeiro, Brazil, and Manila, Philippines who were presented with the draft Manual and who provided useful feedback, facilitating the optimization and completion of the Manual. We would also like to thank Ms. Alica Daly, Director of the IP Analytics Hub, IP Australia, as well as Mr. Rich Corken, Head of Informatics at the UK IPO for the fruitful discussions and for sharing their experiences with open source tools. The development of this Manual would have not been possible without the excellent support and troubleshooting provided by the open source tools community. Ms. Catherine Oldham offered valuable comments throughout the preparation of the report and assistance with editing. Thanks go to colleagues in the Communications Division and in the Printing Plant for their services. 0.3 Further information The electronic version of the report, as well as all datasets mentioned in the Manual and used for the various exercises can be downloaded from the Manual Github repository. 0.4 Conditions of use You are welcome to use the information provided in this publication, but please cite WIPO and the Manual as the source. Contact e-mail: patent.information@wipo.int 0.5 Disclaimer This Manual does not constitute an exhaustive presentation of all open source tools and the information contained therein was valid at the time of printing. In addition, the opinions expressed in the Manual do not necessarily reflect the opinion of WIPO Member States. "],
["introduction.html", "Chapter 1 Introduction 1.1 Structure", " Chapter 1 Introduction This book provides a practical guide to free and open source software tools for patent analytics. The aim of the WIPO Manual on Open Source Patent Analytics is to provide a practical introduction to patent analytics without assuming prior knowledge of patents or programming languages. One feature of open source and free software tools is that this area is fast moving. In response to this the Manual is divided into two versions: The electronic version of the Manual which can be updated as tools are updated. A printed reference Manual providing a guide to core tools. The Manual builds on the experience generated in the development of the WIPO Patent Landscapes on a wide range of topics that serve as key reference works for methods in patent analytics. The Manual is mainly intended for researchers, patent professionals and patent offices in developing countries. However, we expect that it will be of wider interest to researchers and patent professionals. Patent data is important because it is a valuable source of technical information that can inform decision-making on whether or not to pursue a particular avenue of research and development, whether to license a particular technology, or whether to pursue product development in particular markets. Patent data is also important in economic and policy terms because it provides a key indicator and insight into trends in science and technology. Patent data is commonly used by organisations such as the OECD, EUROSTAT and others to report on trends in research and development. Researchers increasingly use patent data to investigate new and emerging areas of science and technology such as genome editing or climate change adaptation technologies. Patent activity can also be controversial. Important controversies over the last 20 years include DNA patents, software patents, patents on business methods, the rise of patent ‘trolls’ and the implications of the internationalisation of patent activity for developing countries. The free software and open source movements (based on the flexibilities in copyright law) are in part a response to the controversies that have arisen around proprietary software models involving copyright and patents and a desire to do things differently. This has led to new models for sharing data, cooperation in innovation and new business models. In particular, a wide range of open source and free software tools are now available for research and analysis. This Manual provides an overview of the available tools for patent analysis and explores a small number in greater depth. 1.1 Structure We will focus on answering two main questions: How to obtain patent data in a form that is useful for different types of analysis? How to tidy, analyse, visualize and share patent data using open source and free software? In approaching these issues we will organise the Manual and materials into five main topics: An Overview of Open Source and Free Software Tools Approaching Patent Data Obtaining Patent Data Cleaning and Tidying Patent Data Analysing and Visualizing Patent Data As a project focusing on open source and free tools, all data and tools developed for the manual are made available through the GitHub project repository. We encourage you to take a look at the repository. To get started with GitHub and download all materials from the Manual install GitHub and then clone the repository. It’s actually much easier than it sounds. We will now take a quick look at the background to the topics. 1.1.1 An Overview of Open Source and Free Software Tools We start the Manual with a core Overview chapter that reviews the ever growing number of open source and free software tools that are available for different steps in the patent analytics process. The sheer number of relevant tools is almost overwhelming and one feature of open source tools is that they all require investments of valuable time to learn how they work. In some cases this may require acquiring programming skills. To assist with decision-making on whether or not to invest in a particular tool we conclude the Overview with a list of 12 questions that you may want to consider. By far the most important of these questions, and the guiding principle informing our selection of tools for the Manual, is: Does this work for me? 1.1.2 Approaching Patent Data In preparing the Manual we assumed no prior knowledge of the patent system or open source tools. To help you get started a chapter on patent data fields provides a brief introduction to the structure of patent documents and the main data fields that are used in patent analytics. 1.1.3 Obtaining Patent Data One major challenge in understanding the implications of patent activity, either in fields such as climate change technologies, software, or pharmaceuticals, is accessing and understanding patent data. Recent years have witnessed a major shift towards the use of open source research tools and the promotion of open access to scientific data along with the promotion of open science. One of the main purposes of the patent system is to make information on inventions available for wider public use. The patent system has responded to this through the creation of publicly accessible databases such as the European Patent Office espacenet database containing millions of patent records from over 90 countries and organisations. WIPO Patentscope, provides access to 52 million patent documents and weekly publications of Patent Cooperation Treaty applications. Others initiatives to make patent data available include Google Patents and The Lens and Free Patents Online. Most of these tools do not require knowledge of programming. However, the European Patent Office Open Patent Services provides free access to raw patent data for those willing to work using an Application Programming Interface (API) and to parse raw XML or JSON data. In the case of the United States it is possible to bulk download the entire USPTO collection through the Google Bulk Download of USPTO patents. The USPTO has also recently embraced open data through the creation of a new data portal and the Patentsview search database and JSON API. A range of commercial providers such as Thomson Innovation and PatBase, among others, provide access to patent data and, in the case of Thomson Innovation, add additional information through the Derwent World Patent Index. As such there is an ecosystem of patent information sources and providers out there. As we will see, the key problem confronting patent analysts using free tools is obtaining patent data in the quantity and with the coverage needed, and with the desired fields for analytics purposes. The Manual will walk through the different information services and go into detail on those free services that are the most useful for patent analytics. 1.1.4 Cleaning and Tidying Patent Data Anyone familiar with working with data will know that the majority of the work is taken up with cleaning data prior to analysis. In particular data from different patent databases typically involves different cleaning challenges. Most of these challenges involve cleaning inventor and applicant names or cleaning text fields prior to analysis. Two core chapters in the Manual address data cleaning issues. The first is a chapter on Open Refine (formerly Google Refine) which walks through the process for cleaning applicant and inventor names for a sample dataset. The second chapter focuses on the use of R to tidy patent data for an infographic. In working with the Manual we suggest that you might find the following resources useful. The first addresses the question of how best to prepare for work in analytics and the second addresses key issues in the formatting of data that informs work in the Manual using R and RStudio. Jeff Leek’s The Elements of Data Analytic Style (available free of charge if required) Hadley Wickham on Tidy Data and this video We suggest that you take a look at these papers because they contain core ideas for effective approaches to working with patent data. 1.1.5 Analysing and Visualizing Patent Data The core questions in patent analysis are: who, what, where, when, how, and with what? The way in which we approach these questions will depend on the goal of the patent analysis. However, in almost all circumstances realising that goal will depend on combinations of answers to the core questions. The visualization of patent data is an essential feature of modern patent analysis. Put simply, humans are better at absorbing visual information than columns and rows of numbers or large numbers of texts. Two core chapters in the Manual address the visualization of patent data using dashboards with Tableau Public and interactive graphics using Plotly with Excel files or using RStudio. The visualization of networks of applicants, inventors or technologies is a growing feature of patent analytics and we provide a practical walkthrough using the open source software Gephi. With the growing popularity of infographics a core chapter is also provided on preparing data for an infographic using RStudio and the online infographic service infogr.am. Looking beyond patent analysis and visualization, within the core Manual we include a chapter on how RStudio can be used to access the scientific literature using packages developed by ropensci for accessing the Public Library of Science rplos as an introduction to accessing the wider scientific literature using packages such as fulltext. 1.1.6 Sharing Data and The Writing of the Manual In writing this Manual we decided at an early stage to use free and open source tools. Our tool of choice was RStudio because it allowed us to write the Manual in markdown (rmarkdown), including images and graphs generated from code, and then easily export the results to Word, .pdf and html. We were also able to easily create a home for the Manual on Github and to use jekyll to release earlier versions of chapters as articles as they were written. As we moved the Manual into its final version we were able to take advantage of the new bookdown package within the mid-2016 preview version of RStudio to turn the Manual into the electronic book you are reading. All of this was free. The only requirement was investment acquiring the knowledge to use the tools. A key aim behind the development of the Manual was also to make a range of actual patent datasets available that readers could use to experiment with the different tools and follow the Manual as a practical guide. Github proved to be ideal for this particularly with the introduction of large file storage. While these tools were initially unfamiliar, and involved a learning curve, the process proved so easy that the entire Manual was written in rmarkdown inside RStudio and posted to the project development website on Github as it was written. This combination of tools proved to be a powerful and highly flexible way to share raw data, results and analysis in a way that is transparent and easily accessible to a range of audiences. Furthermore all of the tools are free. While this approach will not suit situations where confidentiality is a key concern, for projects where the results are intended to be public this combination of tools represents a powerful and refreshing solution to the old problem of how to make the results of research available to the widest possible audience for free. "],
["an-overview-of-tools.html", "Chapter 2 An Overview of Tools 2.1 General Tools 2.2 Cleaning Tools 2.3 Data Mining 2.4 Data visualization 2.5 Network Visualization 2.6 Infographics 2.7 Geographical Mapping 2.8 Text Mining 2.9 Round Up 2.10 The Checklist 2.11 Credits", " Chapter 2 An Overview of Tools This chapter provides an overview of the open source and free software tools that are available for patent analytics. The aim of the chapter is to serve as a quick reference guide for some of the main tools in the tool kit. We will go into some of these tools in more depth elsewhere in the WIPO Manual on Open Source Patent Analytics and leave you to explore the rest of the tools for yourself. Before we start it is important to note that we cover only a fraction of the available tools that are out there. We have simply tried to identify some of the most accessible and useful tools. Data mining and visualization are growing rapidly to the point that it is easy to be overwhelmed by the range of choices. The good news is that there are some very high quality free and open source tools out there. The difficulty lies in identifying those that will best serve your specific needs relative to your background and the time available to acquire some programming skills. That decision will be up to you. However, to avoid frustration it will be important to recognise that the different tools take time to master. In some cases, such as R and Python, there are lots of free resources out there to help you take the first steps into programming. In making a decision about a tool to use, think carefully about the level of support that is already out there. Try to use a tool with an active and preferably large community of users. That way, when you get stuck, there will be someone out there who has run into similar issues who will be able to help. Sites such as Stack Overflow are excellent for finding solutions to problems. This chapter is divided into 8 sections: General Tools Cleaning Tools Data Mining Data visualization Network visualization Infographics Geographic Mapping Text Mining In some cases tools are multifunctional and so may appear in one section where they could also appear in another. Rather than repeating information we will let you figure that out. 2.1 General Tools Quite a number of free tools are available for multi-purpose tasks such as basic cleaning of patent data and visualization. We highlight three free tools here. 2.1.1 Open Office Many patent analysts will use Excel as a default programme including basic cleaning of smaller datasets. However, it is well worth considering Apache Open Office as a free alternative. While patent analysis will typically use the Spreadsheet (Open Office Calc) there is also a very useful Database option as an alternative to Microsoft Access. Download and Install Apache Open Office for your system. Tip: When saving spreadsheet files, choose save as .csv to avoid situations where a programme can’t read the default .odt files. 2.1.2 Google Sheets Google Sheets require a free Google account and those who are comfortable with Excel may wonder why it is worth switching. However, Google Sheets can be shared online with others and there are a large number of free add ons that could be used to assist with cleaning data such as Split Names or Remove duplicates as shown below. 2.1.3 Google Fusion Tables Fusion Tables are similar to Google Sheets but can work with millions of records. However, it is worth trying with smaller datasets to see if Fusion Tables suit your needs. Fusion Tables appear very much like a spreadsheet. However, the Table also contains a cards feature which allows each record to be seen as a whole and easily filtered. The cards can be much easier to work with than the standard row format where information in a record can be difficult to take in. Fusion Tables also attempts to use geocoded data to draw a Google Map as we can see in the second image below for the publication country from a sample patent dataset. 2.2 Cleaning Tools 2.2.1 Open Refine (formerly Google Refine) A fundamental rule of data analysis and visualization is: rubbish in = rubbish out. If your data has not been cleaned in the first place, do not be surprised if the results of analysis or visualization are rubbish. An in depth chapter is available here on the use of Open Refine, formerly Google Refine, for cleaning patent data. For patent analytics Open Refine is an important free tool for cleaning applicant and inventor names. A number of platforms provide data cleaning facilities and it is possible to do quite a lot of basic cleaning in either Open Office or Excel. Open Refine is the most accessible tool for timely cleaning of patent name fields. In particular, it is very useful for splitting and cleaning thousands of patent applicant and inventor names. 2.3 Data Mining There are an ever growing number of data mining tools out there. Here are a few of those that have caught our attention with additional tools listed below. 2.3.1 RStudio A very powerful tool for working with data and visualising data using R and then writing about it (this chapter, and the wider Manual, is entirely written in Rmarkdown with RStudio). While the learning curve with R can be intimidating a great deal of effort goes in to making R accessible through tutorials such as those on DataCamp, webinars, R-Bloggers and Stack Overflow and free university courses such as the well known John Hopkins University R Programming Course on Coursera. Indeed, as with Python, there is so much support for users at different levels that it is hard ever to feel alone when using R and RStudio. To get started with R download RStudio for your platform by following these instructions and making sure to install R from the link provided. If you are completely new to R then DataCamp is a good place to start. The free John Hopkins University R Programming Course on Coursera is also very good. The John Hopkins University course is accompanied by the Swirl tutorial package that can be installed using `install.packages(“swirl”) when you have installed R. This is a real asset when getting started. In developing this Manual we mainly focused on developing resources with R. However, we would emphasise that Python may also be important for your needs. For a recent discussion on the strengths and weaknesses of R and Python see this Datacamp article on the Data Science Wars and accompanying excellent infographic. 2.3.2 RapidMiner Studio Comes with a free service and a variety of tiered paid plans. RapidMiner focuses on machine learning, data mining, text mining and analytics. 2.3.3 KNIME An open platform for data mining. Other data mining tools (such as WEKA and NLTK in Python are covered below). If you would like to explore other data mining software try this article for some ideas. 2.4 Data visualization If you are new to data visualization we suggest that you might be interested in the work of Edward Tufte at Yale University and his famous book The Visual Display of Quantitative Information. His critique of the uses and abuses of Powerpoint is also entertaining and insightful. The work of Stephen Few, such as Show Me the Numbers: Designing Tables and Graps to Enlighten is also popular. Remember that data visualization is first and foremost about communication with an audience. That involves choices about how to communicate and finding ways to communicate clearly. In very many cases the outcome of patent analysis and visualization will be a report and a presentation. Tufte’s critique of powerpoint presentations should be required reading for presenters. You may also like to take a look at Nancy Duarte’s Resonate for ideas on polishing up presentations and storytelling. The style may not suit everyone but Resonate contains very useful messages and insights. In an offline environment, consider Katy Borner’s Atlas of Science: Visualising What We Know as an excellent guide to the history of visualizations of scientific activity including pioneering visualizations of patent activity. Bear in mind that effective visualization takes practice and is a quite well trodden path. There are a lot of choices out there for data visualization tools and the number of tools is growing rapidly. For business analytics Gartner provides a useful (but subscription based) Magic Quadrant for Business Intelligence and Analytics report that seeks to map out the leaders in the field. These types of reports can be useful for spotting up and coming companies and checking if there is a free version of the software (other than a short free trial). We would suggest thinking carefully about your needs and the learning curve involved. For example, if you have limited programming knowledge (or no time or desire to learn) choose a tool that will largely do the job for you. If you already have experience with javascript, Java, R or Python, or similar, then choose a tool that you feel most comfortable with. In particular, keep an eye out for tools with an API (application programming interface) in a variety of language flavours (such as Python or R) that are likely to meet your needs. If you are completely new to data visualization Tableau Public and our walk through chapter are a good place to learn without knowing anything about programming. Some other tools in this list are similar to Tableau Public (in part because Tableau is the market leader). We will also provide some pointers to visualization overview sites at the end of this section where you can find out about what is new and interesting in data visualization. 2.4.1 Google Charts Create a Google Account to Access Google Spreadsheets and other Google programmes Take a look at the Google Charts Gallery and API For an overview of using Google Charts in R then see the GoogleVis package and its examples here For an overview using Google Charts with Python see the google-chartwrapper or Python Google Charts 2.4.2 Tableau Public An in depth chapter on getting started with patent analysis and visualization using Tableau Public is available here. When your patent data has been cleaned, Tableau Public is a powerful way of developing interactive dashboards and maps with your data and combining it with other data sources. Bear in mind that Tableau Public data is, by definition, public and it should not be used with sensitive data. The workbook can be viewed online here. 2.4.3 R and RStudio R is a statistical programming language for working with all kinds of different types of data. It also has powerful visualization tools including packages that provide an interface with Google Charts, Plotly and others. If you are interested in using R then we suggest using RStudio which can be downloaded here. The entire WIPO Open Source Patent Analytics Manual was written in RStudio using Rmarkdown to output the articles for the web, .pdf and presentations. As this suggests, it is not simply about data visualization. To get started with R and RStudio try the free tutorials at DataCamp. We will cover R in more detail in other chapters and online articles. As part of an approach described as The Grammar of Graphics, inspired by Leland Wilkinson’s work, developers at RStudio and others have created packages that provide very useful ways to visualise and map data. The links below will take you to the documentation for some of the most popular data visualization packages. ggplot2 ggvis ggmap googleVis We will cover ggplot2 and ggvis in greater depth in future chapters. Until then, to get started see the chapters on ggplot2 on R-Bloggers and here for ggvis. Datacamp offers a free tutorial on the use of ggvis that can be accessed here. For a wider overview of some of the top R packages see Qin Wenfeng’s recent awesome R list. 2.4.4 Shiny Shiny from RStudio is a web application framework for R. What that means is that you can output tables and visual data from R such as those from the tools mentioned above to the web. Shiny apps for R users allows for the creation of online interactive apps (upto 5 for free). See the Gallery for examples. See RBloggers for more examples and tutorials. Radiant is a browser based platform for business analytics in R. It is based on Shiny (above) but is specifically business focused. For a series of starter videos on Radiant see here. 2.4.5 IBM Many Eyes You need to Register for a free account to really understand what this is about, try this page and select register in the top right. 2.4.6 Other visualization Tools Tulip: data visualization framework in C++ SigmaJS: JavaScript library dedicated to graph drawing. It allows the creation of interactive static and dynamic graphs Kendo UI: Create widgets for responsive visualizations. Timeline: A KnightLab (northwestern university) is a tool allowing for the creation of interactive timelines and is available in 40 languages. Miso Project: open source toolkit facilitating the creation of interactive storytelling and data visualization Sci2: A toolset for studying science. Simile Widgets Web widgets for storytelling as a spin off from the SIMILE Project at MIT. jqPlot. An open source jQuery based Plotting Plugin. dipity for Timelines (free and premium services) For additional visualization tools and ideas see visualizing.org and Open Data Tools. 2.5 Network Visualization Network visualization software is an important tool for visualising actors in a field of science and technology and, in particular, the relationships between them. For patent analysis it can be used for a range of purposes including: Visualising networks of applicants and inventors in a particular field or scientific researchers. An example of this type of work for synthetic biology is here for a network of approximately 2,000 authors of articles on synthetic biology. Visualising areas of technology and their relationships using the International Patent Classification and the Cooperative Patent Classification (CPC). Previous work at WIPO pioneered the use of large scale patent network analysis to identify the patent landscape for animal genetic resources. The image below displays a network map of Cooperative Patent Classification Codes and International Patent Classification codes for 10s of thousands of patent documents that contain references to a range of farm animals (cows, pigs, sheep etc.). The dots are CPC/IPC codes describing areas of technology. The clusters show tightly linked documents that share the same codes that can then be described as ‘modules’ or clusters. The authors of the landscape report on animal genetic resources used this network as an exploratory tool to extract and examine the documents in the cluster for relevance. Distant clusters, such as Cooking equipment and Animal Husbandry (housing of animals etc.), were discarded. The authors later used network mapping to explore and classify the individual clusters. Visualising networks of key terms in patent documents and their relationships with other terms as part of the exploration and refinement of analysis. In this case the authors have clustered similar terms onto each other using word stemming to understand the contents of the new breeds of animals cluster above in relation to animal breeding. As such, network visualization can be seen as both an exploratory tool for defining the object of interest and as the end result (e.g. a defined network of actors in a specific area). 2.5.1 Gephi Gephi is Java based open source network generating software. It can cope with large datasets (depending on your computer) to produce powerful visualizations. One issue that may be encountered, particularly by Mac users, is problems with installing the right Java version. This problem appears to have been solved with the latest release Version 0.9. To create .gexf network files in R try the gexf package and example code and source code here. In Python try the pygexf library and for anything else such as Java, Javascript C++ and Perl see gexf.net. 2.5.2 NodeXL For die hard Excel users, NodeXL is a plug in that can be used to visualise networks. It works well. 2.5.3 Cytoscape Cytoscape is another network visualization programme. It was originally designed for the visualization of biological networks and interactions but, as with so many other bioinformatics tools, can be applied to a wider range of visualization tasks. We mainly have experience with using Gephi (above) but Cytoscape is well worth exploring. Cytoscape works with Windows, Mac and Linux. 2.5.4 Pajek This is one of the oldest and most established of the free network tools and is Windows only (or run via a Virtual Machine). It is widely used in bibliometrics and can handle large datasets. It is a matter of personal preference but tools such as Gephi may be superseding Pajek because they are more flexible. However, Pajek may possibly have an edge in precision, ease of reproducibility and the important ability to easily save work that Gephi can lack as a Beta programme. Data can also be exported from Pajek to Gephi for those who prefer the look and feel of Gephi. 2.5.5 VOS Viewer VOS Viewer from Leiden University is similar to Gephi and Cytoscape but also presents different types of landscape (as opposed to pure network node and edge visuals). The latest version can also speak to both Gephi and Cytoscape. It is worth testing for different visual display options and its ability to handle Web of Science and Scopus bibliographic data. 2.5.6 Hive Plots We are not entirely sure what to make of Hive Plots. However, we have a lot of sympathy with the aims. The aim of network visualization should be to clarify the complex… not “wow, look, I made something that looks like spaghetti” (although that is normally part of the process). So, we find Hive Plots developed by Martin Krzywinski at the Genome Sciences Center at the BC Cancer Agency interesting. Designed for large networks there are packages for Hive plots in Python through pyveplot and hiveplot. For R there is HiveR with documentation available on CRAN here. In closing this discussion of network mapping tools it is also important to note that network visualizations need to be exported as images. This means that there are additional requirements for image handling software. Open source tools such as The GNU Image Manipulation Program or GIMP are perfectly adequate and easy to use for image handling. Where using labels particular attention should be paid to outlining the text to ensure consistency of display across different computers. These kinds of tasks can be performed in tools such as GIMP. For other sources of network visualization see FlowingData. Also try Visual Complexity and visualising data for sources of inspiration. 2.6 Infographics Infographics are increasingly part of the communication toolkit. They are particularly useful for communicating the results of research in an easily digestible yet informative form. The WIPO Patent Landscape Project has developed a range of infographics with the latest being for the Animal Genetic Resoutces Patent Landscape Report and Assistive Devices and Technologies. The growing popularity of infographics has witnessed the rise of a range of online services including free services. In more cases these will have limitations such as the number of icons etc. that can be used in a graphic. However, as a growing sector that may change. Here are a few services with free options that may be worth exploring. Piktochart.com Canva.com Infogr.am Visme Easel.ly Websites such as Cool Infographics can be useful for finding additional sources, exploring what is hot in the infographics world and tutorials. Tools such as Apple Keynote, Open Office Presentation or Powerpoint can be very useful for wire framing (sketching out) infographics to see what works. 2.7 Geographical Mapping In addition to the ubiquitous Google Maps or well known Google Earth we think it is well worth taking a close look at other services. 2.7.1 OpenStreetMap Rightly popular. 2.7.2 Leaflet A very popular Open Source JavaScript library for interactive maps Accessible through an API. R users could use the leafletr package with tutorials and walk throughs available at R-bloggers. For Python users try folium here or here. 2.7.3 Tableau Public Already mentioned above. Tableau Public uses Open Street Map to create a powerful combination of interactive graphs that can be linked to maps geocoded at various levels of detail. See an example here for the scientific literature on synthetic biology. Tableau Public is probably the easiest way to get started with creating your own maps with patent data. The map below was produced using custom geocoding and connecting the data to publication country and the titles of scientific publications. To view the interactive version try this page. It is possible to easily create simple yet effective maps in Tableau Public. 2.7.4 QGIS A very popular and sophisticated software package running on all major platforms. Using QGIS Oldham and Hall et al mapped the worldwide geographical locations of marine scientific research and patent documents making reference to deep sea locations such as hydrothermal vents (see Valuing the Deep). This is a low resolution QGIS map of scientific research locations in the oceans based on text mining of the scientific literature. 2.7.5 Geonames.org. Not a mapping programme, instead geonames is an incredibly useful database of georeferenced place names from around the world along with a RESTful web service. If you need to obtain the georeferenced data for a large number of places then this should be your first stop. geonames can be accessed in R using the geonames along with client libraries for Python, Ruby, PHP and others. 2.7.6 iCharts A Free and Premium data visualization service: 2.7.7 OpenLayers3 OpenLayers3 allows you to add your own layers to OpenStreetMap and other data sources and may come in very useful if you are seeking to create your own layers. It also has an API and tutorials. 2.7.8 CartoDB Free and paid accounts with a nice looking gallery of examples 2.7.9 d3.js A javascript library for manipulating data and documents. This is the library behind some of the other frequently mentioned visualization tools on the web. 2.7.10 Highcharts Free for non-commercial use with a variety of pricing plans. 2.7.11 Datawrapper An entirely open source service for creating charts and maps with your data. Widely used by big newspapers and so the graphics will seem familiar. Either create an account or fork the source from Github here. There is a free option and a set of pricing plans. 2.7.12 Plotly Free and with an API with clients for R, Python and Matlab, Plotly is an increasingly popular free service that uses the D3.js library mentioned above with the enterprise version used by companies such as Google. Plotly is increasingly popular and has a range of API clients for Python, Matlab, R, Node.js, and Excel. Plotly’s ease of use and access from a range of environments are big reasons for its growing success. 2.8 Text Mining There are a lot of text mining tools out there and many of them are free or open source. Here are some that we have come across. 2.8.1 Jigsaw Visual Analytics For exploring and understanding document collections. 2.8.2 Weka Java based text mining software. 2.8.3 Word Trees Word trees can be used for detailed investigation of texts such as claims trees. The first two examples are taken from the WIPO Guidelines for Preparing Patent Landscape Reports. 2.8.4 Google Word Trees on the Google Developers site provides instructions for generating word trees using Javascript. and Jason Davies tree creator. 2.8.5 KH Coder: free software allowing quantitative content analysis/text mining. 2.8.6 R and the tm package The tm package in R (e.g. using RStudio) provides access to a range of text mining tools. For an introduction from the package developers see here. A number of very useful tutorials are also available for text mining on R-bloggers. For a step by step approach see Graham Williams (2014) Hands-On Data Science with R Text Mining. For a recent overview of text mining tools in R see Fridolin Wild’s (2014) CRAN Task View: Natural Language Processing listing the various packages and their uses. Note that many text mining packages in general focus on generating words. For non-academic purposes this is not very useful. Patent analysis will typically focus on extracting and analysing phrases (ngrams). Therefore look for tools that will extract phrases and allow them to be interrogated in depth. 2.8.7 Python and Text Mining There are quite a few resources available on text mining using Python. Note that Python may well be ahead of R in terms of text mining resources (until we are proven wrong). However, note that Python and R are increasingly used together to exploit their different strengths. Here are a few resources to help you get started. 2.8.8 The Natural Language Toolkit(NTLK) NTLK appears to be the leading package and covers almost all major needs. The accompanying book Natural Language Processing with Python may also be worth considering. The Python Textmining Package is simpler than the giant NTLK package but may suit your needs. This detailed tutorial may be helpful for those wanting to get started with the NTLK package in Python. 2.8.9 Other text mining resources For a wider range of text mining options see this predictive analytics article on the top 20 free text mining software tools. For other free text mining tools try some of the corpus linguistics websites such as The Linguist List, this list, or this list. Bear in mind that most of these tools are designed with linguists in mind and quite a number may be showing their age. However, even simple concordancing tools, such as AntConc can play an important role in filtering large numbers of documents to extract useful information. Some analysis tools such as VantagePoint from Search Technology Inc. have been especially developed and adapted for processing patent data and are available in a subsidised version for students from the vpinstitute. There are also a number of qualitative data analysis software tools that can be applied to patent analysis such as MAXQDA, NVivo, Atlas TI and QDA Miner. However, with the exception of QDA Miner Lite (Windows only), while they offer free trials they do not fall into the category of free or open source software that is our focus. 2.9 Round Up In this chapter we have covered some of the major free and open source tools that are available for patent analysis. These are not patent specific tools but can be readily adapted to patent analysis. With the exception of cleaning of patent applicant and inventor names and concatenated fields, patent data is very well suited for visualization and network mapping. The availability of country level data, address fields and place names in texts also means that patent data can be readily used for geographical mapping. In practice, it is important to identify a set of tools that work best for you and the type of patent analysis tasks that work best for you. It is also important to emphasise that in practice you may use a mixture of paid for tools and free tools. For example, the recent WIPO Patent Landscape for Animal Genetic Resources involved the use of GNU Parallel and Map Reduce for large scale text mining of 11 million whole text patents using pattern matching in Ruby, combined with the use of PATSTAT for statistics, Thomson Innovation and VantagePoint for validation, and Tableau and Gephi for visualization. In short, it is possible to perform almost all patent analysis tasks, using free tools, but in practice a mixed ecosystem of open source and commercial tools may produce the best workflow for the tasks you perform. As such, it is important to think about the tools that are needed and where they support and strengthen existing analysis workflows. 2.10 The Checklist If moving into open source software for the first time it may be useful to develop a list of basic questions to assess whether they a tool or a set of tools will meet your particular needs. The following list is not meant to be definitive or exhaustive but aims to encourage thinking about your particular requirements. Does this tool make sense? That is, is it immediately clear what the purpose of a tool is? If the answer is yes, this is a good sign. If the answer is no, the tool may be too specialised for your particular needs or the creators may be struggling with clearly expressing what the tool is trying to do (a bad sign). Do you understand the language the tool is written in? Is it a problem if you don’t (see below)? Is it worth training someone in this language? Are there free or affordable courses available? Is the source code open or proprietary and what are the terms and conditions of the open source licence? When using open source or free software it is important to be clear what the precise provisions of the licence mean. For example, are you required to make any modifications to the source code available to others on exactly the same terms as the original licence? If you are working with source code this is an important IP question. If you are not working at the source code level this may not be an issue, but it always always makes sense to understand the open source licence. Who owns the data? If you upload data to a web based service, who owns the data once it is uploaded and who else may have access to it and under what conditions? These questions are particularly pertinent where the data is commercially relevant. What does free actually mean? Free versions are often a lead in to premium services (hence the term freemium). This transition is a key feature of open source business models. In some cases free may be highly restricted in terms of the amount of data that can be processed, saved or exported. In other cases, no restrictions on use of the tool are imposed. However, knowledge about the use of the tool may be the real premium or cost factor, particularly if you come to depend on that tool. Be prepared for this. What other companies (or patent offices) are using this tool? This can be an indicator of confidence and also provides examples of concrete use cases. Is the tool well supported with documentation and tutorials? This is an indicator of maturity and ‘buy in’ by a community of developers and users. How large is the community of users and are they active in creating forums and blogs etc. to support the wider community of users? Is this a one function tool or a multi-purpose tool? That is, will this tool cover almost all needs or is it a specific good to have component in a toolkit. In some cases a tool that does one thing very well is a real asset where other tools fall down because they try to do too many things and do them badly. Of the tools listed above, R and Python (possibly in combination) come closest to tools that could be used for a complete patent analysis workflow from data acquisition right through to visualization. In practice, most patent analysis tool kits will consist of both general and specific tools. Can I break this tool? It is always a very good idea to work out where the limitations of software lie so that you are not taken by surprise later when trying to do something that is mission critical. In particular, software may claim to perform particular tasks, such as handling thousands or millions of records, but do them very badly, if at all. By pushing a tool past its limits it is possible to determine where the limits are and how to get the best out of it. Is the tool proportionate to my needs? There has recently been a great deal of excitement about Big Data and the use of Hadoop for dealing with large volumes of data using distributed computing. While Hadoop is open source, so anyone can use it, its adoption would generally be disproportionate for the needs of most patent analysis except where dealing with almost the entire corpus of global patent documents, large volumes of literature and considerable quantities of scientific data. By way of illustration, as noted above, the WIPO Animal Genetic Resources Landscape report used GNU Parallel to process 11 million patent records. The decision to use GNU Parallel was partly made on the basis that Hadoop would have been complicated to implement and overkill for the particular use case. In short, it is worth carefully considering whether a tool is both appropriate and proportionate to the task at hand. Finally, the golden rule for adopting any tool for patent analysis can be expressed in very simple terms. Does this work for me? If you have any suggestions for free or open source tools that we should include in the manual please feel welcome to add a comment to the electronic version of this chapter. 2.11 Credits The development of the list of open source tools benefited from the following articles. Creative Bloq 11/11/2014 The 37 best tools for data visualization Nismith Sharma 2015 The 14 best data visualization tools. TNW News "],
["datafields.html", "Chapter 3 Datafields 3.1 What is a Patent? 3.2 As a form of intellectual property right 3.3 Patents as a type of document 3.4 Basic Data Types 3.5 Round Up", " Chapter 3 Datafields This chapter provides a walk through of patent data fields for those who are completely new to patent analytics or want to understand the workings of patent data a little bit better. A video version of the walk through is available here and the slide deck is available for download in .pdf, powerpoint and apple keynote from GitHub. This chapter goes into greater depth on each data field and their use in patent analysis. 3.1 What is a Patent? A patent can be described in two main ways: As a form of intellectual property right. As a type of document. Understanding the structure of patent documents and data fields is the essential foundation of patent analytics. However, for those who are new to the patent system it is worth highlighting the key features of patents as a form of intellectual property right. 3.2 As a form of intellectual property right A patent is a temporary grant of an exclusive right to a patentee to prevent others from making, using, offering for sale, or importing, a patented invention without their consent, in a country where a patent is in force. Patent rights are territorial rights - they are only valid in the territory of the country where granted. Patents are typically granted for a period of 20 years from the filing data of an application but may be opposed or revoked. To be eligible a claimed invention must: Involve patentable subject matter Be new or novel Involve an inventive step Be susceptible to industrial application or useful. 3.3 Patents as a type of document For patent analytics we need to concentrate on patents as a form of document and to understand: The structure of patent documents and their data fields. The strengths and limitations of different patent databases as a means for obtaining patent data. In this chapter we deal with the basics of patent documents and their data fields. 3.4 Basic Data Types When performing patent analysis we are dealing with data of seven different types: Dates (priority, application and publication dates) Numbers (priority number, application number, publication number, family members, citations) Names (Applicants - also known as Assignees - and Inventors) Classification codes (e.g. International Patent Classification/Cooperative Patent Classification) Text fields (Title, Abstract, Description, Claims, Sequence data) Images (Diagrams) Additional Information (Legal Status, Public Registry etc.) We will walk through each of these fields using a patent application for synthetic genomes from the J. Craig Venter Institute as an example. In the electronic version each of the titles for the images are hyperlinked to their sources to make it easy to explore the data as you go through them. 3.4.1 Synthetic Genomes Synthetic biology (and synthetic genomics) began to hit the international headlines with the news in 2010 that members of the J. Craig Venter Institute had successfully synthesised the genome of a Mycoides microbe and transplanted the genome into the empty cell of another Mycoides that then booted up. This led to considerable excitement about the creation of artificial life and is part of the story of the growing prominence of synthetic biology. For our purposes it is an interesting example for walking through standard patent data fields. 3.4.2 Original Front Page What we see below is the front page of an international Patent Cooperation Treaty(PCT) application from the J. Craig Venter Institute on Synthetic Genomes. The PCT allows applicants to submit a single application for potential consideration in up to 148 other countries that are Parties to the PCT based on decisions made by applicants and examination decisions in individual countries and regions. The front page (or biblio) displays the data fields that are typically used in patent analysis. Starting with dates. There are three dates on this application. The first date is the priority date (6 December 2005) in the Priority Data field (30). This refers to the original (first filing date) for a US application that is the priority (or parent) of all later filings of the same application anywhere else in the world (known as a patent family). The second date is the International Filing Date (22) which is 12 months after the priority filing (US60742542). The third date is the International Publication Date (field 43) which is just over 24 months after the international filing date and 3 years from the first filing date (priority application). For patent analytics the most important dates are generally the priority date (06.12.2005) and the publication date (28.02.2008). The priority date is important for two reasons. First, in legal terms, it establishes the priority claim for this claimed invention over other claims to the same invention submitted in the same period or later under the terms of the Paris Convention. Second, in economic analysis the priority date is the date that is closest to the investment in research and development and therefore the most important in economic analysis (see the OECD Patent Statistics Manual ). However, this information only becomes available when an application is published. That is typically 24 months from the original filing date. As a result this information falls off a cliff the closer we move towards the present day. The publication date is important because, like the publication number, it is generally the most accessible in patent databases. However, in this case there is a 2 to 3 year lag between the first filing date and the publication date. For patent analysis this means that counts based on publication date are always displaying trends that are 2 to 3 years after the original activity has taken place. However, because applicants must pay at each stage of the process patent publication data can be useful as an indicator of demand for patent rights in one or more countries. In many cases the publication date will be the only date that is available to map trends. One important lesson from understanding patent date fields is that patent data is always historic. That is, it always refers to activity in the past. We will address other data fields below. For now note the applicant and inventor information including address and other useful information for patent analysis on the front page (fields 71 and 72). Also, note the International Patent Classification data as an indicator of technology areas expressed through alphanumeric codes (e.g. C07H21/04 which tells us that the claimed invention involves nucleic acids). We also see text fields (for text mining) in the title and abstract and finally we have an image with information on DNA cassettes forming part of the invention. 3.4.3 espacenet Front Page Here we can see the same information in the front page for the record in the espacenet database. espacenet is easily accessible and popular. Even when using commercial tools espacenet is often the fastest way to look up or check information. For a brief overview see these videos and the interactive espacenet assistant. In this case we see data in the form that will typically come back from a patent database such as espacenet. Starting with the dates, we can see that the priority number field contains the priority (first filing) date 20051206 (as YYYYMMDD), linked to the priority document US20050742542P, a provisional US application. This is followed by the application number WO2006US46803 and date and the publication number and date. The publication number, WO2008024129A2, is normally the easiest to use when searching a patent database. Other things to note are that the Applicant and Inventor fields include country code information (e.g US) using standard two letter country codes. While this information is not always available (notably for filings purely on the national level) this data is very useful in patent analytics for identifying cross country collaborations between inventors and applicants. However, be aware that for statistical use it is important to calculate the number of records that possess this country information or to use only those jurisdictions where this data is recorded. 3.4.4 Description The description section (also called the specification) contains details on: previous patent filings and prior art such as scientific literature. in the case of the United States, applicants include information on whether the research leading to the invention was government funded including the funding agency and relevant contract number. a summary followed by detailed background to the claimed invention. This will typically include examples which may be actual worked examples or paper (prophetic) examples. Data provided in the description can be very useful where text mining approaches are applied. For example, the authors have previously text mined millions of documents for biological species names as in this article. In other cases, it may be desirable to investigate the description for information on the country of origin of materials and traditional knowledge, or to explore the uses of particular extracts or chemical compounds. However, when working with data in the description note that it is often noisy and care is required in constructing a query. For example, a search for pigs will capture lots of data on pigs as animals but also toy pigs and devices for cleaning pipelines (pipeline pigs). In contrast, searches for a country name (such as Senegal or Niger) may produce thousands of results that have nothing to do with that country because they are part of species names (e.g. Acacia senegal or Aspergillus niger). It is therefore important to carefully consider and test search queries for text fields such as the Title, Abstract, Description and Claims to avoid being overwhelmed by irrelevant results. 3.4.5 Claims The claims section of a patent document is commonly regarded as the most important part of the document because it tells us what the applicant is actually claiming as an invention. What is claimed in a patent application must be supported by the description. For example, one could not insert a section of Jane Austen’s “Pride and Prejudice” into the description for a synthetic genomes applications and expect it to go forward. Furthermore, in countries such as the United States, patent claims are interpreted (constructed) in light of the contents of the description (see this informative 2009 article by Dan Burk and Mark Lemley on debates in the US). Patent claims take a variety of forms and what may be permitted may vary according to the country or jurisdiction or take specialised forms (e.g. Design patents or US Plant Patents). That can make describing and interpreting patent claims difficult. For more detailed discussion see the WIPO Patent Drafting Manual with examples from the manual below, see pages 84-90: Compositions of matter (e.g. an extract, a compound). Apparatus (e.g. a stand for a camera). Methods (e.g. methods for amplifying a nucleic acid or for making tea). Process (e.g. processes for producing a particular product such as tea, known as Product by Process Claims). Result to be Achieved/Parameters. (e.g. an ashtray that automatically extinguishes a cigarette). Design claims (e.g. a specific design for an umbrella). Plant patents (limited to certain jurisdictions, generally 1 claim for a distinct variety of a particular cultivar e.g. of Banisteriopsis caapi named ‘Da Vine’). Restricted to the claimed cultivar and not to be confused with a utility patent as in the Ayahuasca controversy). Biotechnology claims tend to take the form of “An isolated polynucleotide selected from…” followed by sequence identifiers (SEQ ID). Use Claims. In some jurisdictions, an applicant may claim a new use for a known compound. For example, the use of a well known compound for the treatment of a disease (where that has not previously been described). Software Claims. Jurisdictions also vary on whether they permit software claims (and the law is also subject to revision). Examples include references to “A computer-readable medium storing instructions…” or “A memory for storing data for access by an application program…” followed by further details on the data structure and objects. Omnibus claims: such as “1. An apparatus for harvesting corn as described in the description. 2. A juice machine as shown in Figure 4.” While this sounds like a lot of different types of claim in practice you do not encounter all of these all the time. In our experience (mainly working on biological issues), the claims tend to be for compositions of matter, including biotechnology above, and methods. That could vary depending on your field of interest. In the case of the synthetic genomes patent application we can see that we are dealing with a method claim (claim 1) relating to the assembly of nucleic acid cassettes. The first claim is the most important (and often the most useful) of the claims because everything else that follows normally depends on that claim. Claims can be divided into independent and dependent claims and they form a claims tree. In this case claims 2 - 14 depend on claim 1 and this can be identified by the reference to “The method of claim 1” at the beginning of each of these claims. The next independent claim in WO2008024129A2 appears in claim 32 for “32. A synthetic genome”. Independent claims do not depend on the other claims. One final note on patent claims for patent analysis is that claims may be cancelled or may be modified in particular jurisdictions. In some cases an examiner may determine that there is more than one invention in the application. This can lead to the application being divided into separate applications linked to the original application (although rules vary on this). As such, depending on the type of analysis required it can be important to trace through applications into different jurisdictions. This is where the patent family comes in. 3.4.6 Family Members In the discussion above we noted that when a patent is filed for the first time anywhere in the world it becomes the priority filing or, as the authors tend to call it, first filing. The priority filing also becomes the parent for any follow on publications in that country or another country (applications and grants, including administrative publications such as search reports or corrected documents). The priority filing is therefore the founder of a patent family and the later documents are children who are family members. Because this can lead to quite a lot of confusion let’s look at this example. Family Members We can see here that the family of our international application on synthetic genomes contains 9 applications (including the WO reference document). We can see that in some cases these 9 applications have led to more than one publication leading to a total of 15 family members. Patent publication numbers are generally accompanied by two letter codes at the end of the numbers called kind codes (e.g. A2, B1, T1 etc.) These codes in technical terms tell us about the publication level but also about the type of document involved. In some cases these are administrative republications. For example, for the Patent Cooperation Treaty (WO) kind code A3 means publication of the international search report. While this is a family member we would not want to include counts of these documents in patent statistics unless we were studying actions by patent offices. In contrast, AU is the country code for Australia and it has two documents with kind codes A1 and B2. Because patent offices vary in their use of these codes they can be difficult to accurately interpret, for more details see this list. In the case of Australia kind code A tells us that this was the publication of an application and kind code B tells us it was also published as a patent grant. When we scan down the list of family members we can see that there are a number of other countries with publications of type A and B. The interpretation of kind codes requires considerable care because patent office practices also vary over time. For example, prior to 2001 the United States Patent and Trademark Office only published patent documents when they were granted and did not publish patent applications. Also, until 2001 the USPTO either did not use kind codes or used kind code A. From 2001 onwards the USPTO published both applications and grants with applications receiving kind code A and grants receiving kind code B. Knowing this is critical to the calculation of patent trends because the pre-2001 data needs to be adjusted. Having said this, as a general rule of thumb, and with the exception of the United States prior to 2001, kind code A can be taken to mean an application and kind code B as a patent grant. While we would emphasise that this is not entirely satisfactory it is the best proxy available for counting data across countries until patent offices adopt more uniform practices. However, where dealing with a single country it is better to explore the significance of each type of code. Patent family data thus provides us with a route to identifying all other documents that are linked to an original first filing. Through an understanding of patent families we can also make progress in distinguishing between patent applications and patent grants (although this is imperfect) for the purpose of developing statistics. While this is satisfactory for developing analysis of patent trends, for other purposes we would want to explore other information (such as whether a patent grant is being maintained… see below). When working with patent data there are a variety of patent family types. For example, the EPO Documentation Database (DOCDB) is the central source of most patent data and has a DOCDB family system. In addition, the International Patent Documentation Centre (INPADOC), now part of the EPO, established the widely used INPADOC system. espacenet database families are a little bit different to INPADOC families. In addition Thomson Reuters uses the Thomson system. For an important in depth discussion of patent families in relation to patent statistics see the excellent OECD STI Working Paper by Catalina Martinez (2010) Insight Into Different Types of Patent Families. This basically demonstrates that DOCDB families are a little smaller than INPADOC families. Thomson families tend to be ignored in patent statistics because they are limited to commercial users of the Thomson platforms. That doesn’t mean you shouldn’t use them, but that if developing work on patent trends that others can follow then DOCDB or INPADOC families makes much more sense. In the author’s work we tend to always use INPADOC family data where it is available. By now, this may sound rather complicated. In practice, it isn’t. A very simple way of understanding a patent family is as follows. A patent family is a stack of documents with the parent (priority) at the bottom of the stack. Those documents may have been published in multiple countries and in different languages but because they link back to the same parent (priority) they are members of its family. This simple approach to understanding a patent family is also very useful when thinking about what to count. When we develop counts based on a patent families we are counting the first filings of a patent application and nothing else. That is, the document at the bottom of each stack. When we count patent family members we are counting all documents that link to the patent family as its parent. That is, all documents in the stack. The above approach will allow you to successfully count thousands or millions of patent documents in a way that makes sense to you and to others. However, bear in mind that in some cases a patent may have more than one priority parent. This appears to be particularly true for software patents. That is we are confronted by a “many to many” relationship rather than a simpler “one to many” relationship between the priority documents and family members. Additional measures would therefore be needed to develop counts to address this aspect of the data. 3.4.7 Cited Patent applicants can be said to be “standing on the shoulders of giants” to borrow from the work of the economist Suzanne Scotchmer on patents. For our purposes, judgements about novelty and inventive step during examination are based on assessments of the existing patent literature (what others have previously claimed) and what is called the Non-Patent Literature (NPL), including scientific publications and other materials constituting “prior art”. The existence of prior art may mean that a patent application cannot proceed or that applicants will need to limit what they claim to the aspects of the invention that do not exist in the prior art. This information is recorded in the Cited documents field in databases such as espacenet. In this case the cited documents include a 2003 US grant US6521427B1 to Egea Biosciences with a priority filing in 1997 related to oligonucleotide synthesis for “the assembly of genes and genomes of completely synthetic artificial organisms” using computer directed gene synthesis. In addition, cited documents include cited literature (awarded an XP code in espacenet) that in two cases originate from the inventors of the synthetic genomes application. Cited patent and non-patent literature may have two sources. Information provided by the applicants Documents identified by examiners during search and/or examination. In some countries, applicants are required to provide detailed information on prior art relevant to the claimed invention. In other cases the requirement is weaker. As we might expect, applicants will be reluctant to disclose information that invalidates or greatly complicates their efforts to secure a patent. In addition, examiners will also perform searches to identify relevant art but requirements on examiners to actually disclose that information may also vary. For discussion see work by Colin Webb and colleagues at the OECD here and the 2009 OECD Patent Statistics Manual, notably Chapter 6. Citations added by examiners are generally speaking more important than those added by applicants and in some cases may be marked in patent databases. In this particular case we could find additional information on the origin of the citations by looking at the original document for the publication of the international search report (A3 document) mentioned above in WO2008024129A3. As we can see this contains the front page and then a set of citations accompanied by a category where the entry marked X for the patent grant to Egea Biosciences is judged to affect the claims to novelty and/or inventive step when taken on its own. In practice, applicants may use citations to adjust their claims and as such citations are not necessarily an obstacle to obtaining a patent grant (as we have seen in the patent family data). However, depending on our purpose, citation data is very useful in patent analysis. It makes it possible to gather relevant patent data that might have been missed because of the limitations of a particular search query. It thus helps to complete the picture for a patent landscape analysis or searches of relevant prior art. For academic research it can display the activity that influenced the emergence of a particular field such as synthetic biology. When reviewing cited patent and non-patent literature note that a cited patent document (which may be an application or a grant) may not fall directly into the field of invention of interest. For example, a particular feature of a claimed invention in one technology field (such as military optics) may affect developments in another field (such as medical optics) or be apparently completely unrelated except for a specific technical aspect. 3.4.8 Citing Citing data is the opposite of cited data. One useful way to think of this is that cited data means back citations while citing data means forward citations. Citing data or forward citations are later patent applications that cite our reference document as follows. In this case there are two citing documents at the time of writing. One is from UK applicant Discuva for bacterial engineering WO2014072697A1. A second is from Synthetic Genomics (a commercial arm of the J. Craig Venter Institute) for methods for cloning and manipulating genomes with some of the same inventors listed on the application WO2011109031A1. Forward citations provide information on the applicants who are being affected by a particular patent application or grant or, on a larger scale, by sets of documents. This data can be used in a strategic way to identify others working in a particular field that is ‘close’ to a company or university’s area of interest. This information could inform decisions on building potential alliances or, in other circumstances, it may inform decisions on infringement proceedings. In broader terms, forward citing data can inform patent landscape analysis on the development of a particular field (such as synthetic biology), while bearing in mind that patent activity in one field may have spill over effects in other apparently unrelated areas of technology. 3.4.9 Legal Status As discussed above, patent kind codes at the end of publication numbers provide an indication of the publication level and type of patent document. In cases where this involves specific kind codes (e.g. B) this is often an indicator of a patent grant. However, to gain additional insights we need to review the legal status data as below. In this case the most obvious point about the data is that it informs us that the application is entering the national phase in a number of different countries. That is the applicants are pursuing the application in specific countries listed in the front page (above) under the Designated States field (all Contracting States to the PCT are listed by default). As such, the applicants are signalling their intention to pursue patent grants in these countries. In other case, the legal status data may indicate that an application has been rejected, that a granted patent has lapsed due to failure to pay fees or has expired. Additional information may be obtained through the interpretation of legal status codes with more information available by downloading the Categorisation of recently used legal status codes from the EPO website. When reviewing legal status data note that it may not be recent or complete. For this reason investigation at the national level (and consultation with a patent professional) will generally be necessary to determine what is happening with a particular application or grant. ##Patent Registers Additional information on a patent document is typically available by consulting patent registers on the national or regional level. In the case of European level applications, more information is typically available through the EP Register button on the front page. If we select this for our WO document we will be taken to the EP Register entry for the European family member EP1968994. As below. From this information we can see that no opposition to the patent application was filed within the time limit. We then see that the most recent event is a lapse of a patent in Ireland (IE) along with the publication history. If we scroll down the page more information becomes available. In this case we gain access to information on the written communication history between applicants and the EPO along with details of the payment of patent renewal fees. Out of sight on this image is citation data including the DOIs of cited literature that will link directly to the article concerned where available. On the menu to the left additional information is available. The federated register menu provides access to the national patent registers of designated contracting states under the European Patent Convention as can be seen here. Finally, the menu item All Documents provides access to copies of available correspondence and other documents that can be downloaded as a Zip archive. It is also possible to submit a third party observation using the submit observations button in the menu. Data within the register can be particularly useful for exploring the history and status of an application such as the modification of patent claims in light of search reports. It is also very useful for identifying and reviewing opposition to a particular application. Within Europe it is quite easy to consult register detail. To assist with accessing registry information in other countries WIPO has recently launched a Patent Register Portal to simplify the task of locating the patent register in countries of interest. 3.5 Round Up In this chapter we have walked through some of the most important patent data fields using a single example and the espacenet database. As can now be appreciated a basic understanding of patent data fields opens ups a lot of additional information about a single document of interest. These basic fields are also the building blocks for sophisticated patent analysis. In future chapters we will focus on: Retrieving data with these fields Cleaning up the data in these fields Mapping Trends Network Mapping Geographic Mapping "],
["datasets.html", "Chapter 4 Datasets 4.1 The datasets", " Chapter 4 Datasets In this chapter we introduce the patent datasets developed for the Open Source Patent Analytics Project as training sets for patent analytics. The datasets will be used in the walkthroughs. The datasets will grow over time but we will briefly introduce them and explain how to access them. The datasets are housed at the project GitHub repository. To download individual files click on the link and then select raw to download the file. 4.1 The datasets The datasets are intended to illustrate the range of possibilities for patent data including some of the challenges that may be encountered in cleaning and analysing patent data. They are also drawn from different sources. 4.1.1 Pizza patent datasets Almost everyone likes pizza and it is easy to search a patent database for the term “pizza”. It is also an area of patent activity that encompasses a wide range of technologies such as pizza ovens, pizza boxes, pizza cutters and pizza toppings etc. It is therefore useful for demonstrating ways of interrogating patent data for particular topics. pizza_small is a very small 26 row dataset created by downloading the first page of results from the European Patent Office espacenet database for a smart search on “pizza”. It’s a quick and easy test dataset. pizza_medium was created from a sample of data from a search of the WIPO Patentscope database for the term “pizza” and contains 9,996 rows of data. It is intended to illustrate the data format from Patentscope and to allow work on a medium sized dataset. Note that the format varies from the espacenet format and presents different challenges. An important feature of Patentscope data from a statistical standpoint is that the field marked publication_number in the original data lacks a two letter kind code and is therefore an application_number. The pizza_medium_clean dataset is a precleaned version of the pizza_medium dataset. Specifically, the applicants and inventors field have already been cleaned along with corrupted characters and other common cleaning tasks. This makes it easier to work with the data and this dataset is the core dataset in the Manual. As above, note that the Patentscope publication_number field more properly refers to an application number in the absence of a kind code. pizza_sliced is a set of five .csv files for a search of pizza on espacenet. It is designed to illustrate issues involved in loading multiple files into R. It also illustrates problems with character corruption and the importance of pre-cleaning data before analysis. pizza_lens_1000 is a raw dataset of 1000 records including the term pizza downloaded from The Lens database. The dataset has not been cleaned. 4.1.2 Patent Landscape Reports datasets Three datasets are drawn from the WIPO Patent Landscape Reports. The datasets address different topics, present a variety of fields and formats and are different sizes. Each dataset is linked to a detailed patent landscape report that provides an insight into approaches to patent analytics. ewaste presents the results of research for a report on patent activity for electronic waste recycling and its implications for developing countries. solar_cooking presents the data supporting a report on technologies that use solar energy as the source for cooking and pasteurizing food. ritonavir presents the data for a patent report on patent activity for the HIV antiretroviral drug Ritonavir in the field of pharmaceuticals. The dataset illustrates specific activity around issues such as dosage and also the problem of ‘evergreening’ in patent activity. 4.1.3 Other datasets wipo is a single Excel sheet of data on trends in patent applications and growth rates from the WIPO World Intellectual Property Indicators - 2014 Edition. The data is used for simple graphing in tools such as R and illustrates the need to skip rows when reading data into analytics tools. WIPO_sequence_data. This dataset contains a small sample of the sequence data from the year 2000 available free of charge from the WIPO Patentscope database. This dataset can be used to explore analysis of patent sequence data. Synthetic biology. This is a sample of data from Thomson Innovation developed by Paul Oldham for research on patent activity involving synthetic biology. The data has been extensively cleaned in VantagePoint from Search Technology Inc. and is intended to illustrate the use of data from a commercial patent database. 4.1.4 Round Up The datasets section of the project provides a series of useful training sets from a variety of sources and displaying a variety of features. These are open access datasets that can be used to test different approaches but please credit their sources. More datasets may be added to the online version of the Manual in due course. We are particularly interested in sample data from STN, QuestelOrbit, PATSTAT or other data providers that can be used as training sets. "],
["databases.html", "Chapter 5 Databases 5.1 Introduction 5.2 The Databases", " Chapter 5 Databases 5.1 Introduction This chapter provides a quick overview of some of the main sources of free patent data. It is intended for quick reference and points to some free tools for accessing patent databases that you may not be familiar with. It goes without saying that getting access to patent data in the first place is fundamental to patent analysis. There are quite a few free services out there and we will highlight some of the important ones. Most free sources have particular strengths or weaknesses such as the number of records that can be downloaded, the data fields that can be queried, the format the data comes back in or how clean data is in terms of the hours required to prepare for analysis. We won’t go into all of the details that but will provide some basic pointers. 5.2 The Databases 5.2.1 The Lens Previously known as the Patent Lens this is a well designed site with quite a few visualisation options and access to sequence data. It is possible to search the title, abstract, description and claims of patent documents and create and share data in collections. In 2015 the ability to download up to 10,000 records at a time was added. When combined with interactive charts that allow the user to drill down into results set, this has transformed the Lens into a very useful and innovative database and visualization tool. 5.2.2 Patentscope The WIPO Patentscope database provides access to Patent Cooperation Treaty data including downloads of a selection of fields (up to 10,000 records), a very useful search expansion translation tool, and translation. Obtaining sequence data from Patentscope. Note that this rapidly becomes gigabytes of data. 5.2.3 espacenet Probably the best known free patent database from the European Patent Office. 5.2.4 LATIPAT For readers in Latin America (or Spain &amp; Portugal) LATIPAT is a very useful resource. 5.2.5 EPO Open Patent Services Access patent data through the EPO Application Programming Interface (API) free of charge. Requires programming knowledge. The developer portal allows you to test your API queries and is recommended. 5.2.6 USPTO Patents View The USPTO main database search page can reasonably be described as well… old. In 2016 the USPTO team initiated an Open Data and Mobility initiative that opens up USPTO patent and trademark data. The new Open Date Portal is still in Beta but provides an insight into things to come. As part of the shift to open data the USPTO has established an external Patents View for free searches and bulk downloads. If simple searching does not meet your needs, or the bulk options are too overwhelming, then the new JSON API service is likely to meet your needs. The services are still in beta but this is a very exciting development for those who need greater levels of access to patent data or access to specific data fields. 5.2.7 Google Patents The Google Patent Search API has been deprecated. Access through the Google Custom Search API with the API flag for patents reported to be &amp;tbm=pts with example code for using the API in Python. In the free version of the Google Custom Search API data retrieval is limited and the patent field headings are unclear (that is they use non-standard names). For free patent analytics, Google Custom Search is presently of very limited use. 5.2.8 Google Prior Art Finder The Google Prior Art Finder is a relatively recent development that allows you to enter search terms or patent numbers and to view and export results. The results include a Top Ten and are broken down into sections including Google Scholar, Patents etc. The Export button will export the top ten results for each section in a .csv file. It is possible to load more results for a section (e.g. see More Patent Results at the bottom of the results) and then export them (e.g. 20 patent documents rather than 10). In a test we managed to export 140 patent results but this could rapidly become laborious. An additional issue is that the data will need transposing. At the time of writing we had not identified an API route to Prior Art Finder. 5.2.9 Google USPTO Bulk download The USPTO patent databases may be archaic but you can download the entire US collection from the Google USPTO Bulk download service. It is a fantastic service, and an example to patent offices everywhere on freeing up patent data. If you have a good broadband connection and the hard drive space, it is quite good fun to suddenly have access to millions of patent records. The authors used the service to text mine the collection for millions of biological species names as reported here. However, one important issue to note is that the XML delimiting individual documents is not always well demarcated. This means that any code that will work for one bulk set of files may fail on another set. While it is possible to address this, be prepared to spend time working on this and/or seek assistance from a professional programmer. For an insight into these issues see this Stackoverflow discussion on parsing the data in R. 5.2.10 Free Patents Online Sign up for a free account for enhanced access and to save and download data. It has been around quite a while now and while the download options are limited we rather like it. 5.2.11 DEPATISnet We are not covering national databases. However, the patent database of the German Patent and Trademark Office struck us as potentially very useful. It allows for searches in English and German and has extensive coverage of international patent data, including the China, EP, US and PCT collections. The coverage details are here. Worth experimenting with. 5.2.12 OECD Patent Databases One that is more for patent statisticians. The OECD has invested a lot of effort into developing patent indicators and resources including citations, the Harmonised Applicants names database HAN database, mapping through the REGPAT database among other resources that are available free of charge. Along the same lines the US National Bureau of Economic Research NBER US Patent Citations Data File is an important resource. 5.2.13 EPO World Patent Statistical Database The most important database for statistical use is the EPO World Patent Statistical Database (PATSTAT) and contains around 90 million records. PATSTAT is not free and costs 1250 Euro for a year (two editions) or 630 Euro for a single edition. The main barrier to using PATSTAT is the need to run and maintain a +200 Gigabyte database. However, there is also an online version of PATSTAT that is free for the first two months if you wish to try it by signing up for the trial (knowledge of SQL required). For users seeking to load PATSTAT into a MySQL database Simone Mainardi provides the following code on Github. 5.2.14 Other data sources A number of companies provide access to patent data, typically with tiered access depending on your needs and budget. Examples include Thomson Innovation, Questel Orbit, STN, and PatBase. We will not be focusing on these services but we will look at the use of data tools to work with data from services such as Thomson Innovation. For more information on free and commercial data providers try the excellent Patent Information User Group and its list of Patent Databases from Tom Wolff and Robert Austin. Also worth mentioning is the Landon IP Intellogist blog which maintains Search System Reports ##Tools for Accessing Patent Data In closing this chapter we will highlight a couple of tools for accessing patent data, typically using APIs and Python. We will come back to this later and are working to try this approach in R. 5.2.15 Patent2Net in Python A Python tool to access and process the data from the European Patent Office OPS service. 5.2.16 Python EPO OPS Client by Gsong A Python client for OPS access developed by Gsong and freely available on GitHub. Used in Patent2Net above. 5.2.17 Fung Institute Patent Server for USPTO data in JSON Researchers at the Fung Institute have also been active in developing open source resources for accessing and working with patent data. We highlight patentserver but it is worth checking out other resources in the repository such as patentprocessor, a set of Python scripts for processing USPTO bulk download data. Note that development of these tools no longer appears to be active. ##Round Up One problem confronting patent analysts is access to data in a form that is suitable for more detailed analysis. Typically this involves hundreds or many thousands of records. Recent years have increasingly opened up patent data through the ability to download 1,000 or 10,000 records at a time. However, access to downloads of titles, abstracts and claims or descriptions and full text remains limited when this is what is needed. Patent offices such as the USPTO have taken a leading role in making bulk patent data available and this is very much to be welcomed for those working on patent analytics. However, it is reasonable to say that the present situation is one of improvements in access (through Patentscope, the Lens and the EPO OPS service) but not quite in the quantitities or with the data fields patent analysts would like. "],
["the-lens-1.html", "Chapter 6 The Lens 6.1 Introduction 6.2 Getting Started 6.3 Additional features 6.4 Visualisation 6.5 Working with texts 6.6 PatSeq 6.7 Round Up", " Chapter 6 The Lens 6.1 Introduction In this chapter we provide a brief introduction to The Lens patent database as a free source of data for patent analytics. The Lens is a patent database based in Australia that describes itself as “an open global cyberinfrastructure to make the innovation system more efficient and fair, more transparent and inclusive.” The main way it seeks to do this is by providing access to patent information with a particular focus on sequence information as well as analysis of issues such as DNA related patent activity. An important feature of The Lens for those working on biotechnology related subjects is PatSeq. 6.2 Getting Started To get the most out of the Lens the first step is to sign up for an account from the front page. It is possible to begin searching directly from the front page. However, selecting the small button next to the search box takes you to the search controls. As we can see we can use boolean queries, for searching a range of fields including the full text, title, abstract or claims (a major plus). We can also select one or multiple jurisdictions. In addition the results can be refined to patent applications or grants, and there are options for full text or one doc per family (which greatly reduces the number of results). We used our standard query “pizza”, all jurisdictions, and one document per family. We turned stemming off. Our search for pizza returned 13,714 families from a total of 29,617 publications containing the term in the full text. This approach assists with refining searches by reducing duplication. The Lens allows users to create collections of up to 10,000 results from a search. To create a collection use the Create Collection button and name the collection. How you add records to a collection is not obvious and involves 2 steps. Check the arrow next to Document as in the image below. When the mouse hovers over the arrow a menu will pop up. Choose Top 10k Results. In the box displaying the name of the collection above the results press the + arrow to add the 10,000 documents to the Collection. Once you understand this process it is easy to add documents to collections. One very nice feature of the Lens is that when a collection has been created we can share it with others using the Share button. Users have the option of maintaining a private collection or publicly sharing. The URL for the collection we just generated is https://www.lens.org/lens/collection/9606. We could imagine that for more restricted searches, and taking confidentiality issues into account, this could be a useful way of sharing patent data with colleagues. One useful addition would be the ability to share with groups based on email addresses or something similar (although that may be possible by choosing a private link and sharing it). Using the small icons above Document on the left we can save our query for later use, limit the data to simple families or expand to publications, and download the data. There are two main options for downloading data. The first is to download 1000 records by selecting the export button above Document. When we select the export button we will be presented with a choice on the number of records to export and whether to export in JSON (for programmatic use), RIS for bibliographic software or .csv for use in tools such as Excel or other programmes. The outputs of the export are clean and clear about what they represent when compared with some patent databases. A url link to the relevant file on the Lens is also provided which can assist in reviewing documents. The JSON output (in the lower right of the image above) is also nice and clean. The second route to exporting data is to download up to 10,000 results using the collections. When we select the Work Area icon at the top of the screen and select Collections we will see a new screen with a range of icons next to an individual collection. When we select the download icon we can now download the 10,000 records in the collection in either .csv, ris or JSON formats. This is very easy to use once you understand how to navigate the interface. We also have an option to upload documents into a collection using the upload button and then enter comma separated identifiers. However, at the time of writing we were not able to make this very useful function work. 6.3 Additional features In addition to these features, it is also important to note that data exports include a cited count that counts the number of patent/non-patent records cited by the applicant. The online data also shows the citing documents. For example US 3982033 A Process for Coating Pizza Shells With Sauce cites three patent documents but has 11 forward citations by later applicants. While the citing documents are not included with the downloaded data it is possible to visit a record of interest online and then create a new set with the citing documents. Where a number of documents of interest have been identified this could be the basis for creating a new collection of cited or citing literature on a topic of interest linked to a core query. As such, one possible workflow using the Lens would involve initial exploratory queries and refinement, downloading the results of a refined query for closer inspection and then selecting documents of interest to explore the backward (cited) and forward (citing) citations and generate a new dataset. 6.4 Visualisation The Lens makes good use of online visualisation options using Highcharts and HTML5. To access the visualisations choose the small icon on the right above the Sort by pull down menu. We now see a set of charts for our results. Using the up icon in the top right of each image we can get an expanded view and work with the charts. The Lens uses the Highcharts Javascript library and a very nice feature of this approach is that it the visuals are interactive and can be used to refine search results. In the image below we have opened the applicants image. As an aside, note that each image can be copied as an iframe to embed in your own web page. This suggests that Google is the top user of the word pizza in the patent system with 880 documents in 353 families. We can then select the top result and the charts will regenerate focusing on our selection (in this case Google). To view the results we need to select the results button (the first on the right above the charts) to see the following. What is very useful about is that it is easy to create a new collection for an applicant of interest, to download the results or select areas of a portfolio based on a jurisdiction or technology area or to explore highly cited patents. In short, we can easily dig into the data. Other interesting features of the chart area are references to authors, DOIs, and PubMed Ids for exploration of data extracted from the documents. This reflects the interest at the Lens in researching the relationship between basic scientific research and innovation. Accessing the literature related information requires opening a chart (for example authors) and selecting the top result and the moving into the results view. We then select one of the results such as Voice Actions On Computing Devices and the Citations tab. This reveals a publication from a workshop on Wireless Geographical Information Systems from 2003 as we can see below. An impressive feature of this approach is the effort that has been made to link the citation data to the publication using crossref. According to the documentation around 15 million non-patent literature citations have been linked so far. Note that one additional feature of the Lens download data is that it includes a non-patent literature citation field. For example, downloading the google pizza portfolio and a search for the citation above will reveal the citation but without the added value of the DOI. As such, the download provided the raw NPL data. 6.5 Working with texts In common with other free databases, the Lens is not designed to allow downloads of multiple full texts. However, you can access the full text of documents, including .pdf files, and you can make notes that will be stored with a collection in your account. The image below provides an example of our ongoing efforts to understand why Google is so dominant in the results of searches for pizza in patent documents. 6.6 PatSeq One important focus of the development of the Lens has been DNA sequence data including an ongoing series of articles on the interpretation and significance of sequence data in patent activity. Patseq includes a number of tools. PatSeq data permits access to patent documents disclosing sequences available for bulk download from a growing number of countries. This is a very useful site for obtaining sequence data. Note that you will need to request access to download sequence data in your account area. Species finder and keyword search focuses on searching documents that contain a sequence for a species name or key term. A series of patent portfolios have been generated for some major plant and animal species, e.g. rice, maize, humans, chickens etc. That can be downloaded as collections. The PatSeq Explorer allows the exploration of sequence data for four genomes (at present), notably the human and mouse genome for animals and the soybean, maize and rice genome for plants. This is an area where researchers with Cambia, the non-profit organisation behind the Lens, have invested considerable effort and it is well worth reading the research articles listed on the Cambia and Lens websites on this topic. PatSeq Analyzer is closely related to the Explorer and presently provides details on the genomes mentioned above with a detailed summary of sequences by document including the region, sequence, transcript, single nucleotide polymorphisms (SNPs) and grants with sequences in the patent claims. PatSeq Finder The PatSeq Finder allows a user to enter a DNA or amino acid sequence into the search box and find applications and grants with identical or similar sequences. We selected a sequence at random from the WIPO Patentscope sequence listings browser W016/026850. After processing we will see a list of results that can be downloaded in a variety of formats. The results indicate that our random sequence does not appear in the claims of a granted patent or a patent application but does appear in a number of applications and grants. Further details are provided by hovering over the individual entries and additional controls are available for similarity and other scores to refine the results. As far as we could tell, while the data can be downloaded, it is not presently possible to generate a collection of documents from the results of the PatSeq Finder. 6.7 Round Up The Lens is a very useful patent database that, when you have worked out the meaning of icons, is easy to use. The ease with which collections can be shared and up to 10,000 records downloaded is a real plus for the Lens. In addition, the use of HTML5 and Highcharts makes this a highly interactive experience. The ability to use charts to drill down into the data is very welcome. The link to the crossref service for non-patent literature is very useful but it would be good to see this data included in some way as a field in the data downloads. With the addition of data downloads (in 2015) the Lens is becoming a very useful platform for searching, refining, visualizing and downloading patent data. What would perhaps be useful would be a set of demonstration walkthroughs or use cases that explain the way in which the Lens can be used in common work flows. For example, developing and refining a search, testing results, then retrieving backward and forward citations for refinement and visualization are quite common tasks in patent landscape analysis. Use cases would help users make the most of what the Lens has to offer. The Lens also stands out for its distinctive long term work on sequence data in patents and this will be of particular interest to researchers working on biotech particularly in exploring the analytical tools. "],
["patentscope-1.html", "Chapter 7 Patentscope 7.1 Introduction 7.2 Collections to Search 7.3 Simple Search 7.4 Results 7.5 Downloading Results 7.6 Cross Lingual Searching 7.7 Sequence Data 7.8 Round Up", " Chapter 7 Patentscope 7.1 Introduction Patentscope is the WIPO public access database. It includes coverage of the Patent Cooperation Treaty applications (administered by WIPO) and a wide range of other countries including the European Patent Office, USPTO and Japan totalling 51 million patent documents including 2.8 million PCT applications. In this article we cover the basics of using Patentscope to search for and download up to 10,000 records. A detailed User’s Guide provides more details on specific features. A set of video tutorials are also available. When compared with other free services Patentscope has the following main strengths. Full text search in the description and claims of PCT applications on the day of publication and patent applications from a wide range of other countries including the United States, Japan, China and the European Patent Office among others. Download up to 10,000 records Expand search terms into multiple other languages using Cross Lingual Expansion or CLIR Simple, Advanced and Combined Field searching Accessible in multiple languages and a WIPO Translate text function Mobile version and https: access Sequence listing downloads Green technologies through the IPC Green Inventory Different types of graphical analysis of results lists on the fly using the Options menu. To get the most out of Patentscope it is a good idea to consult the two detailed guides and the video tutorials: Patentscope Search: The User’s Guide. Patentscope CLIR for the Cross-Lingual Information Retrieval Tool here. Patentscope video tutorials If you would like to download patent or sequence data you will need to register for a free account. To register for a free account go here. 7.2 Collections to Search Perhaps the best place to start is with the collections we will be searching. Those can be accessed under the Options menu on the main menu and then the tab reading office. We can see here that Patentscope provides access to the Patent Cooperation Treaty collection, regional collections such as the ARIPO and the European Patent Office and national collections such as the United States, Japan and Others. The ability to search and retrieve data from the LATIPAT collection will be particularly useful for researchers in Latin America and could be linked to analysis using the espacenet version of LATIPAT. If you are only interested in particular collections, this is the place to change the settings. 7.3 Simple Search We can select a range of different fields for search. In this case we have selected full text from the drop down menu for a simple search on the term pizza. Note that Patentscope groups documents for the same application into a record or dossier and that we are seeing the document that is the key for the record. The other documents in the dossier for the record can be accessed by clicking the document number and selecting the Documents menu as in this example. For more details on using simple search see the Simple Search video tutorial. Videos are also available on the use of Field Combinations for constructing searches and Advanced Search. 7.4 Results When we arrive at the results page we can see that we have 24,614 results with our query displaying as searching AllTXT and all languages. We then have an RSS button to copy the feed over to an RSS feeder for updates. There is also a query tree button that displays results by language and terms in the relevant sections of the document. We can see an example of this for a more complex query below. A video tutorial is also available for the Search result list 7.5 Downloading Results The two excel icons at the end of the menu allow a user to download either the short list (first icon) or the second list as a .xls file. To see these icons you must be logged in with a user account or they will not display. When we download these results we will receive an .xls sheet with up to 10,000 entries with a couple of header rows that show the query. Note that each record in the Excel sheet is hyperlinked to the corresponding record in Patentscope. We will go into the use of this data, including with Tableau Public and other tools, in some depth and there are a few things to note here. The first is that the hyperlinked publication number does not possess a kind code (A1, B1 etc.). This only matters in the sense that the number will retrieve multiple documents in other databases linked to the Patentscope number. A second point to note is that Patentscope data is raw in the sense that it is data as it comes from the data providers and is not processed. That means that there can be encoding issues that we will come back to later on in the discussions on data cleaning. What is very useful about Patentscope is that we can actually obtain quite a significant volume of data on a topic of interest. While this article has simply downloaded the first 10,000 results, to obtain the full result set it would be easy enough to limit the data by year and download the data as a series of sets that can be combined later (e.g. three sets). To do this we need to visit the Field Combination Page. Here we will start by putting our query in English All to gain the total number of results. Then we will restrict the data by the publication data field using [] and period between dates (as DD.MM.YYYY). An example is shown below. This will helpfully show the total results for the query (although it can take some time) and we can run and then download results for each year limited segment. When working with multiple downloads it is a good idea to write down the total number of results and then the results for each date limited segment to ensure that the data adds up to what you would expect. Some experimentation may also be needed with the field settings using the Boolean AND/OR operators. 7.6 Cross Lingual Searching One challenge in patent searching is the use of different expressions in different languages for the same query. Patentscope presents a very useful solution to this through cross-lingual searching. From the pull down menu select Cross Lingual Expansion, then enter the search terms and press go. The tool will now generate search terms in multiple languages. To go further with this tool use either the slider settings (precision vs. recall). For example, if we were to insert the search term “synthetic biology” and move recall to the top level (4), we would generate the following query. &quot;FP:((EN_TI:(&quot;synthetic biology&quot; OR &quot;biologic synthetic&quot;) OR EN_AB:(&quot;synthetic biology&quot; OR &quot;biologic synthetic&quot;)) OR (DE_TI:(&quot;synthetische Biologie&quot; OR &quot;synthetischen biologischen&quot; OR &quot;biologische synthetische&quot; OR &quot;Biologische synthetische&quot;) OR DE_AB:(&quot;synthetische Biologie&quot; OR &quot;synthetischen biologischen&quot; OR &quot;biologische synthetische&quot; OR &quot;Biologische synthetische&quot;)) OR (ES_TI:(&quot;biológicas sintéticas&quot;) OR ES_AB:(&quot;biológicas sintéticas&quot;)) OR (FR_TI:(&quot;biologie synthétique&quot; OR &quot;biologie synthéthique&quot;) OR FR_AB:(&quot;biologie synthétique&quot; OR &quot;biologie synthéthique&quot;)) OR (JA_TI:(&quot;生物合成&quot; OR &quot;合成生体&quot; OR &quot;の生物学的合成&quot;) OR JA_AB:(&quot;生物合成&quot; OR &quot;合成生体&quot; OR &quot;の生物学的合成&quot;)) OR (ZH_TI:(&quot;合成生物&quot;) OR ZH_AB:(&quot;合成生物&quot;)))&quot; If supervised mode is selected from the Expansion mode drop down, it becomes possible to select technology areas for the generation of terminology. While we haven’t worked through this in detail that could be very helpful for domain specific query generation. All in all, this is one of the most original and powerful tools that Patentscope has to offer. A detailed .pdf guide to using CLIR is available here. 7.7 Sequence Data A third major feature of Patentscope is access to DNA and amino acid sequence listings filed with PCT Applications. This data can be accessed and downloaded for individual records here. A sample record from the lists can be seen below as a plain text file. Note that some issues may arise with reconciling the plain text file with the WIPO publication number (WO etc.) and this merits careful attention if using this data. Registered account holders can also use the ftp anonymous download service from the same page. This provides access to the sequence data by year as can be seen below. If using the anonymous ftp service note that the recent data is measured in gigabytes, so do not try to download this data over a weak WIFI connection, a gated connection or to your phone(!). Nevertheless, the open accessibility of this data is important. For other sequence data sources you may be interested in the European Bioinformatics Institute resources here and for the US by document number here and until March 2015 at the DNA Patent Database here. Also important is the Lens Patseq tool here. 7.8 Round Up WIPO Patentscope is a powerful tool for gaining access to a significant amount of patent data on a topic of interest. The ability to download 10,000 or more records at a time cannot be beaten by other free tools. The Cross Lingual Searching tool appears to be unique and valuable. Free access to bulk download of sequence data is likely to keep bioinformaticians happy for quite a long time. One way of thinking about the role of Patentscope in patent analytics is as a resource that can be combined with other data tools. For example, if we wanted to obtain the abstracts, descriptions or claims of PCT documents in Patentscope then we might use the Patenscope numbers to retrieve data from EPO Open Patent Services or Google Patents using R or Python or other tools. That is, in this case Patentscope overcomes the limitations of search results from other tools but allows for the targeted use of other tools to retrieve more information. The Cross Lingual Searching tool could also be particularly useful for trying to identify and later acquire patent documents from other jurisdictions where a company or organisation may be seeking to operate or to expand patent landscape analysis into jurisdictions with non-Roman alphabets. The main difficulties that arise from using Patentscope can stem from occasional noise in the data. Patenscope does not clean the data provided from the individual collections with the exception of checking for typological errors in priority numbers and IPC codes. In addition, all text is transformed into UTF-8. However, as is common when dealing with diverse data sources, the results are not always perfect. In addition, because Patentscope data is drawn from a wide range of languages users may need to update their font libraries if large numbers of unusual characters appear in the data (such as installing the Asian language pack for Windows). In practice, as is common with most patent data sources, this can mean significant time is required to clean up the data. Having said this, no other free database tool allows us to download as much data in table form for analysis. As we will see, it is possible to do a lot with Patentscope data. "],
["open-refine.html", "Chapter 8 Open Refine 8.1 Install Open Refine 8.2 Create a Project 8.3 Open Refine Basics 8.4 Basic Cleaning 8.5 Fill blank cells 8.6 Renaming columns 8.7 Exporting Data 8.8 Splitting Applicants 8.9 Round Up 8.10 Useful Resources", " Chapter 8 Open Refine Cleaning patent data is one of the most challenging and time consuming tasks involved in patent analysis. In this chapter we will cover. Basic data cleaning using Open Refine Separating a patent dataset on applicant names and cleaning the names. Exporting a dataset from Open Refine at different stages in the cleaning process. Open Refine is an open source tool for working with all types of messy data. It started life as Google Refine but has since migrated to Open Refine. It is a programme that runs in a browser on your computer but does not require an internet connection. It is a key tool in the open source patent analysis tool kit and includes extensions and the use of custom code for particular custom tasks. In this article we will cover some of the basics that are most relevant to patent analysis and then move on to more detailed work to clean patent applicant names. The reason that patent analysts should use Open Refine is that it is the easiest to use and most efficient free tool for cleaning patent data without programming knowledge. It is far superior to attempting the same cleaning tasks in Excel or Open Office. The terminology that is used can take some getting used to, but it is possible to develop efficient workflows for cleaning and reshaping data using Open Refine and to create and reuse custom codes needed for specific tasks. In this chapter we use Open Refine to clean up a raw dataset from WIPO Patentscope containing nearly 10,000 raw records that make some kind of reference to the word pizza in the whole text. To follow this chapter using one of our training sets, download it from the Github repository here or use your own dataset. 8.1 Install Open Refine To install Open Refine visit the Open Refine website and download the software for your operating system: From the download page select your operating system. Note the extensions towards the bottom of the page for future reference. At the time of writing, when you download Open Refine it actually downloads and installs as Google Refine (reflecting its history) and so that is the application you will need to look for and open. 8.2 Create a Project We will use the Patentscope Pizza Medium file that can be downloaded from the repository here. The file will load and then attempt to guess the column separator. Choose .csv. Note that a wide range of files can be imported and that there are additional options such as storing blank cells as nulls that are selected by default. In the dataset that you will load we have prefilled blank cells with NA values to avoid potential problems using fill down in Open Refine discussed below. Click create project in the top right of the bar as the next step. 8.3 Open Refine Basics A few basic features of Open Refine will soon have you working smoothly. Here is a quick tour. 8.3.1 Open Refine runs in a browser Open Refine is an application that lives on your computer but runs in a browser. However, it does not require an internet connection and it does not lose your work if you close the browser. 8.3.2 Open Refine works on columns. At the top of each column is a pull down menu. Be ready to use these menus quite a lot. In particular, you will often use the Edit cells &gt; Common tranforms as shown below for functions such as trimming white space. Other important menus are Edit column, immediately below Edit cells, for copying or splitting columns into new columns. 8.3.3 Open Refine works with Facets. The term facet may initially be confusing but basically calls up a window that arranges the items in a column for inspection, sorting, and editing as we can see below. This is important because it becomes possible to identify problems and address them. It also becomes possible to apply a variety of clustering algorithms to clean up the data. Note that the size of the facet window can be adjusted by dragging the bottom of the window as we have done in this image. Hovering over an item inside the facet window brings up a small edit button that allows editing, such as removing and from the title. 8.3.4 Custom Facets The Facet menu below brings up a custom menu with a range of options. Selecting Custom text facet (see below) brings up a pop up that allows for the use of code in Open Refine Expression Language (GREL) to perform tasks not covered by the main menu items. This language is quite simple and can range from short snippets for finding and replacing text to more complex functions that can be reused in future. We will demonstrate the use of this function below. 8.3.5 Reordering Columns There are two options for reordering columns. The first is to select the column menu then Edit column &gt; Move column to beginning. The second option, shown below, is to select the All drop down menu in the first column and then Edit columns &gt; Re-order/remove columns. In the pop up menu of fields drag the desired field to the top of the list. In this case we have dragged the priority_date column to the top of the list. It will now appear as the first data column. 8.3.6 Undo and Redo Open Refine keeps track of each action and allows you to go back several steps or to the beginning. This is particularly helpful when testing whether a particular approach to cleaning (e.g. splitting columns or using a snippet of code) will meet your needs. In particular it means you can explore and test approaches while not worrying about losing your previous work. However, it can be important to plan the steps in your clean up operation to avoid problems at later stages. It may help to use a notepad as a checklist (see below). The main issue that can arise is where cleanup moves forward several steps without being fully completed in an earlier step. In some cases this can require returning to that earlier step, restarting and repeating earlier steps. As you become more familiar with Open Refine it will be easier to work out an appropriate sequence for your workflow. 8.3.7 Exporting When a clean up exercise is completed a file can be exported in a variety for formats. When working with patent data expect to create more than one file (e.g. core, applicants, inventors, IPC) to allow for analysis of aspects of the data in other tools. In this chapter we will create two files. A cleaned version of the original data An applicants file that separates the data by each applicant. 8.4 Basic Cleaning This is the first step in working with a dataset and it will make sense to perform some basic cleaning tasks before going any further. The Pizza Medium dataset that we are working with in this article is raw in the sense that the only cleaning so far has been to remove the two empty rows at the head of the data table and to fill blank cells with NA values. The reason that it makes sense to do some basic cleaning before working with applicant, inventor or IPC data is that new datasets will be generated by this process. Bear in mind that Open Refine is not the fastest programme and make sure that you allocate sufficient time for the clean up tasks and are prepared to be patient while the programme runs algorithms to process the data. Note that Open Refine will save your work and you can return to it later. When working with Open Refine we will typically be working on one column at a time. However, the key checklist for cleaning steps is: Make sure you have a back up of the original file. Creating a .zip file and marking it with the name raw can help to preserve the original. Open and save a text file as a code book to write down the steps taken in cleaning the data (e.g. pizza_codebook.txt). Regularise characters (e.g. title, lowercase, uppercase). Remove leading and trailing white space. Address encoding and related problems. Additional actions: Transform dates Access additional information and create new columns and/or rows. We will generally approach these tasks in each column and steps 6 and 7 will not always apply. The creation of a codebook will allow you to keep a note of all the steps taken to clean up a dataset. The codebook should be saved with the cleaned dataset (e.g. in the same folder) as a reference point if you need to do further work or if colleagues want to understand the transformation steps. 8.4.1 Changing case The first column in our Patentscope pizza dataset is the publication number. To inspect what is happening and needs to be cleaned in this column we will first select the column menu and choose text facet from the dropdown. This will generate the side menu panel that we can see below containing the data. We can then inspect the column for problems. When we scroll down the side panel we can see that some publication numbers have a lowercase country code (in this case ea rather than EA for Eurasian Patent Organization using the WIPO standardized country codes). To address this we select the column menu Edit cells &gt; Common transforms &gt; to Uppercase. If we scroll down all the publication numbers will have been converted to upper case. This will make it easier to extract the publication country codes at a later stage. 8.4.2 Regularise case For the other text columns it is sensible to repeat the common transformations step and select to titlecase. Note that this will generally work well for the title field but may not always work as well on concatenated fields such as applicants and inventor names. Repeat this step following the separation of these concatenated fields (see below on applicants). If the abstract or claims were present we would not regularise those text fields. 8.4.3 Remove leading and trailing whitespace To remove leading and trailing white space in a column we select Edit cells &gt; Common transforms &gt; Trim leading and trailing white space across the columns. Note that following the splitting of concatenated cells with multiple entries such as the applicants and the inventors fields it is a good idea to repeat the trim exercise when the process is complete to avoid potential leading white space at the start of the new name entries. 8.4.4 Add Columns We can also add columns by selecting the column menu and Edit Column &gt; Add column based on this column. In this case we have added a column called publication_date. We have a number of options with respect to dates (see below). In this case we want to separate out the date information into separate columns. To do that we can use Edit column &gt; Split into several columns. We can also choose the separator for the split, in this case . and whether to keep or delete the source column. In this case we selected to retain the original column and created three new date related columns. We could as necessary then delete the date and month column if we only needed the year field. We can then rename these columns using the edit Edit Column &gt; Rename this column. Note that in this case the use of lowercase and underscores marks out columns we are creating or editing as a flag for internal use informing us that this is a column that we have created. At a later stage we will rename the original fields to mark them as original. 8.4.5 Address Encoding and related problems The Recipes section of the documentation provides helpful tips and example code for dealing with encoding and related problems that are reproduced here: corrupted characters. This arises from aggregation of data from different sources. In Patentscope the data is converted to UTF8. However, if problems are encountered select Edit cells &gt; Transform and try entering the following. value.reinterpret(&quot;utf-8&quot;) It may be necessary to explore and test other sets which can be identified here. Escape html/XML characters e.g. &amp;amp The most likely source of patent data is XML but to be on the safe side the following should escape (remove) html and XML code appearing in the text. value.unescape(&quot;html&quot;).unescape(&quot;xml&quot;) Question marks Question marks often show up for characters that cannot be represented are a sign of encoding problems. In addition non-breaking spaces may be represented as &amp;nbsp (Unicode(16)). To find a Unicode value go to Edit cells &gt; Transform and then enter unicode(value) which will transform all the characters to unicode numbers. From there you can look up the problem. A quick fix is proposed in the documentation that may work in some circumstances. split(escape(value,&#39;xml&#39;),&quot;&amp;#160;&quot;)[0] Within this particular dataset, we found that these quick tips did not work (presumably because the text had already been converted to UTF-8). However, if all else fails an alternative is to simply find and replace in Transform as in the example below. This is not a very satisfactory solution because it requires inspection of the dataset to identify the specific character problems and then replacing the value. That will be time consuming. 8.4.6 Reformatting dates One problem we may encounter is that the standard date definition on patent documents (e.g. 21.08.2009) may not be recognised as a date field in our analysis software because dates can be ambiguous from the perspective of software code. For example, how should 08/12/2009 or 12/08/2009 be interpreted? Alternatively, as in this case, the decimal points may not be correctly interpreted as signifying a date in some software (e.g. R). We might anticipate this and transform the data into a more recognisable form such as 21/08/2009. A very simple way to do this is by using a replace function. In this case we select the menu for the publication_date field and then Edit cells &gt; Transform. This produces a menu where we enter a simple GREL replace code. replace(value, &#39;.&#39;, &#39;/&#39;) This simple replace code is basically the same as find and replace in Excel or Open Office. In addition, we can see the consequences of the choice in the panel before we run the command. This is extremely useful for spotting problems. For example, if attempting to split a field on a comma we may discover that there are multiple commas in a cell (see the Priority Data field for this). By testing the code in the panel we could then work to find a solution or edit the offending texts in the main facet panel. To find other simple codes visit the Open Refine Recipes page. We will now focus on extracting information from some of the columns before saving the dataset and moving on. 8.4.7 Access additional information There are a range of pieces of information that are hidden in data inside columns. For example, Patentscope data does not contain a publication country field. In particular, note that Patentscope merges all publications for an application record into one dossier. So we are only seeing one record for a set of documents (in Patentscope the wider dossier for a record is accessible through the Documents section of the website). This is very helpful in reducing duplication but it is important to bear in mind that we are not seeing the wider family in our data table. However, we can work with the information at the front of the publication number in the Patentscope records using a very simple code and create a new column (as above) based on the values returned as below. substring(value, 0, 2) Note here that the code begins counting from 0 (e.g. 0, 1 = U, 2 = S). The first part of the code looks in the value field. 0 tells the code to begin counting from 0 and the 2 tells it to read the two characters from 0. We could change these values, e.g to 1 and 4 to capture only a chunk of a number. 8.5 Fill blank cells Filling blank cells with a value (NA for Not Available) to prevent calculation problems with analysis tools later can be performed by selecting each column, creating a text facet, scrolling down to the bottom of the facet choosing (blank), edit and then entering NA for the value. Note that this is somewhat time consuming (until a more rapid method is found) but has the benefit of being accurate. It is generally faster to open the file in Excel (or Open Office) and use find and replace with the find box left blank and NA in the replace field across the data table. For that reason, blank cells should not appear in the dataset you are using in this article. However, in later steps below we will be generating blank cells by splitting the applicant and inventor field. It is therefore important to know this procedure. 8.6 Renaming columns At this stage we have a set of columns that are mixed between the original sentence case and the additions in lower case with no spaces such as publication_number. This is a matter of personal preference but it is generally a good idea to regularise the case of all columns to make them easy to remember. In this case we will also add the word original to the columns to distinguish between those created by cleaning the data and those we have created. 8.7 Exporting Data When we are happy that we have worked through the core cleaning steps it is a good idea to export the new core dataset. It is important to do this before the steps described below because it preserves a copy of the core dataset that can be used for separation (or splitting activities) on applicants, inventors, IPC etc. during the next steps. It is important that this clean dataset is as clean as is reasonably possible before moving on. The reason for this is that any noise or problems will multiply when we move on to the next steps. This may require a major rerun of the cleaning steps on later files created for applicants or inventors. Therefore make sure that you are happy that the data is as clean as is reasonably possible at this stage. Then choose export from the menu and the desired format (preferably .csv or .tab if using analytics tools later). 8.8 Splitting Applicants This article was inspired by a very useful tutorial on cleaning assignee names with Google Refine by Anthony Trippe. Anthony is also the author of the forthcoming WIPO Guidelines for Preparing Patent Landscape Reports and the Patentinformatics LLC website has played a pioneering role in promoting patent analytics. We will take this example forward using the our sample pizza patent dataset so that it can be visualised in a range of tools. If you have not done so already, you can download the dataset here. We actually have two options here and we will go through them so that you can work out your needs in a particular situation. Note that you can use Undo in Google Refine to go back to the point immediately before you tested these approaches. However, if you have followed the data cleaning steps above, make sure that you have already exported a copy of the main dataset. 8.8.1 Situation 1 - First Applicants As discussed by Anthony Tripp we could split the applicant column into separate columns by choosing, Applicants &gt; Edit column &gt; Split into several columns. We then need to select the separator. In this case (and normally with patent data), it is ;. This will produce a set of 18 columns. At this point, we could begin the clustering process to start cleaning the names that is discussed in situation 2. However, the disadvantage with this is that with this size of dataset we would need to do this 18 times in the absence of an easy way of combining the columns into a single column (applicants) with a name on each row. We might want to use this approach in circumstances where we are not focusing on the applicants and are happy to accept the first name in the list as the first applicant. In that case we would simply be reducing the applicant field to one applicant. Bear in mind that the first applicant listed in the series of names may not always be the first applicant as listed on an application and may not be an organisation name. Bearing these caveats in mind, we might also use this approach to reduce the concatenated inventors field to one inventor. For general purposes that would be clean and simple for visualisation purposes. However, if we wanted to perform detailed applicant analysis for an area of technology, we would need to adopt a different approach. 8.8.2 Situation 2 - All Applicants One of the real strengths of Open Refine is that it is very easy to separate applicant and inventor names into individual rows. Instead of choosing Edit column we now choose Edit cells and then split multi-valued cells. In the pop up menu choose ; as the separator rather than the default comma. We now have a dataset with 15,884 rows as we can see below. The advantage of this is that all our individual applicant names are now in a single column. However, note that the rest of the data has not been copied to the new rows. We will come back to this but as a precaution it is sensible to fill down on the publication number column as the key that links the individual applicants to the record. So let’s do that for peace of mind by selecting publication number &gt; edit cells &gt; fill down. We should now have a column filled with the publication number values for each applicant as our key. Note here that there is a need for caution in using fill down in Open Refine as discussed in detail here. Basically, fill down is not performed by record, it simply fills down. That can mean that data becomes mixed up. This is another reason why it is important to fill blank values with NA either before starting work in Open Refine or as one of the initial clean up steps. Using NA early on will help prevent refine from filling down blank cells with the values of another record. If you have not already done so above to assist the clean up process, and as general good practice, transform the mixed case in the applicants field to a single case type. To do that select Applicants &gt; Edit Cells &gt; Common Transformations &gt; To titlecase. We now move back to the applicants and select Facet &gt; Text Facet. What we will see (with Applicants moved to the first column by selecting Applicants &gt; Edit Column &gt; Move column to beginning) is a new side window with 9,368 choices. The cluster button will trigger a set of six clean up algorithms with user choices along the way. It is well worth reading the documentation on these steps to decide what will best fit your needs in future. These cleaning steps proceed from the strict to the lax in terms of matching criteria. The following is a brief summary of the details provided in the documentation page: Fingerprinting. This method is the least likely in the set to produce false positives (and that is particularly important for East Asian names in patent data). It involves a series of steps including removing trailing white space, using all lowercase, removing punctuation and control characters, splitting into tokens on white space, splitting and joining and normalising to ASCII. N-Gram Fingerprint. This is similar but uses n-grams (a sequence of characters or multiple sequences of characters) that are chunked, sorted and rejoined and normalised to ASCII text. The documentation highlights that this can produce more false positives but is food for finding clusters missed by fingerprinting. Phonetic Fingerprint. This transforms tokens into the way they are pronounced and produces different fingerprints to methods 2 &amp; 3. Nearest Neighbour Methods. This is a distance method but can be very very slow. Levenshtein Distance. This famous algorithm measures the minimal number of edits that are required to change one string into another (and for this reason is widely known as edit distance). Typically, this will spot typological and spelling errors not spotted by the earlier approaches. PPM a particular use of Kolmogorov complexity as described in this article that is implemented in Open Refine as Prediction by Partial Matching. It is important to gain an insight into these methods because they may affect the results you receive. In particular, caution is required on East Asian names where cultural naming traditions produce a lot of false positive matches on the same name for persons who are actually distinct persons (synonyms or “lumping” in the literature). This can have very dramatic impacts on the results of patent analysis for inventor names because it will treat all persons sharing the name Smith, John or Wang, Wei as the same person, when in practice they are multiple individual people. We will now walk through each algorithm to view the results. This identifies 1187 clusters dominated by hidden characters in the applicants field (typically appearing after the name). At this stage we need to make some decisions about whether or not to accept or reject the proposed merger by checking the Merge? boxes. This step was particularly good at producing a match on variant names and name reversals as we can see here. It pays to manually inspect the data before accepting it. One important option here is to use the slider on Choices in Cluster to move the range up or down and then make a decision about the appropriate cut off point. Then use select all in the bottom left for results you are happy with followed by Merge Selected &amp; Re-Cluster. In the next step we can change the keying function dropdown to Ngram-fingerprint. This produces 98 clusters which inspection suggests are very accurate. The issues to watch out for here (and throughout) are very similar names for companies that may not be the same company (such as Ltd. and Inc.) or distinct divisions of the same company. It is also important, when working with inventor names, not to assume that the same name is the same inventor in the absence of other match criteria, or that apparently minor variations in initials (e.g. Smith, John A and Smith, John B) are the same person because they may well not be. To see these potential problems in action try reducing the N-gram size to 1. At this point we see the following. This measure is too lax and is grouping together companies that should not be grouped. In contrast increasing the N-gram value to 3 or 4 will tighten the cluster. We will select all on N-gram 2 and proceed to the next step. At this point it is worth noting that the original 9,368 clusters have been reduced to 7,875 and if we sort on the count in the main window then Google is starting to emerge as the top applicant across our set of 10,000 records. 8.8.3 Phonetic Fingerprint (Metaphone 3) clustering As we can see below, Metaphone 3 clustering produces 413 looser clusters with false positive matches on International Business Machines but positive matches on Cooperative Verkoop. At this point we could either manually review the 413 clusters and select as appropriate or change the settings to reduce the number of clusters using the Choices in Clusters slider until we see something manageable for manual review. At this stage we might also want to use the browse this cluster function that appears on hovering over a particular selection, to review the data (see the second entry in the image below). In this case we are attempting to ascertain whether the Korea Institute of Oriental Medicine should be grouped with the Korea Institute of Science and Technology (which appears unlikely). If we open the browser function we can review the entries for shared characteristics as possible match criteria. For example, if the applicants shared inventors and/or the same title we may want to record this record in the larger grouping (remembering that we have exported the original cleaned up data). Or, as is more likely, we might want to capture most members of the group and remove the Korea Institute of Oriental Medicine. However, how to do this is not at all obvious. In practice, selection of items at this stage feeds into the next stage of cleaning using the Cologne-phonetic algorithm. As we can see below, this algorithm identified 271 clusters that were almost entirely clustered on the names of individuals with a limited number of accurate hits. 8.8.4 Levenshtein Edit Distance The final steps in the process focus on Nearest Neighbour matches for our reduced number of clusters. Note that this may take some time to run (e.g. 10-15 minutes for the +7,000 clusters in this case). The results are displayed below In some cases the default settings matched individual names on different initials, but in the majority of cases the clusters appeared valid and were accepted. In this case particular caution is required on the names of individuals and browsing the results to check the accuracy of matches. 8.8.5 PPM The PPM step is the final logarithm but took so long that we decided to abandon it relative to the likely gains. 8.8.6 Preparing for export In practice, the cleaning process will generate a new data table for export that focuses on the characteristics of applicants. To prepare for export with the cleaned group of applicant names there will be a choice on whether to retain the publication number as the single key, or, whether to use the fill down process illustrated above across the columns of the dataset. It is important to note that caution is required in the blanket use of fill down. It is also important to bear in mind that the dataset that has been created contains many more rows than the original version. Prior to exporting we would therefore suggest two steps: Rerun Common transforms &gt; to title case, to regularise any names that may have been omitted in the first round and rerun trim whitespace for any spaces arising from the splitting of names. Rerun facets on each column, select blank at the end of the facet panel and fill with NA. Alternatively, do this immediately following export. 8.9 Round Up In this chapter we have covered the main features of basic data cleaning using Open Refine. As should now be clear, while it requires an investment in familiarisation it is a powerful tool for cleaning up small to medium sized patent datasets such as our 10,000 pizza patent records. However, a degree of patience, caution and forward planning is required to create an effective workflow using this tool. It is likely that further investments of time (such as the use of regular expressions in GREL) would improve cleaning tasks prior to analysis. Open Refine is also probably the easiest to use free tool for separating and cleaning applicant and inventor names without programming knowledge. For that reason alone, while noting the caveats highlighted above, Open Refine is a very valuable tool in the open source patent analytics toolbox. 8.10 Useful Resources The Open Refine website has links to lots of useful resources including video walkthroughs Open Refine Wiki Recipes Open Refine Tips and Tricks Stack Overflow questions on Open Refine "],
["tableau-public-2.html", "Chapter 9 Tableau Public 9.1 Introduction 9.2 Installing Tableau 9.3 Getting Started 9.4 Publication Trends 9.5 Adding New Data Sources 9.6 Creating an Overview Dashboard 9.7 Saving, Display and Privacy Settings 9.8 Privacy and Security 9.9 Round Up", " Chapter 9 Tableau Public 9.1 Introduction In this chapter we will be analysing and visualising patent data using Tableau Public. Tableau Public is a free version of Tableau Desktop and provides a very good practical introduction to the use of patent data for analysis and visualisation. In many cases Tableau Public will represent the standard that other open source and free tools will need to meet. This is a practical demonstration of the use of Tableau in patent analytics. We have created a set of cleaned patent data tables on pizza patents using a sample of 10,000 records from WIPO Patentscope that you can download as a .zip file from here to use during the walkthrough. Details of the cleaning process to reach this stage are provided in the codebook that can be viewed here. The Open Refine walkthrough can be used to generate cleaned files very similar to those used in this walkthrough using your own data. You will not need to clean any data using our training set files. This article will take you through the main features of Tableau Public and the types of analysis and visualisation that can be performed using Tableau. In the process you will be creating something very similar to this workbook. 9.2 Installing Tableau Tableau can be installed for your operating system by visiting the Tableau Public website and entering your email address as in the image below. While you are waiting for the app to download it is a good idea to select Sign In and then Create one now for Free to sign up for a Tableau Public Account that will allow you to load up your workbooks to the web and share them. We will deal with privacy issues in making workbooks public or private below but as its name suggests Tableau Public is not for sensitive commercial information. This will lead you to an empty profile page. While you are there you might want to check out the Gallery of other Tableau Public workbooks to get some ideas on what it is possible to achieve with Tableau. You may want to view a Tableau Workbook for scientific literature that accompanied this PLOS ONE article on synthetic biology. While it is now a few years old it gives an idea of the possibilities of Tableau and the feel of an existing profile page. 9.3 Getting Started When you first open the application you will see a blank page. Before we load some data, note the helpful How-to-Videos on the right and the link to a visualisation of the day. There are also quite a lot of training videos here and a very useful community forum. If you get stuck, or wonder how somebody produced a cool visualisation, this is the place to go. To avoid staring at a blank page we now need to load some data. In Tableau Public this is limited to text or Excel files. To download the data as a single .zip file click here or visit the GitHub repository. unzip the file and you will see a collection of .csv files. The excel file and codebook should be ignored as supplementary. As we can see above there are a number of files in this dataset. The core or reference file is pizza.csv. All other files are aspects of that file, such as applicants, inventors and international patent classification codes. That is concatenated fields in pizza have been separated out and cleaned up. One file, applicants_ipc is a child file of applicants that will allow us to access IPC information for individual applicants. This may not make a lot of sense at the moment but don’t worry it will shortly. To get started we will select the pizza.csv file: We will then see a new screen showing some of the data and the other files in the folder. At the bottom is a flag with Go to Worksheet, so let’s do that. We will now see a screen that is divided in to Dimensions on the left, with Measures below. We can see that in the dimensions there are quite a large number of data fields. Note that Tableau will attempt to guess the type of data (for example numeric or date information is marked with #, geographic data is marked with a globe, text fields are marked with Abc). Note that Tableau does not always get this right and that it is possible to change a data type by selecting a field and right clicking as we can see below. On the right hand side we can see a floating panel menu. This can be hidden as a menu bar by clicking the x. This panel displays the visualisation options that are available for the data field that we have selected. In this case two map options are available because Tableau has automatically recognised the country names as geographic information. Note that persuading Tableau to present the option that you want (for example visualising year on year data as a line graph) can involve changing the settings for the field until the option you want becomes available. At the bottom of the screen we will see a worksheet number Sheet 1 and then options for adding three types of sheet: A New Worksheet A New Dashboard A New Story For the moment we will focus on building worksheets with the data and then move into creating Dashboards and then Stories around our pizza data. 9.4 Publication Trends One of the first things we normally want to do with patent data is to map trends, either in first filings, publications or family members. In the case of our pizza patents from Patentscope we have a single member of a dossier of files linked to a particular application. This data is fine for demonstration needs and we can easily map trends for this data. To do that we simply drag the publication year in the dimensions to the columns field and the number of records from the measures field. Note that Tableau automatically counts the number of rows in a set to create this field. If working with data where accurate counts are important it is important to make sure that the data has been deduplicated on the relevant field before starting. While it does not apply in this case, another important tip is to always have a way of checking key counts in Tableau such as using quick pivot tables in Excel or Open Office. We do not need to worry about this now, but while Tableau is clever software it is still software: it will not always perform calculations as you expect them. For that reason a cross check of counts is a sensible if not vital part of a Tableau workflow. Tableau will guess what we are after and draw a graph. As we can see we now have a graph that plunges off a cliff as we approach the present and contains one null. Null values are typically rows or columns containing blank cells. If there is only 1 null value then the data can probably be left as is (in this case it was a blank row at the bottom of the dataset introduced during cleaning in R). However, it pays to inspect nulls by right clicking on the file in Data and selecting View data. If there are large numbers of nulls then you may need to go back and inspect the data and ensure that blank cells are filled with NA values. Let’s go back to our graph. What we see here is the data cliff that is common with patent data. That is, the cliff does not represent a radical decline in the use of the term pizza, it represents a radical decline in the availability of patent data the closer we move to the present day. The reason for this is that it generally, as a rough rule of thumb, takes about 24 months for an application to be published and can take longer for patent databases to catch up. As such, our data cliff reflects a lack of available data in recent years, not a lack of activity. Typically we need to pull back about 2 to 3 years to gain an impression of the trend. Before we go any further and adjust the axis we will change the graph to something more attractive. To do that we will select filled graph in the floating panel. Behind that panel is a small colour button that will allow us to select a colour we like. The reason that we do this before adjusting the axis is that when we change the graphic type Tableau will revert any changes made to the axis. Next we right click the x (lower) axis and adjust the time frame to something more sensible such as 1980 to 2013 by selecting the fixed option. As a very rough rule of thumb moving back two or three years from the present will take out the data cliff from the lack of published patent information. Note that if we were counting first filings (patent families) the decline would be earlier and much steeper. These lag effects, and ways to deal with them, have been investigated in detail by the OECD patent statistics team, see in particular work on nowcasting patent data. We now have a good looking graph with a sensible axis. Note here that if we were graphing multiple trends on the same graph (family and family members) we might prefer a straightforward line graph for the sake of clarity. We will give this a name Trends and add a new worksheet by clicking the icon next to our existing sheet. The next piece of information we would like is who the most active applicants are. This will also start to expose issues about the different actors who use the term pizza in the patent system and encourage us to think about ways to drill down into the data to get more accurate information on technologies we might be interested, such as, in this case, pizza boxes and musical pizza boxes in particular. It is at this point that the work we did in a previous article on separating individual applicant names into their own rows and cleaning them up using Open Refine, becomes important. In this dataset we have taken this a step further using VantagePoint to separate out individuals from organisations. This information is found in the Applicants Organisations field in the dataset. Lets just drop that onto the worksheet as a row and then add the number of records as a column (tip, simply drop it onto the sheet). At first sight everything seems pretty good. But now we need to rank our applicants. To do that we select the small icon in the menu bar with a stacked bar pointing down. We now see, as we would in the Excel raw file, that there are a significant number of blank entries for applicants in the underlying data, followed by 85 records for Google and 77 for Microsoft. This is also a very good indicator that there may be multiple uses of the word pizza in the patent system unless these software companies have started selling pizzas online. In reality this is a partial view of activity by the applicants because elsewhere in the data the names are concatenated together. This is normally more obvious than in the present dataset through the presence of multiple names separated by ;(to see this scroll down to the first entry for Unilever). To understand why this is a partial view we will now import the applicants.csv file. The correct way to do this is to select the menu called Data then New Data Source and the file applicants.csv. Next, drag Applicants Orgs All onto the Rows. Note that Tableau is interpreting these titles for us (the original is applicants_orgs_all). Then drag Number of Records from the dimensions onto the sheet or into the columns entry. Now choose the stacked bar icon as above to rank the applicants by the number of records. We will now see the following. Note the difference between the original applicants field (where Google scored a total of 85 records) and our separated and cleaned field where Google now scores 191 records. In short, before the separation and cleaning exercises we were only seeing 44% of activity in our dataset by Google involving the term pizza. This still does not mean that they have entered the online pizza business… . What it does tell us is that patent analysis that does not separate or split the concatenated data and clean up name variants is missing over 60% of the story when viewed in terms of applicant activity. As this makes clear, the gains from separating or splitting and cleaning data are huge even where, as in this case, the original data appeared to be quite ‘clean’. That appearance was deceptive. Now we have a clearer view of what is happening with our applicants we can make this more attractive. To do that first select the blue bar in the floating panel. The worksheet will now be presented as ranked bars. Next, drag the number of records from Measures onto the Label button next to Color. That looks pretty good. If we wanted to go a step further we could now turn to the dimensions panel and drag Applicants Orgs All, onto the Color button. The bars will now turn to different colours for each applicant. If this is too bright simply grab the green Applicants Orgs All box from under the buttons menu and move it towards dimensions to remove it. Finally, if we want to adjust the right alignment of the text to the left, then first right click on the name of a company, pick Format then alignment and left. While the default is right align, in practice left align creates more readable labels. To change the default do this with the first worksheet you create before creating any others. We now have an applicants data table that looks, depending on your aesthetic sensibilities, like this. At this stage we might want to take a couple of actions. To make the labels more visible, drag the line between the names and the columns to the right. This will open up some space. Next, think about editing long names down to something short. For example, International Business Machines Corporation, who are also not famous for pizzas, is a little bit too long. Right click on the name and select Edit alias as in the image below. Now edit the name to IBM. As a tip note that where you discover you have missed a duplicate name in clean up (remember that we focus on good enough rather than perfect in data cleaning) it is also possible to highlight two rows, right click, look for a filing clip icon and group two entries onto a new name. However, the resulting named group must be used in all later analysis. It is also important to realise that data cleaning is not a Tableau strength, Tableau is about data analysis and exploration through visualisation. For data cleaning use a tool such as Open Refine. 9.5 Adding New Data Sources We will follow the same procedure that we used for applicants to add the remaining files as data sources. We will add the following four files (as they appear in the folder in alphabetical order). applicants_ipc.csv inventors.csv ipc_class.csv ipc_subclass.detail.csv To add the data sources either click the Data menu and New Data Source or (faster) the cylinder with a plus sign. Then select Text file, add each file and allow it to load. If all goes well the Data panel will now contain the following files. Note here that the applicants data displays a blue tick. This is because it was the last data source that we used and is therefore active. The fields we see in Dimensions belong to that data source. Next click in the bottom menu to create a new worksheet and then click inventors in the Data field. The field names will now change slightly. It is important to keep an eye on the data source that you are using because it is quite easy to drop a field from one data source onto another. In some cases this is a good thing. But, if you receive a warning message you will be attempting to drop a data source on to another data source where there is no matching field. We will come back to this on data blending. Next follow the same procedure for ranking applicants with inventors using the Inventors All. For anyone interested in seeing the dramatic impacts of concatenated fields try dropping the Inventors Original field onto the worksheet. Using Inventors All you should now see the following ranked list of inventors. Now repeat this exercise for the remaining data sources by first creating a sheet and then selecting the data source. As you move through this select the following dimensions to add to the sheet and then drop number of applicants_ipc. Drop Ipc Subclass Detail onto the sheet. Then drop number of records onto the sheet where the field says Abc. Note that a number 6 will appear in the first row. This is an artifact from the separation process. Select that cell, right click and then choose Exclude. Do not rank this data, but instead drag the field Applicants Orgs All onto the sheet so that it is the first row (tip, it is easiest to do this by dragging the field into the row bar before the IPC field). You will now see a list of company names followed by a list of IPCs. Congratulations, we now have an idea of who is patenting in a particular area of technology using the word pizza at the level of individual applicants. Add a new sheet. Then click on ipc_subclass_detail. Note that if you click on the data source first, the dimensions panel will go orange. Don’t panic. The reason is that Tableau thinks you are trying to blend data from the ipc_subclass_detail source with applicants_ipc. If you do this simply click on ipc_subclass-detail again. ipc_subclass-detail. Drop the Ipc Subclass Detail dimension on to the sheet. Then drop the number of records onto the sheet. Then click on the first cell containing 6 as an artifact and exclude. Repeat for 7. Then select the bar chart in the floating Show Me panel, then drag Number of Records onto the Label button. Now rank the column using the descending button in the upper menu as before. At this point, if we had not trimmed the leading white space the ranked list would display indentations and there would be duplicates of the same IPC code. For that reason it is important to trim leading white space before attempting to visualise data (and this applies to all our separated fields). 9.6 Creating an Overview Dashboard You should now have five worksheets each of which displays aspects of our core pizza set. We have named the sheets as follows and suggest that you might want to do the same. Note that where there is more than one sheet containing similar but distinct information it will be helpful to give them distinct names (e.g. IPC Subclass and Applicants IPC Subclasses). We might even start using less technical labels by calling the IPC something clearer like Technology Area, to aid communication with non-IP specialists Let’s get a quick overview of the data so far. Next to the add worksheet button in the worksheets bar is a second icon to create a dashboard. Click on that and we will now see a sheet called Dashboard 1. Dashboards are perhaps Tableau’s best known feature and are rightly very popular. We can fill our dashboard by dragging the worksheets from the Dashboard side menu. The order in which we do this can make life easier or more difficult to adjust later. Let’s do it in the following steps Drag Trends onto the dashboard and it will now fill the view. Drag Organisations onto the dashboard. That is rather messy, but all is not lost. Simply click in the top right corner of the organisations panel on the right to remove it (in the original worksheet click on it and select Hide). We now have an Organisations column that still looks crunched. Now select the top of the organisations box and a small inverted triangle will appear. Click on that and then choose Fit &gt; Fit Width. The bars may now disappear. Click into the box on the line where the bars start and drag them back into view. At this point long names may start to be obscured. If desired, right click on a long name such as Graphic Packaging International, choose Edit alias and edit it down to something sensible such as Graphic Packaging Int. We now have two panels on the dashboard. Let’s add two more. First drag technology areas below the line where Trends and Organisations finish. Grey shaded boxes will appear that show the placement, across the width is fine. This can take some time to get right, when the whole of the bottom area is highlighted let go of the mouse. If it goes somewhere strange either select the box and in the top right press x to remove it, or try moving it (in our experience it is often easier to remove it and try again). Do not try to format this box yet. Instead, grab inventors and drag it into the space before the technology areas below. We now have four panels in the dashboard but they need some tidying up. First, in the two boxes we have just edited repeat the Fit Width exercise and then drag the line for the bars around until they are in view and satisfactory. Next, we have names such as Applicants Orgs All that are our internal reference names. Click on them in each of the three panels one at a time and select Hide Field Labels for Rows. Hmm… our Technology Areas panel is proving troublesome because even the edited version of the IPC is rather long. Before we do any editing, first experiment with the Size menu in the bottom right. The default dashboard size in Tableau Public is actually quite small. Change the settings until you have something that looks cleaner even if there are still some overlaps. Options such as Desktop, Laptop and Large blog are generally decent sizes but in part the decision depends on where you believe it will be displayed. To fix the long Technology areas labels we go back to the original sheet (tip: if you move the mouse to the top right in the panel an arrow with Go to Sheet will appear, it is very useful for large workbooks). Inside the original sheet, try dragging the line separating the text and bars so that the bars now cover some of the longer text. Then switch back to the dashboard. If you feel unhappy with the result then right click in the panel in the dashboard and then choose Edit alias. This is useful for simply making labels in the view more visible (it does not change the original data). If all goes well you will now have a dashboard that looks more or less like this. Note that depending on the worksheet settings you may want to make the font size consistent (right click and choose Format, then font size). Note also that if you increase the font size (the default is 8 point) then you may need to edit some of the labels again. We have now done quite a lot of work and produced an Overview dashboard. It is time to save the workbook to the server before doing anything else. 9.7 Saving, Display and Privacy Settings The only option for saving a Tableau Public workbook is to save it online. To save the file go to File and Save to Tableau Public. If you want to save the workbook as a new file (after previously saving) then choose Save As. You will then be asked to enter your username and password (Tableau does not remember the password) and the file will upload. Tableau will then compress the data. As of June 2015 it is possible to store 10GB of data overall and to have up to 10 million rows in a workbook (which is generally more than enough). Tableau will then open a web browser at your profile page and it will look a lot like this. Having read the message, click Got it on the right. Do you notice anything strange. Yes, we can only see the Dashboard and not any of the other sheets. To change this and any other details click on edit details near the title and some menus will open up as follows. To make sure the worksheets are visible select the check box marked Show workbook sheets as tabs and then Save. To access this demonstration workbook go here. 9.8 Privacy and Security As emphasised above, Tableau Public is by definition a place for publicly sharing workbooks and visualisations. It is not for sensitive data. In the past users, such as journalists, relied on what might be called ‘security by obscurity’ but the trend towards storing data on a Tableau public profile (the only option) makes that less of an option. If this a concern there are two actions that might potentially be considered that limit the visibility of a workbook and its wider use. Logically, the answer to any concerns about Tableau Public and sensitive information is not to include sensitive information in the first place. The following are not recommendations but simply highlight the available options. In the discussion on the settings above, there is a check box to prevent users from downloading a workbook. You might want to select that option where a workbook contains information that you do not want to be seen other than what you choose to make visible. It is possible to create a setting so that a workbook does not show up on a user’s profile. This is hard to spot, and appears by hovering over the workbook in the Profile view. As the message points out using this option does not prevent a workbook being found through search engines or seen by users. It just means it is not visible on the profile page. As such, Tableau public is fundamentally about sharing information with others through visualisation. That is, it is for information that you want others to see. Here it is briefly worth returning to the completed dashboard above and clicking the share button. As we can see here, Tableau generates embed codes for use on websites or for emailing as a link along with twitter and facebook. 9.9 Round Up In this chapter we have introduced the visualisation of patent data using a set of nearly 10,000 patent documents from WIPO Patentscope that mention pizza. As should by now be clear Tableau Public is a very powerful free tool for data visualisation. It requires attention to detail and care in construction but is one of the best free tools that is out there for visualisation and dashboarding. To take working with Tableau on pizza patents forward on your own here are some tips. You already know how to use Tableau to create a map of publication countries. The pizza source file contains a set of publication numbers. Try a) creating a visualisation with the publication numbers, b) looking in the pizza source file for a set of URL and then exploring what can be done with Worksheet &gt; Action with that URL. In dashboards consider using one field as a filter for another field (such as applicant and title). What data source or data sources would you need to do that? What kinds of stories does the pizza data tell us and how might we visualise them using the information provided on applicants and its subset Applicants IPCs? If you get stuck, and it does take time to become familiar with Tableau’s potential, perhaps try exploring this workbook on synthetic biology and the use of Tableau images in this article PLOS ONE article. As a tip, try clicking on the bars and then the titles to understand Actions. Downloading workbooks prepared by others can be a very good way of learning the tips and tricks of tableau visualisation and dashboarding. If you would like to download the pizza workbook it is here. However, one of the most important issues exposed by working with Tableau is that you must ensure that fields you want to visualise are tidy, that is not concatenated, and also that they are as clean as it is reasonable to make them. For researchers wishing to work up their own data we suggest the Open Refine article as a good starting point. "],
["gephi-1.html", "Chapter 10 Gephi 10.1 Installing Gephi 10.2 Opening Gephi and Installing Plugins 10.3 Importing a file to Gephi with the converter plugin 10.4 Sizing and Colouring Nodes 10.5 Laying out the Graph 10.6 Adding Labels 10.7 Using the Preview Options 10.8 Exporting from Preview 10.9 Resources", " Chapter 10 Gephi This chapter focuses on visualising patent data in networks using the open source software Gephi. Gephi is one of a growing number of free network analysis and visualisation tools with others including Cytoscape, Tulip, GraphViz, Pajek for Windows, and VOSviewer to name but a few. In addition, network visualisation packages are available for R and Python. We have chosen to focus on Gephi because it is a good all round network visualisation tool that is quite easy to use and to learn. In this chapter we will focus on creating a simple network visualisation of the relationship between patent applicants (assignees). However, network visualisation can be used to visualise a range of fields and relationships, such as inventors, key words, IPC and CPC codes, and citations among other options. For this chapter we will use a dataset on drones from the Lens patent database. The dataset consists of 5884 patent documents containing the terms “drone or drones” in the full text deduplicated to individual families from the full publication set. The dataset has been extensively cleaned in Vantage Point by separating out applicant and inventor names and then using fuzzy logic matching to clean up names. Very very similar results can be achieved using Open Refine as described in Chapter 9 of this Manual. The dataset can be downloaded from Github in a zip file to unzip here. 10.1 Installing Gephi You should install gephi 9.1 (the latest release) rather than an earlier version. Note that any later updates may not contain the key functionality that is needed below (as it takes a while for some of the plugins and features to catch up). To install for your operating system follow these instructions After you have finished this chapter you may want to follow the Quick start guide although we will cover those topics in the article. The Learn section of the website provides additional tutorials. 10.2 Opening Gephi and Installing Plugins When you have installed Gephi, open it and you should see the following welcome screen. Before we do anything else, we need to install a plugin developed by Clement Levallois to convert Excel and csv files into gephi network files. To install the plugin select the Tools menu in the menu bar and then Plugins. You will see a pop up menu for the plugins. At this point you may want to press Reload Catalog to make sure everything is loaded. Then head to Available Plugins. Click on name to sort them alphabetically. You now want to look for a plugin called Convert Excel and csv files to networks. Select the check box, press Install and follow through the menus. Just keep pressing at the prompts and then you will need to restart at the end. You will need to restart Gephi for it to take effect but if you return to the Plugins menu and then choose the installed tab you should see this. You are good to go. While you are there you may want to check out the other plugins to get an idea of what is available. For more on the conversion plugin see this description Excel/csv converter to network plugin. 10.3 Importing a file to Gephi with the converter plugin We will concentrate on using the drones patent dataset in the zipped .csv version here and don’t forget to unzip the file. While Gephi works with .csv files, the import plugin includes a timeline option that only works with Excel. For that reason we will use the Excel version. 10.3.1 Step 1. Open Gephi and Choose File &gt; Import For this to work we need to use the Import function under the File menu. You should now see a menu like that below. Make sure that you choose the co-occurrence option. Next you will be asked to select the file to use. We will download and then unzip the gephi_drones_fulltext_cleaned_5884.csv file that is located on the WIPO Analytics website on Git Hub. When you have chosen Data importer(co-occurrences) then choose Next. Make sure the column headers stays selected (unless using your own data). You will then need to choose a delimiter. In this case it is a comma but in other cases it may be a semicolon or a tab. We now need to choose the agents, that is the actors or objects that we want to create a network map with. We will use patent_assignees_cleaned as this is a relatively small set. We will choose the same field in the two boxes because we are interested in co-occurrence analysis. In the next step we need to specify the delimiter for splitting the contents of the applicants_use_me column. In all the fields it is a semicolon so let’s choose that. Note that if you are doing this with raw Lens data that you have not previously cleaned the Lens delimited is a double semi-colon (which is not helpful) and will need to be replaced prior to import. We will then be asked if we want a dynamic network. This presently only works with Excel files and even then it does not always work well. We will leave this blank as we are using a .csv file. Note that if we were using an Excel file the choices we would use would normally be the publication year or publication date or the priority year or date for patent data. The next menu provides us with a list of options. Unfortunately, with one exception, it is not entirely clear what the consequences of these choices are so experimentation may be needed. Choice1. Create links between applicants_use_me. Choice 2. Remove duplicates. We don’t need that as we know that they are unique. Choice 3. Remove self-loops. Generally we do want this (otherwise known as removing the diagonal to prevent actors counting onto themselves - this will produce a large black hoop or handle for a self-loop in Gephi). We will choose to create the links and to remove the self loops. Next we will see a create network screen setting out our choices. Press Finish Next we will see an import screen. It is quite common to see warning messages on this screen. In this case some of the applicants cells in the worksheet are blank because no data is available. When you see warning messages it is a good idea to check the underlying file to make sure that you understand the nature of the warning. A second common warning with dynamic networks is that the year field is not correctly formatted. In that case, check that the format of the date/year field is what gephi is expecting in the underlying data. You can review the data in the data laboratory. Note that the import screen also provides options on the type of graph. Normally for networks of authors, inventors and actors leave this as an undirected (unordered) network. Undirected is the basic default for patent data and scientific literature. We will also see the number of nodes (dots) and edges (connections). It is important to keep an eye on these values. If the nodes are much lower than you expect then it is useful to go back to your data and inspect for problems such as concatenation of cells and so on. Click OK. You should now see a raw network that looks like this. Note that we can see the number of Nodes and Edges in the top right. If we switch to the top left, we will see three tabs, for Overview, Data Laboratory and Preview. Choose Data Laboratory. In the Data laboratory we can see the ID, Label, type of field and the frequency (the count of the number of times the name appears). Note that these fields are editable by clicking inside the entry and can also be grouped (for example where a variant of the same name has been missed during the name cleaning process in a tool such as Open Refine). In some cases you may have filled any blank cells in the dataset with NA (for Not Available). If this is the case NA will show up as a node on the network. You can address this type of issue in the Data Laboratory by right clicking on the NA value and then Delete. Note also that you can always exclude or combine nodes after you have laid out the network by editing in the Data Laboratory. The second part of the Data Laboratory is the Edges under Data Table in the Data Laboratory. The edges table involves a source and a target, where the source is the source node and the target is another node where there is a link between the nodes. We can see the edges table sorted alphabetically (click the source heading to sort) where the value in weight is the number of shared records. Again, note that it is possible to export the edges set and import a set. Also note the menus at the bottom of the screen which allow column values to be copied over. This can be useful where the label value is not populated meaning that a name will not display on the node when the graph is laid out. Most of the time we can simply proceed with laying out the network without paying much attention to the data laboratory. However, it is important to become familiar with the data laboratory to avoid unexpected problems or to spot corruption in the data. 10.4 Sizing and Colouring Nodes When we look at the Overview screen we have quite a wide range of options. We will start on the upper right with the Statistics panel. The Run buttons will calculate a range of statistics on the network. Probably the two most useful are: Modularity Class. This algorithm iterates over the connections (edges) and allocates the nodes to communities or clusters based on the strength of the connections. This algorithm is explained in detail in this article Vincent D Blondel, Jean-Loup Guillaume, Renaud Lambiotte, Etienne Lefebvre, Fast unfolding of communities in large networks, in Journal of Statistical Mechanics: Theory and Experiment 2008 (10), P1000. The ability to detect communities in networks based on the strength of connections is a powerful tool in patent analytics. Network Diameter. This calculates two measures of betweeness, that is betweeness centrality (how often a node appears on the shortest path between nodes) and centrality(the average distance from a starting node to other nodes in the network). Network Diameter also calculates Eccentricity which is the distance between a given node and the farthest node from it in the network. For background on this see the Wikipedia entry and also Ulrik Brandes, A Faster Algorithm for Betweenness Centrality, in Journal of Mathematical Sociology 25(2):163-177, (2001) Whereas Modularity Class identifies communities (particularly in large networks), centrality measures examine the position of a node in the graph relative to other nodes. This can be useful for identifying key actors in networks based on the nature of their connections with other actors (rather than simply the number of records). If we run Modularity Class as in the figure a pop up message will inform us that there are 246 communities in the network. Given that there are only 362 nodes this suggests a weakly connected network made up of small individual clusters. 10.4.1 Filtering the data We have a total of 5,265 nodes which is quite dense. After running the modularity class algorithm above, we will now move over to the Filters tab next to Statistics. Our aim here is to reduce the size of the network Move over to the left where it says Ranking and then select the red inverted triangle. Set the largest value to 200 and the smallest to 20 (it is up to you what you choose). Then apply. The network will now change. Open the Filters menu and choose Attributes. That will open a set of Folders and we would like to use Range. When the Range folder is open drag frequency into the Queries area below (marked with a red icon and Drag message when empty). Then either drag the range bar until you see a frequency of 5 as the minimum or change the number by clicking on it. Note that as we drag the results the number of Nodes and Edges in the Context above will change. We are looking for a manageable number. In the image below I have set the number to 5. 10.4.2 Setting Node Size Next we want to size the nodes. On the left, look for the Appearance tab and then with Nodes in grey choose the Ranking button. Here the minimum size is set to 20 and the maximum to 150. Note that the default setting is 10 and this is generally too small for easy visibility. Press Apply and you will see the network changes to display the size of nodes based on the frequency. You can always adjust the size of nodes later if you are unhappy with them. 10.4.3 Colouring the Nodes To colour the nodes choose the small palette icon next to the size icon. We now have choices on Unique (simply grey), Partition or Ranking. In this case we will choose Ranking and frequency. Note that a range of colour palettes can be accessed by clicking on the small icon to the right of the colour bar under ranking. When you have found a palette that you like then click Apply. An alternative way of colouring the graph in earlier versions of gephi was to partition on Modularity class. This would colour the nodes as ‘communities’ of closely linked nodes. However, at present in Gephi 9 this option does not appear to be consistently available but may return in a future update. There are a range of other options for colouring nodes including a colour plugin that will detect if a column with a colour value is present in the imported data. This can be very useful if you have colour coded categories of data prior to importing to gephi. 10.5 Laying out the Graph In the bottom left panel called Layout in the figure above there are a range of network visualisation options with more that can be imported from the plugin menus. Among the most useful are Fruchterman-Reingold, Force Atlas, OpenOrd and Circular with specialist plugins for georeferenced layouts that are well worth experimenting with. We will illustrate network layout using Fruchterman-Reingold. The first setting is the area for the graph. The default is 10,000 but we will start with 20,000 because 10,000 tends to be too crunched. The default for the gravity setting is 10. This is intended to stop the nodes dispersing too far but is often too tight when labels are applied. Try changing the setting to 5 (which reduces the gravitational pull). The settings in the different layout options can take some getting used too and it is worthwhile creating a record of useful settings. Gephi does not save your settings so make sure you write down useful settings. We are now good to go. But, before we start take note of two important options for later use. The first is the NoOverlap plugin we installed above. This will help us to deal with overlapping nodes after layout. The second is Expansion which will help us to increase the size of a network are to make it easier to see the labels. Note also the Contraction option which will allow us to pull a network back in if it expands too far. Now make sure that Fruchterman-Reingold is selected with the settings mentioned above and click Run. You can leave the network to run and the nodes will start to settle. If the network disappears from view (depending on your mouse) try scrolling to zoom out. Our aim is to arrive at a situation where lines only cross through nodes where they are connected. As you become more experienced with layout you may want to assist the nodes with moving into a clear position for a tidier graph. You will now have a network that looks something like this (note that 15,000 for the Area may have been enough). We can see that some of the nodes are set very close together. That will affect the ability to label the nodes in a clear way. To address this we first use the NoOverlap function and later we may want to use the Expansion function in the Layout drop down menu items. Choose nooverlap from the menu and Run. While the difference is very minor in this case we have at least moved the nodes into separate positions. At a later stage you may want to use the Expansion function. This will increase the size of the network and is useful when working with labels. 10.5.1 Save your work At this stage we will save our work. One feature of Gephi as a Java programme is that there is no undo option. As a result it is a good idea to save work at a point where you are fairly happy with the layout as it stands. Go to File and choose Save As and give the file name a .gephi extension. Do not forget to do this or gephi will not know how to read the file. If all goes well the file will save. On some occasions Java may throw an exception and you will basically have to start again. That is one reason to save work in Gephi regularly because it is a beta programme and subject to the predilections of Java on your computer. 10.6 Adding Labels The next step is to add some labels. In the bottom menu bar there are a range of options. What we want is the small grey triangle on the right of this menu bar that will open up a new bar. Click in the triangle and you will see a set of options. Choose labels and then at the far left check the Node box. We will not see any labels yet. To the right is a menu with size. This is set to scaled. To see some labels move the scale slider as far as it will go. We will see labels come into view and a first hint that we will need to do some more work on laying out the graph to make it readable. Next, change size to Node Size, the screen will now fill with text. Go to the scaler and pull it back until there is something more or less readable. At this stage we may need to take a couple of actions. Where it is clear that our nodes are too close together we will need to run Expansion from the layout menu. As a general rule of thumb you should only need to do this twice at most… but it may depend on your graph. If you have very long labels such as Massachusetts Institute of Technology you will probably want to head over to the Observatory and edit the Node Label to something manageable such as MIT. This can make a big difference in cleaning up the labels. In the image below we have used Expansion twice and then manually resize the labels using the slider. You will now have something that looks more or less like this. Note that you can use the slider to the right in the bottom menu to adjust the sizes and you could of course adjust the font. In some cases you may be happy with a rough and ready network rather than the detailed adjustments that are required for a final network graph. Note the small camera icon on the left of the bottom menu. Either press that to take a screenshot or hold to bring up a configure menu that will allow you to choose a size. If you pursuing this option you may also want to adjust the font or the colour and to use the bottom menu to arrive at a result you are happy with for display. In some cases (as we will deal with below) manually moving the nodes will allow you to arrive at a cleaner network for a screenshot. Screenshots can be a very useful step in exploring data or sharing data internally. For publication quality graphics you will need to move over to using the Preview Options and engage in the gephi shuffle to progressively clean up the network for a publication quality graphic. 10.7 Using the Preview Options A more involved option for network visualisation is to move over to the Preview tab next to the Data Laboratory. The default option uses curved edges. To use this press Refresh. This is fine but we can’t see any labels. In the presets now try default curved. You can play around with the different settings until you find a version that you like. The main issue that we have here is that the labels are too large and the line weigths may also be very heavy. To address the line weigth look for and check the rescale weight option under edges. Note here the difference with the visualisation in the Overview. With Gephi what you see is not what you get. To arrive at a more readable network the first option is to adjust the size of the font in the Node Labels panel of the preview settings. Note here that label size is set to be proportional to the font (uncheck that and experiment if you wish). If we stick with proportional font size then we will start smaller and move upwards. For example, if we adjust the font size to 3 then the proportional font size will be reduced. In deciding on the font size an important consideration will be how many nodes you want to be legible to the reader. In this case setting the font size to 3 and this produces a pretty legible network. That is quite an acceptable graph for seeing the larger nodes. However, note that the labels of some of the nodes are overlapping some of the other nodes. This can produce a very cluttered look. The larger the base font size the more cluttered the graph will look and the more adjustment it is likely to need. To make adjustments to this network we will use size 3. We will now need to move back and forwards between the Preview and the Overview adjusting the position of the nodes. For very complex graphs it can help to print out the preview to see what you need to adjust. Another sensible way to proceed is to mentally divide the graph into quarters and proceed clockwise quarter by quarter adjusting the nodes as you go. It is a very good idea to save your work at this point and as you go along. In the first and second quarter moving clockwise things look good with no overlapping labels. However, some adjustments are needed in the third quarter in the middle of the network where Campanella and Kurs are overlapping. To make the adjustment move to the Overview tab, then select the small hand in the left vertical menu for grab. Locate Campanella and move it out of the way so it is not overlapping. Be gentle. Now go back to Preview and hit Refresh. When doing this quarter by quarter it can be helpful to zoom in in the Overview and in the Preview. For each of the overlapping nodes quarter by quarter make an adjustment periodically checking back by using Refresh in Preview and saving as you go along. Note that the aim is minor adjustments rather than major adjustments to node position (it is also possible to attempt to use Label Adjust in the Layout options but in practice this can distort the network). In the process it is also worth watching out for edges that intersect with nodes where there is no actual link. In those cases adjust the node position by trying to move it to the side of the unrelated edge. Note that this is often not possible with complex graphs and you will need to explain in the text that nodes may intersect with unrelated edges. Also check that any edits to labels do not contain mistakes (such as CATECH rather than CALTECH) and adjust accordingly. Typically long labels cause problems at this point and can be edited down in the Data Laboratory. Through a series of minor adjustments in a clockwise direction you should arrive at a final network graph. Expect to spend about 20 minutes on clean up when you are familiar with Gephi depending on the number of nodes. It is worth noting that you will often need to go back to make final adjustments. The basic principle here is that each node should have a readable label when you zoom in and that edges should not intersect with unrelated nodes (except if this is unavoidable). In this case we have taken a screen shot of the core of the network. It is quite common when you arrive at a publication quality graphic to suddenly discover a mistake in the network. For example, at the data cleaning stage you may have decided not to group two companies with very similar names. However, at the network visualization stage the network suggests that in practice the two companies are one and the same. In this case check the data and head over to the Data Laboratory to group the nodes to a single node. As this suggests, time spent on data cleaning and data preparation will normally reap dividends in terms of time saved later in the analysis and visualization process. 10.8 Exporting from Preview At this stage we will want to do a final check and then export the data. Arriving at a publication quality export can in fact be the most time consuming and troublesome aspect of using Gephi. Before going any further save your work. When exporting note that what you see on the screen and what you get are not exactly the same thing. The main issues are borders around nodes and the weight of lines in the edges. To adjust for this in the Nodes panel in Preview change the border width to a lower setting or 0 (the option we are choosing here). In the edges panel, if you do not want heavy lines then adjust the thickness or opacity (or both). In this case we have reduced the opacity of the edges to 50 and left the thickness as is. If you change something remember to hit Refresh. Next select the export button in the bottom left. We will export to .pdf. When you choose Export note that there is an Options menu for tighter control of the export. The defaults are sensible and we will use those. If you are tempted to adjust them note that Gephi does not remember your settings, even when saved, so write them down. In reality the defaults work very well. If all goes well you will end up with an image that looks like this. Because the default size is portrait you will want to crop the image. For publication you will also want to outline the text (to fix the font across system). This can be done with the free GIMP software or paid software such as Adobe Illustrator. Congratulations, you have now created your first Gephi network graph. 10.9 Resources Gephi website Gephi github repository Quick start guide Installation instructions for All platforms. Gephi 8 suffers from a known issue for Mac users. That is, it uses Java 6 which is not installed by default on Macs. To resolve this you should follow the instructions posted here and works very well in most cases. It basically involves downloading a mac version of Java containing Java 6 and then running three or four commands in the Terminal on the mac to configure Gephi. If that doesn’t work try this more detailed account. Excel/csv converter to network plugin For ideas on patent network visualisation you might want to try this article on synthetic biology, this article on species names in patent data, and the use of exploratory network analysis using IPC/CPC co-occurrence analysis in the WIPO Patent Landscape for Animal Genetic Resources. For more try this Google Search. "],
["patent-analytics-with-plotly.html", "Chapter 11 Patent Analytics with Plotly 11.1 Introduction 11.2 Getting Started with Plotly 11.3 Importing Files 11.4 Creating a graphic 11.5 Saving and Sharing 11.6 Working with Plotly in R 11.7 Round Up", " Chapter 11 Patent Analytics with Plotly 11.1 Introduction In this chapter we provide an introduction to the online graphing service Plotly to create graphics for use in patent analysis. Plotly is an online graphing service that allows you to import excel, text and other files for visualisation. It also has API services for R, Python, MATLAB and a Plotly Javascript Library. A recent update to the plotly package in R allows you to easily produce graphics directly in RStudio and to send the graphics to Plotly online for further editing and to share with others. Plotly’s great strength is that it produces attractive interactive graphics that can easily be shared with colleagues or made public. It also has a wide variety of graph types including contour and heat maps and is built with the very popular D3.js Javascript library for interactive graphics. For examples of graphics created with Plotly see the public gallery. Plotly was founded in 2012 and is therefore quite new, however, Plotly is becoming a great tool for creating and sharing graphics. In this chapter our aim is to get you started with using Plotly online with .csv or Excel files. In the second part of the chapter we will focus on using the plotly package in RStudio to generate and export graphs. 11.2 Getting Started with Plotly We need to start out by creating an account using the Create Account Button. Next we will see an invitation to take a tour (which is worth doing) and Plotly helpfully points out that we can load files from Google Drive or Dropbox. We then select the Workspace option to begin work. 11.3 Importing Files When you first arrive you will see a Workspace with a Grid (Plotly’s term for a table or worksheet). In the workspace you will see an Import Icon that provides a range of options for importing data. Don’t import anything yet! You can also copy data from a file and paste it into the Grid. At the time of writing, the reason not to use these options at the moment is that while the data may import fine first time, in other cases it will not. Using the options on this page you will receive no information if an import fails. We also encountered problems with saving data that had been pasted into the worksheet (even where it appeared to work). To avoid potential frustration head over to Organize. From the Organize page select the New button and then Upload. Now select your local file. When you upload the file a status message will display and if all goes well then you will see a completed message. If not a red message will display informing you that there has been a problem (how you fix these problems is unclear). For this experiment we used two datasets from the Open Source Patent Analytics Manual data repository. When using the Github repository click on the file of interest until you see a View Raw message. Then right click to download the data file from there. You can download them for your own use directly from the following links. WIPO trends application trends by year and with % change. Pizza patents by country and year. This is a simple dataset containing counts of patent documents containing the word pizza from WIPO Patentscope broken down by country and year. One important point to note is that Plotly is not a data processing tool. While there are some data tools, your data will generally need to be in a form that is suitable for plotting at the time of input. In part this reflects the use of APIs which allow for users of Python, R and Matlab to send their data to Plotly directly for sharing with others. This is one of the great strengths of Plotly and we will cover this below. However, we also experienced problems in loading and graphing datasets that were easy to work with in Tableau (as a benchmark). This suggests a need to invest time in understanding the formats that Plotly understands. We experienced a different type of problem with the simple WIPO trends data where Plotly concatenated the first row (containing labels) and the first data row into one heading row. However, in most cases import seemed to be fine. To turn a row into a heading row try right clicking the row with the headings and right clicking on use row as col headers. Then right click again to remove the original row. 11.4 Creating a graphic We will start with the simple WIPO trends data by opening up that Grid. Note here that in the Grid we have options to select the x or y axis for plotting. There is also an Options menu that we will come back to. The Type of plot can be changed by selecting the drop down menu as we can see below. Sticking with a line graph, when we create the plot we can add a title and then change the theme (in this case to Catherine). We could also add a fit line by selecting the FIT DATA menu icon. This will ask you to create a fit and then you have a range of preset functions or you can add your own. Here we have simply chosen the default Linear fit. We can then save the plot and use the export button to save the plot in a variety of formats and sizes. It is also very easy to add annotations using the Notes icon. Confusingly, the large blue Share button only seems to save the file and despite saving the plot we were not able to locate it again. While Plotly certainly looks nice, and appears to have attractive functions it is not intuitive and the difficulties involved in importing and sharing can be frustrating and time consuming. In short, time is needed to invest in and explore the potential of this tool. 11.4.1 Adding a Second Axis If we go back to our original WIPO trends data we have a percentage score for the year on year change in patent applications. We might want to show this on a plot with a second axis for the percentage. To do that in the Grid view select the button “choose as y” in the Growth-rate column to add a second item for the y axis. When we choose Line plot we will now see the two sets of data with the percentage trailing on the bottom. We now need to create a second y axis on the right and assign the percentage data to that. To do this select the Traces icon and a menu will pop up showing the data traces. The drop down menu under Traces will show Applications, so, select Growth Rate % from the drop down menu. Then where you see Lines/Markers select the dot. This will prevent the percentage scores displaying as a line. Next, in the same panel under Axes select New Axis/Subplot and a new screen will pop up. We have some choices here but will simply choose to create a new axis on the right. The result will look something like this. Our issue now is equalising the axes and changing the size of the points for the percentage scores. Finally we can add a title. Before we go any further let’s note that we have a significant minus axis value of -3.6% in 2009 when patent applications declined. There is also a minus value in 2002. If we wanted to retain these values we would probably want to turn off the second set of grid lines. We would also want to resize the points. To turn off the grid lines on the second y axis Click on the Axes icon in the main menu on the left. Then from the All Axes drop down under Axes select Y Axis 2. Then click the Lines submenu icon and turn Lines and Grid lines to OFF. Also turn the Zero line to OFF unless you want to retain it. To resize the points we need to go back to the Traces main menu on the left and select Growth Rate from the list of Traces. Then choose the Style tab and change the marker size to something larger such as 8. To finish off the graphic we will want to add some labels. We can simply type in the Axis labels and a title into the text boxes provided. By choosing the Legend icon we could turn the legend on or off. Note that while this graph could be seen as self explanatory it may not be for the reader. We can also simply drag the axes labels to a different position. It is possible that we would want to remove the negative values from the plot (in that case the values would need to be explained in the accompanying text). To do that select Axes, then Y Axis2 then in Autorange choose Non-negative to show only values greater than zero on the plot. If we wished we could also apply a fit line by choosing the Fit Data icon. We will choose Linear. Finally, to finish off the plot we might want to add annotations using the NOTES icon. Simply click on the plus sign in the pop up menu for a new annotation and then select the arrow and text and move it into the position you want. In this case we have added a couple of markers that may help to understand trends in activity. First, we have a dip in patent applications between 2001 and 2002. One possible explanation here is that this is a knock on effect of the collapse of the dot.com bubble where share prices reached a peak in 2000, declined rapidly and recovered before declining again into 2001. Patent data typically displays lag effects and it is reasonable to think that the decline in application activity from 2001 reflects these wider economic adjustments. Similarly, there is a significant dip in applications between 2008 and 2009 that it appears reasonable to assume reflects the knock on effects of the global economic crisis of 2007-2008. Note here that these are crude way markers to assist with interpreting the graphics. We could choose to add other timeline style events or layer graphics to help understand the potential or actual relationships between wider economic activity and trends in patent applications worldwide. 11.5 Saving and Sharing To save the plot we simply click Save. However, it is here that one of Plotly’s major strengths becomes apparent. As soon as we save the plot we can also invite others by email, we can create a public or private shareable link. For the collaborators, they must have a Plotly account already for this to work. The next option is to share a link. Note here that the default is to share a private link. To change that select the lock icon. The private link is particularly well suited for patent professionals. You could also grab an embed code to embed the plot in a web page Alternatively, surprise your friends and relatives by posting the plot on facebook or share with a wider audience on Twitter. In this example we have focused on developing a very simple plot using plotly. In practice there are a wide range of possible plotting options with a growing number of tutorials provided here. 11.6 Working with Plotly in R We are following the instructions for setting up Plotly in R. We will be using RStudio for this experiment. Download RStudio for your operating system here and make sure that you also install R at the same time from the link on the RStudio page here. For Python try these installation instructions to get started. In RStudio first we need to install the plotly package. We will also install some other helpful packages for working with data in R. Either select the Packages tab in RStudio and type plotly and install, or type the following in the console and press Enter. install.packages(&quot;plotly&quot;) # the main event install.packages(&quot;readr&quot;) # import csv files install.packages(&quot;dplyr&quot;) # wrangle data install.packages(&quot;tidyr&quot;) # tidy data Then load the libraries. library(plotly) library(readr) library(dplyr) library(tidyr) We now need to set our credentials for the API. When logged in to plotly follow this link to obtain your API key. Note also that you can obtain a streaming API token on the same page. Streaming will update a graphic from inside RStudio. When you have obtained your token use the following command to store your username and the API key in your environment. Sys.setenv(&quot;plotly_username&quot; = &quot;your_plotly_username&quot;) Sys.setenv(&quot;plotly_api_key&quot; = &quot;your_api_key&quot;) Next we will load a dataset of WIPO Patentscope data containing sample data on patent documents containing the word pizza organised by country and year (pcy = pizza, country, year). library(readr) pcy &lt;- read_csv(&quot;https://github.com/wipo-analytics/opensource-patent-analytics/raw/master/2_datasets/pizza_medium_clean/pcy.csv&quot;) Because patent data generally contains a data cliff for more recent years we will filter out recent years using filter() from the dplyr package by specifying a year that is less than or equal to 2012. To take out the long tail of limited historic data we will specify greater than or equal to 1990. library(dplyr) pcy &lt;- filter(pcy, pubyear &gt;= 1990, pubyear &lt;= 2012) %&gt;% print() ## # A tibble: 223 x 4 ## pubcountry pubcode pubyear n ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 Canada CA 1990 19 ## 2 Canada CA 1991 49 ## 3 Canada CA 1992 66 ## 4 Canada CA 1993 59 ## 5 Canada CA 1994 50 ## 6 Canada CA 1995 39 ## 7 Canada CA 1996 36 ## 8 Canada CA 1997 45 ## 9 Canada CA 1998 46 ## 10 Canada CA 1999 47 ## # ... with 213 more rows To create the plot in plotly we use the plot_ly() function. We will specify the dataset, the x and y axis and then the colour for the country data (known as a trace in plotly language). We will then add a title using the %&gt;% pipe operator for “this” then “that”. To specify the visual we want we specify the mode as “lines”&quot; (try “markers” for a scatter plot). library(plotly) s &lt;- plot_ly(pcy, x = pubyear, y = n, color = pubcountry, mode = &quot;lines&quot;) %&gt;% layout(title = &quot;Patenscope Pizza Patent Trends&quot;) s Our data has more entries than there are colours in the default color palette. Plotly will record a warning on the number of colours but we can now clearly see a plot. If we have entered our credentials for the API (above) we can also push the graph online along with the data for further editing or to share with others. library(plotly) plotly_POST(s) This will open a browser window and ask you to sign up or login before being taken to the graph. As this makes clear, it is easy to generate a plotly graph in R but we will want to dig into the plotly package in a little more detail. To change colours it is helpful to note that plotly installs and then calls the RColorBrewer package (it will display in the Packages list). To see the colour palettes we first tick RColorBrewer in Packages (or library(RColorBrewer)) to load it. To view the available palettes you could simply use View(brewer.pal.info) or the following chunk which arranges the data by the number of colours. library(RColorBrewer) library(dplyr) brewer.pal.info$names &lt;- row.names(brewer.pal.info) select(brewer.pal.info, 4:1) %&gt;% arrange(desc(maxcolors)) ## names colorblind category maxcolors ## 1 Paired TRUE qual 12 ## 2 Set3 FALSE qual 12 ## 3 BrBG TRUE div 11 ## 4 PiYG TRUE div 11 ## 5 PRGn TRUE div 11 ## 6 PuOr TRUE div 11 ## 7 RdBu TRUE div 11 ## 8 RdGy FALSE div 11 ## 9 RdYlBu TRUE div 11 ## 10 RdYlGn FALSE div 11 ## 11 Spectral FALSE div 11 ## 12 Pastel1 FALSE qual 9 ## 13 Set1 FALSE qual 9 ## 14 Blues TRUE seq 9 ## 15 BuGn TRUE seq 9 ## 16 BuPu TRUE seq 9 ## 17 GnBu TRUE seq 9 ## 18 Greens TRUE seq 9 ## 19 Greys TRUE seq 9 ## 20 Oranges TRUE seq 9 ## 21 OrRd TRUE seq 9 ## 22 PuBu TRUE seq 9 ## 23 PuBuGn TRUE seq 9 ## 24 PuRd TRUE seq 9 ## 25 Purples TRUE seq 9 ## 26 RdPu TRUE seq 9 ## 27 Reds TRUE seq 9 ## 28 YlGn TRUE seq 9 ## 29 YlGnBu TRUE seq 9 ## 30 YlOrBr TRUE seq 9 ## 31 YlOrRd TRUE seq 9 ## 32 Accent FALSE qual 8 ## 33 Dark2 TRUE qual 8 ## 34 Pastel2 FALSE qual 8 ## 35 Set2 TRUE qual 8 This indicates that the maximum number of colours in a palette is 12. Let’s try Paired for illustration. This has the advantage of being colour blind friendly. library(plotly) library(dplyr) s1 &lt;- plot_ly(pcy, x = pubyear, y = n, color = pubcountry, colors = &quot;Paired&quot;, mode = &quot;lines&quot;) %&gt;% layout(title = &quot;Pizza Patent trends&quot;) s1 As we can see this will then produce a plot with the color palette, plotly will show a warning that the base palette (“Set2”) has 8 colours but will then specify that it is displaying the palette that we requested. In practice we would want to break this plot into subplots for two reasons. First, the data and value ranges vary widely between countries and second, it is better to ensure that colours are distinct. To do this we need to run some calculations on the data. We will use functions from dplyr and tidyr to quickly tally the data grouping by the publication code. Then we will add the data to discreet groups based on the scores using mutate() (to add a variable) and ntile() to divide the countries into groups based on the number of records (n) and add this to the new variable called group. Finally, we arrange the data in descending order based on the number of records. library(dplyr) library(tidyr) total &lt;- tally(group_by(pcy, pubcode)) %&gt;% mutate(group = ntile(nn, 3)) %&gt;% rename(records = nn) %&gt;% arrange(desc(records)) total ## # A tibble: 16 x 3 ## pubcode records group ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 US 3835 3 ## 2 WO 1366 3 ## 3 CA 1186 3 ## 4 EP 1074 3 ## 5 KR 307 3 ## 6 JP 205 2 ## 7 DE 83 2 ## 8 ZA 66 2 ## 9 CN 60 2 ## 10 IL 29 2 ## 11 MX 23 1 ## 12 RU 10 1 ## 13 PT 9 1 ## 14 EA 4 1 ## 15 ES 3 1 ## 16 SG 2 1 When we view total we now see that countries have been divided into 3 groups based on their number of records. Groups 1 and 2 are unlikely to provide a meaningful graph and group 1 in particular could be dropped. However, we could usefully display this information as a bar chart using plot_ly and selecting type = &quot;bar&quot;. library(plotly) library(dplyr) total_bar &lt;- plot_ly(total, x = pubcode , y = records, type = &quot;bar&quot;) total_bar Having divided our data into three groups it would now be useful to plot them separately. Here we face the problem that our original data in pcy displays values by year while total displays the total number of records and group. We need first to add the group identifiers to the pcy table. To do that we will modify total to drop the count of records in records using the dplyr select() function. Then we will use left_join() to join the total and total_group tables together. Note that the function will use the shared field “pubcode” for joining. library(dplyr) total_group &lt;- select(total, pubcode, group) total_group ## # A tibble: 16 x 2 ## pubcode group ## &lt;chr&gt; &lt;int&gt; ## 1 US 3 ## 2 WO 3 ## 3 CA 3 ## 4 EP 3 ## 5 KR 3 ## 6 JP 2 ## 7 DE 2 ## 8 ZA 2 ## 9 CN 2 ## 10 IL 2 ## 11 MX 1 ## 12 RU 1 ## 13 PT 1 ## 14 EA 1 ## 15 ES 1 ## 16 SG 1 Then we join the two tables and rename n to records for graphing. library(dplyr) total_grouped &lt;- left_join(pcy, total_group) %&gt;% rename(records = n) ## Joining, by = &quot;pubcode&quot; total_grouped ## # A tibble: 223 x 5 ## pubcountry pubcode pubyear records group ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 Canada CA 1990 19 3 ## 2 Canada CA 1991 49 3 ## 3 Canada CA 1992 66 3 ## 4 Canada CA 1993 59 3 ## 5 Canada CA 1994 50 3 ## 6 Canada CA 1995 39 3 ## 7 Canada CA 1996 36 3 ## 8 Canada CA 1997 45 3 ## 9 Canada CA 1998 46 3 ## 10 Canada CA 1999 47 3 ## # ... with 213 more rows The next step is to generate a set of three plots corresponding with our three groups. We will call them pizza3, pizza2 and pizza1 and use the full publication country name in pubcountry as the colour for the lines. library(plotly) library(dplyr) pizza3 &lt;- filter(total_grouped, group == 3) %&gt;% plot_ly(x = pubyear, y = records, color = pubcountry, type = &quot;lines&quot;, mode = &quot;lines&quot;) pizza2 &lt;- filter(total_grouped, group == 2) %&gt;% plot_ly(x = pubyear, y = records, color = pubcountry, type = &quot;lines&quot;, mode = &quot;lines&quot;) pizza1 &lt;- filter(total_grouped, group == 1) %&gt;% plot_ly(x = pubyear, y = records, color = pubcountry, type = &quot;lines&quot;, markers = &quot;lines&quot;) We now have a total of four draft plots, total_bar and pizza 3 to 1 for our groups. Plotly will allow us to display plots side by side. Note that this can create quite a crunched display in RStudio and is best viewed by selecting the small show in new window button in the RStudio Viewer. library(plotly) sub &lt;- subplot(total_bar, pizza3, pizza2, pizza1) sub plotly_POST(sub) You will now see an image that looks a lot like this. The figure reveals no coherent trend for the countries in Group 1 on the right and it makes sense to drop this data. Group 2 is potentially more interesting but the low overall numbers and the spikes for data for Japan suggests very low activity and a lack of complete data. Furthermore, ideally we would want to allocate different colours to the different names in our trends panels (probably by allocating different palettes) which could take considerable time relative to the gains in terms of displaying low frequency data. We will let the bar chart do that work and finish with a simple two plot graphic to send to plotly online. library(plotly) sub1 &lt;- subplot(total_bar, pizza3) plotly_POST(sub1) It is then easy to edit the labels and make final adjustments online. We can also share the graph via social media, download the data, or edit the graph. Note that the default setting for a graph sent via the API appears to be public (with no obvious way to change that). It is here that Plotly’s potential importance as a tool for sharing data and graphics becomes apparent. It is a powerful tool. Recent updates to the R package and the introduction of dashboards demonstrates ongoing improvements to this new service. 11.7 Round Up In this chapter we have provided a brief introduction to Plotly to help you get started with using this tool for patent analytics. Plotly provides visually appealing and interactive graphics that can readily be shared with colleagues, pasted into websites and shared publicly. The availability of APIs is also a key feature of Plotly for those working in Python, R or other programmatic environments. However, Plotly can also be confusing. For example, we found it hard to understand why particular datasets would not upload correctly (when they can easily be read in Tableau). We also found it hard to understand the format that the data needed to be in to plot correctly. So, Plotly can be somewhat frustrating although it has very considerable potential for sharing appealing graphics. The recent addition of dashboards is also a promising development. Finally, for R users, the plotly package now closely integrates with the very popular ggplot2 package through the ggplotly() function which allows for the creation of interactive ggplot2 graphics. In this chapter we have only touched on the potential of Plotly as a powerful free tool for creating interactive graphics. Other kinds of plots that are well worth exploring include Bubble maps, contour maps and heat maps. To experiment for yourself try the Plotly tutorials. "],
["patent-infographics-with-r.html", "Chapter 12 Patent Infographics with R 12.1 Getting Started 12.2 Load a .csv file using readr 12.3 Viewing Data 12.4 Identifying Types of Object 12.5 Working with Data 12.6 Simplify code with pipes %&gt;% 12.7 Harmonising data 12.8 Country Trends using spread() 12.9 Tidying data - Separating and Gathering 12.10 Selecting applicants using filter() 12.11 Generating IPC Tables 12.12 Creating an infographic in infogr.am", " Chapter 12 Patent Infographics with R In this chapter we will use RStudio to prepare patent data for visualisation in an infographic using online software tools. Infographics are a popular way of presenting data in a way that is easy for a reader to understand without reading a long report. Infographics are well suited to presenting summaries of data with simple messages about key findings. A good infographic can encourage the audience to read a detailed report and is a tool for engagement with audiences during presentations of the findings of patent research. Some patent offices have already been creating infographics as part of their reports to policy makers and other clients. The Instituto Nacional de Propiedade Industrial (INPI) in Brazil produces regular two page Technology Radar (Radar Tecnologico) consisting of charts and maps that briefly summarise more detailed research on subjects such as Nanotechnology in Waste Management. WIPO Patent Landscape Reports, which go into depth on patent activity for a particular area, are accompanied by one page infographics that have proved very popular such as the infographic accompanying a recent report on assistive devices. A growing number of companies are offering online infographic software services such as infogr.am,easel.ly piktochart.com, canva.com or venngage.com to mention only a selection of the offerings out there. The Cool Infographics website provides a useful overview of available tools. One feature of many of these services is that they are based on a freemium model. Creating graphics is free but the ability to export files and the available formats for export of your masterpiece (e.g. high resolution or .pdf) often depend on upgrading to a monthly account at varying prices. In this chapter we test drive infogr.am as a chart friendly service, albeit with export options that depend on a paid account. This chapter is divided into two sections. In part 1 we focus on using RStudio to prepare patent data for visualisation in infographics software using the dplyr, tidyr and stringr packages. This involves dealing with common problems with patent data such as concatenated fields, white space and creating counts of data fields. In part 2 we produce an infographic from the data using infogr.am. 12.1 Getting Started To start with we need to ensure that RStudio and R for your operating system are installed by following the instructions on the RStudio website here. Do not forget to follow the link to also install R for your operating system. When working in RStudio it is good practice to work with projects. This will keep all of the files for a project in the same folder. To create a project go to File, New Project and create a project. Call the project something like infographic. Any file you create and save for the project will now be listed under the Files tab in RStudio. R works using packages (libraries) and there are around 7,490 of them for a whole range of purposes. We will use just a few of them. To install a package we use the following. Copy and paste the code into the Console and press enter. install.packages(&quot;tidyverse&quot;) # the group of packages you will need Packages can also be installed by selecting the Packages tab and typing the name of the package. To load the packages (libraries) use the following or check the tick box in the Packages pane. library(readr) library(dplyr) library(tidyr) library(stringr) library(ggplot2) We are now ready to go. 12.2 Load a .csv file using readr We will work with the pizza_medium_clean dataset in the online Github Manual repository. If manually downloading a file remember to click on the file name and select Raw to download the actual file. We can use the easy to use read_csv() function from the readr package to quickly read in our pizza data directly from the Github repository. Note the raw at the beginning of the filename. library(readr) pizza &lt;- read_csv(&quot;https://github.com/wipo-analytics/opensource-patent-analytics/blob/master/2_datasets/pizza_medium_clean/pizza.csv?raw=true&quot;) readr will display a warning for the file arising from its efforts to parse publication dates on import. We will ignore this as we will not be using this field. As an alternative to importing directly from Github download the file and in RStudio use File &gt; Import Dataset &gt; From .csv. If you experience problems with direct import of a file the File &gt; Import Dataset approach will give you a range of easy to use controls for figuring this out (e.g. where .csv is actually a tab separated file). 12.3 Viewing Data We can view data in a variety of ways. In the console: pizza ## # A tibble: 9,996 × 31 ## applicants_cleaned ## &lt;chr&gt; ## 1 &lt;NA&gt; ## 2 Ventimeglia Jamie Joseph; Ventimeglia Joel Michael; Ventimeglia Thomas Jose ## 3 Cordova Robert; Martinez Eduardo ## 4 Lazarillo De Tormes S L ## 5 &lt;NA&gt; ## 6 Depoortere, Thomas ## 7 Frisco Findus Ag ## 8 Bicycle Tools Incorporated ## 9 Castiglioni, Carlo ## 10 &lt;NA&gt; ## # ... with 9,986 more rows, and 30 more variables: ## # applicants_cleaned_type &lt;chr&gt;, applicants_organisations &lt;chr&gt;, ## # applicants_original &lt;chr&gt;, inventors_cleaned &lt;chr&gt;, ## # inventors_original &lt;chr&gt;, ipc_class &lt;chr&gt;, ipc_codes &lt;chr&gt;, ## # ipc_names &lt;chr&gt;, ipc_original &lt;chr&gt;, ipc_subclass_codes &lt;chr&gt;, ## # ipc_subclass_detail &lt;chr&gt;, ipc_subclass_names &lt;chr&gt;, ## # priority_country_code &lt;chr&gt;, priority_country_code_names &lt;chr&gt;, ## # priority_data_original &lt;chr&gt;, priority_date &lt;chr&gt;, ## # publication_country_code &lt;chr&gt;, publication_country_name &lt;chr&gt;, ## # publication_date &lt;chr&gt;, publication_date_original &lt;chr&gt;, ## # publication_day &lt;int&gt;, publication_month &lt;int&gt;, ## # publication_number &lt;chr&gt;, publication_number_espacenet_links &lt;chr&gt;, ## # publication_year &lt;int&gt;, title_cleaned &lt;chr&gt;, title_nlp_cleaned &lt;chr&gt;, ## # title_nlp_multiword_phrases &lt;chr&gt;, title_nlp_raw &lt;chr&gt;, ## # title_original &lt;chr&gt; In Environment click on the blue arrow to see in the environment. Keep clicking to open a new window with the data. Use the View() command (for data.frames and tables) View(pizza) If possible use the View() command or environment. The difficulty with the console is that large amounts of data will simply stream past. 12.4 Identifying Types of Object We often want to know what type of object we are working with and more details about the object so we know what to do later. Here are some of the most common commands for obtaining information about objects. class(pizza) ## type of object names(pizza) ## names of variables str(pizza) ## structure of object dim(pizza) ## dimensions of the object The most useful command in this list is str() because this allows us to access the structure of the object and see its type. str(pizza, max.level = 1) str() is particularly useful because we can see the names of the fields (vectors) and their type. Most patent data is a character vector with dates forming integers. 12.5 Working with Data We will often want to select aspects of our data to focus on a specific set of columns or to create a graph. We might also want to add information, notably numeric counts. The dplyr package provides a set of very handy functions for selecting, adding and counting data. The tidyr and stringr packages are sister packages that contain a range of other useful functions for working with our data. We have covered some of these in other chapters on graphing using R but will go through them quickly and then pull them together into a function that we can use across our dataset. 12.5.1 Select In this case we will start by using the select() function to limit the data to specific columns. We can do this using their names or their numeric position (best for large number of columns e.g. 1:31). In dplyr, unlike most R packages, existing character columns do not require &quot;&quot;. library(dplyr) pizza_number &lt;- select(pizza, publication_number, publication_year) We now have a new data.frame that contains two columns. One with the year and one with the publication number. Note that we have created a new object called pizza_number using &lt;- and that after select() we have named our original data and the columns we want. A fundamental feature of select is that it will drop columns that we do not name. So it is best to create a new object using &lt;- if you want to keep your original data for later work. 12.5.2 Adding data with mutate() mutate() is a dplyr function that allows us to add data based on existing data in our data frame, for example to perform a calculation. In the case of patent data we normally lack a numeric field to use for counts. We can however assign a value to our publication field by using sum() and the number 1 as follows. library(dplyr) pizza_number &lt;- mutate(pizza_number, n = sum(publication_number = 1)) When we view pizza_number we now have a value of 1 in the column n for each publication number. Note that in patent data a priority, application, publication or family number may occur multiple times and we would want to reduce the dataset to distinct records. For that we would use n_distinct(pizza_number$publication_number) from dplyr or unique(pizza_number$publication_number) from base R. Because the publication numbers are unique we can proceed. 12.5.3 Counting data using count() At the moment, we have multiple instances of the same year (where a patent publication occurs in that year). We now want to calculate how many of our documents were published in each year. To do that we will use the dplyr function count(). We will use the publication_year and add wt = (for weight) with n as the value to count. library(dplyr) pizza_total &lt;- count(pizza_number, publication_year, wt = n) pizza_total ## # A tibble: 58 × 2 ## publication_year nn ## &lt;int&gt; &lt;dbl&gt; ## 1 1940 1 ## 2 1954 1 ## 3 1956 1 ## 4 1957 1 ## 5 1959 1 ## 6 1962 1 ## 7 1964 2 ## 8 1966 1 ## 9 1967 1 ## 10 1968 8 ## # ... with 48 more rows When we now examine pizza_total, we will see the publication year and a summed value for the records in that year. This raises the question of how we know that R has calculated the count correctly. We already know that there are 9996 records in the pizza dataset. To check our count is correct we can simply use sum and select the column we want to sum using $. library(dplyr) sum(pizza_total$nn) ## [1] 9996 So, all is good and we can move on. The $ sign is one of the main ways of subsetting to tell R that we want to work with a specific column (the others are “[” and “[[”). 12.5.4 Rename a field with rename() Next we will use rename() from dplyr to rename the fields. Note that understanding which field require quote marks can take some effort. In this case renaming the character vector publication_year as “pubyear” requires quotes while renaming the numeric vector “n” does not. library(dplyr) pizza_total &lt;- rename(pizza_total, pubyear = publication_year, publications = nn) %&gt;% print() ## # A tibble: 58 × 2 ## pubyear publications ## &lt;int&gt; &lt;dbl&gt; ## 1 1940 1 ## 2 1954 1 ## 3 1956 1 ## 4 1957 1 ## 5 1959 1 ## 6 1962 1 ## 7 1964 2 ## 8 1966 1 ## 9 1967 1 ## 10 1968 8 ## # ... with 48 more rows 12.5.5 Make a quickplot with qplot() Using the qplot() function in ggplot2 we can now draw a quick line graph. Note that qplot() is unusual in R because the data (pizza_total) appears after the coordinates. We will specify that we want a line using geom = (if geom is left out it will be a scatter plot). This will give us an idea of what our plot might look like in our infographic and actions we might want to take on the data. library(ggplot2) qplot(x = pubyear, y = publications, data = pizza_total, geom = &quot;line&quot;) The plot reveals a data cliff in recent years. This normally reflects a lack of data for the last 2-3 years as recent documents feed through the system en route to publication. It is a good idea to remove the data cliff by cutting the data 2-3 years prior to the present. In some cases two years is sufficient, but 3 years is a good rule of thumb. We also have long tail of data with limited data from 1940 until the late 1970s. Depending on our purposes with the analysis we might want to keep this data (for historical analysis) or to focus in on a more recent period. We will limit our data to specific values using the dplyr function filter(). 12.5.6 Filter data using filter() In contrast with select() which works with columns, filter() in dplyr works with rows. In this case we need to filter on the values in the pubyear column. To remove the data prior to 1990 we will use the greater than or equal to operator &gt;= on the pubyear column and we will use the less than or equal to &lt;= operator on the values after 2012. One strength of filter() in dplyr is that it is easy to filter on multiple values in the same expression (unlike the very similar filter function in base R). The use of filter() will also remove the 30 records where the year is recorded as NA (Not Available). We will write this file to disk using the simple write_csv() from readr. To use write_csv() we first name our data (pizza_total) and then provide a file name with a .csv extension. In this case and other examples below we have used a descriptive file name bearing in mind that Windows systems have limitations on the length and type of characters that can be used in file names. library(dplyr) library(readr) pizza_total &lt;- filter(pizza_total, pubyear &gt;= 1990, pubyear &lt;= 2012) write_csv(pizza_total, &quot;pizza_total_1990_2012.csv&quot;) pizza_total ## # A tibble: 23 × 2 ## pubyear publications ## &lt;int&gt; &lt;dbl&gt; ## 1 1990 139 ## 2 1991 154 ## 3 1992 212 ## 4 1993 201 ## 5 1994 162 ## 6 1995 173 ## 7 1996 180 ## 8 1997 186 ## 9 1998 212 ## 10 1999 290 ## # ... with 13 more rows When we print pizza_total to the console we will see that the data now covers the period 1990-2012. When using filter() on values in this way it is important to remember to apply this filter to any subsequent operations on the data (such as applicants) so that it matches the same data period. To see our .csv file we can head over to the Files tab and, assuming that we have created a project, the file will now appear in the list of project files. Clicking on the file name will display the raw unformatted data in RStudio. 12.6 Simplify code with pipes %&gt;% So far we have handled the code one line at a time. But, one of the great strengths of using a programming language is that we can run multiple lines of code together. There are two basic ways that we can do this. We will create a new temporary object df to demonstrate this. The standard way library(dplyr) library(ggplot2) df &lt;- select(pizza, publication_number, publication_year) df &lt;- mutate(df, n = sum(publication_number = 1)) df &lt;- count(df, publication_year, wt = n) df &lt;- rename(df, pubyear = publication_year, publications = nn) df &lt;- filter(df, pubyear &gt;= 1990, pubyear &lt;= 2012) qplot(x = pubyear, y = publications, data = df, geom = &quot;line&quot;) The code we have just created is six lines long. If we select all of this code and run it in one go it will produce our graph. One feature of this code is that each time we run a function on the object total we name it at the start of each function (e.g. mutate(df…)) and then we overwrite the object. We can save quite a lot of typing and reduce the complexity of the code using the pipe operator introduced by the the magrittr package and then adopted in Hadley Wickham’s data wrangling and tidying packages. Using pipes %&gt;% Pipes are now a very popular way of writing R code because they simplify writing R code and speed it up. The most popular pipe is %&gt;% which means “this” then “that”. In this case we are going to create a new temporary object df1 by first applying select to pizza, then mutate, count, rename and filter. Note that we only name our dataset once (in select()) and we do not need to keep overwriting the object. library(dplyr) library(ggplot2) df1 &lt;- select(pizza, publication_number, publication_year) %&gt;% mutate(n = sum(publication_number = 1)) %&gt;% count(publication_year, wt = n) %&gt;% rename(pubyear = publication_year, publications = nn) %&gt;% filter(pubyear &gt;= 1990, pubyear &lt;= 2012) %&gt;% qplot(x = pubyear, y = publications, data = ., geom = &quot;line&quot;) %&gt;% print() In the standard code we typed df nine times to arrive at the same result. Using pipes we typed df1 once. Of greater importance is that the use of pipes simplifies the structure of R code by introducing a basic “this” then “that” logic which makes it easier to understand. One point to note about this code is that qplot() requires us to name our data (in this case df1). However, df1 is actually the final output of the code and does not exist as an input object before the final line is run. So, if we attempt to use data = df1 in qplot() we will receive an error message. The way around this is to use . in place of our data object. That way qplot() will know we want to graph the outputs of the earlier code. Finally, we need to add an explicit call to print() to display the graph (without this the code will work but we will not see the graph). If we now inspect the structure of the df1 object (using str(df1)) in the console, it will be a list. The reason for this is that it is an object with mixed components, including a data.frame with our data plus additional data setting out the contents of the plot. As there is no direct link between R and our infographics software this will create problems for us later because the infographics software won’t know how to interpret the list object. So, it is generally a good idea to use a straight data.frame by excluding the call to qplot and adding it later when needed as follows. library(dplyr) library(ggplot2) df2 &lt;- select(pizza, publication_number, publication_year) %&gt;% mutate(n = sum(publication_number = 1)) %&gt;% count(publication_year, wt = n) %&gt;% rename(pubyear = publication_year, publications = nn) %&gt;% filter(pubyear &gt;= 1990, pubyear &lt;= 2012) %&gt;% print() ## # A tibble: 23 × 2 ## pubyear publications ## &lt;int&gt; &lt;dbl&gt; ## 1 1990 139 ## 2 1991 154 ## 3 1992 212 ## 4 1993 201 ## 5 1994 162 ## 6 1995 173 ## 7 1996 180 ## 8 1997 186 ## 9 1998 212 ## 10 1999 290 ## # ... with 13 more rows Note that in this case the only change is that we need to explicitly include the reference to the df2 data frame as the data argument in the call to qplot(). library(ggplot2) qplot(x = pubyear, y = publications, data = df2, geom = &quot;line&quot;) 12.7 Harmonising data One challenge with creating multiple tables from a baseline dataset is keeping track of subdatasets. At the moment we have two basic objects we will be working with: pizza - our raw dataset pizza_total - created via pizza_number limited to 1990_2012. In the remainder of the chapter we will want to create some additional datasets from our pizza dataset. These are: Country trends Applicants International Patent Classification (IPC) Class Phrases Google Google IPC Google phrases We need to make sure that any data that we generate from our raw dataset matches the period for the pizza_total dataset. If we do not do this there is a risk that we will generate subdatasets with counts for the raw pizza dataset. To handle this we will use filter() to create a new baseline dataset with an unambiguous name. library(dplyr) pizza_1990_2012 &lt;- rename(pizza, pubyear = publication_year) %&gt;% filter(pubyear &gt;= 1990, pubyear &lt;= 2012) pizza_1990_2012 ## # A tibble: 8,262 × 31 ## applicants_cleaned applicants_cleaned_type ## &lt;chr&gt; &lt;chr&gt; ## 1 &lt;NA&gt; People ## 2 Lazarillo De Tormes S L Corporate ## 3 &lt;NA&gt; People ## 4 Depoortere, Thomas People ## 5 Frisco Findus Ag Corporate ## 6 Bicycle Tools Incorporated Corporate ## 7 Castiglioni, Carlo People ## 8 &lt;NA&gt; People ## 9 Bujalski, Wlodzimierz People ## 10 Ehrno Flexible A/S; Stergaard, Ole Corporate; People ## # ... with 8,252 more rows, and 29 more variables: ## # applicants_organisations &lt;chr&gt;, applicants_original &lt;chr&gt;, ## # inventors_cleaned &lt;chr&gt;, inventors_original &lt;chr&gt;, ipc_class &lt;chr&gt;, ## # ipc_codes &lt;chr&gt;, ipc_names &lt;chr&gt;, ipc_original &lt;chr&gt;, ## # ipc_subclass_codes &lt;chr&gt;, ipc_subclass_detail &lt;chr&gt;, ## # ipc_subclass_names &lt;chr&gt;, priority_country_code &lt;chr&gt;, ## # priority_country_code_names &lt;chr&gt;, priority_data_original &lt;chr&gt;, ## # priority_date &lt;chr&gt;, publication_country_code &lt;chr&gt;, ## # publication_country_name &lt;chr&gt;, publication_date &lt;chr&gt;, ## # publication_date_original &lt;chr&gt;, publication_day &lt;int&gt;, ## # publication_month &lt;int&gt;, publication_number &lt;chr&gt;, ## # publication_number_espacenet_links &lt;chr&gt;, pubyear &lt;int&gt;, ## # title_cleaned &lt;chr&gt;, title_nlp_cleaned &lt;chr&gt;, ## # title_nlp_multiword_phrases &lt;chr&gt;, title_nlp_raw &lt;chr&gt;, ## # title_original &lt;chr&gt; In this case we start with a call to rename() to make this consistent with our pizza_total table and then use a pipe to filter the data on the year. Note here that when filtering raw data on a set of values it is important to inspect it first to check that the field is clean (e.g. not concatenated). If for some reason your data is concatenated (which happens quite a lot with patent data) then lookup ?tidyr::separate_rows. We are now in a position to create our country trends table. 12.8 Country Trends using spread() There are two basic data formats: long and wide. Our pizza dataset is in long format because each column is a variable (e.g. publication_country) and each row in publication_country contains a country name. This is the most common and useful data format. However, in some cases, such as infogr.am our visualisation software will expect the data to be in wide format. In this case each country name would become a variable (column name) with the years forming the rows and the number of records per year the observations. The key to this is the tidyr() function spread(). As above we will start off by using select() to create a table with the fields that we want. We will then use mutate() to add a numeric field and then count up that data. To illustrate the process run this code (we will not create an object). library(dplyr) select(pizza_1990_2012, publication_country_name, publication_number, pubyear) %&gt;% mutate(n = sum(publication_number = 1)) %&gt;% count(publication_country_name, pubyear, wt = n) %&gt;% print() ## Source: local data frame [223 x 3] ## Groups: publication_country_name [?] ## ## publication_country_name pubyear nn ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Canada 1990 19 ## 2 Canada 1991 49 ## 3 Canada 1992 66 ## 4 Canada 1993 59 ## 5 Canada 1994 50 ## 6 Canada 1995 39 ## 7 Canada 1996 36 ## 8 Canada 1997 45 ## 9 Canada 1998 46 ## 10 Canada 1999 47 ## # ... with 213 more rows When we run this code we will see the results in long format. We now want to take our publication_country_name column and spread it to form columns with nn as the values. In using spread note that it takes a data argument (pizza_1990_2012), a key (publication_country_name), and value column (nn) (created from count()). We are using pipes so the data only needs to be named in the first line. For additional arguments see ?spread(). library(dplyr) library(tidyr) country_totals &lt;- select(pizza_1990_2012, publication_country_name, publication_number, pubyear) %&gt;% mutate(n = sum(publication_number = 1)) %&gt;% count(publication_country_name, pubyear, wt = n) %&gt;% # note n spread(publication_country_name, nn) # note double nn country_totals ## # A tibble: 23 × 17 ## pubyear Canada China `Eurasian Patent Organization` ## * &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1990 19 NA NA ## 2 1991 49 NA NA ## 3 1992 66 NA NA ## 4 1993 59 NA NA ## 5 1994 50 NA NA ## 6 1995 39 NA NA ## 7 1996 36 1 NA ## 8 1997 45 NA NA ## 9 1998 46 NA NA ## 10 1999 47 2 2 ## # ... with 13 more rows, and 13 more variables: `European Patent ## # Office` &lt;dbl&gt;, Germany &lt;dbl&gt;, Israel &lt;dbl&gt;, Japan &lt;dbl&gt;, `Korea, ## # Republic of` &lt;dbl&gt;, Mexico &lt;dbl&gt;, `Patent Co-operation Treaty` &lt;dbl&gt;, ## # Portugal &lt;dbl&gt;, `Russian Federation` &lt;dbl&gt;, Singapore &lt;dbl&gt;, `South ## # Africa` &lt;dbl&gt;, Spain &lt;dbl&gt;, `United States of America` &lt;dbl&gt; We now have data in wide format. In some cases, such as infogr.am, visualisation software may expect the country names to be the name of rows and the column names to be years . We can modify our call to spread() by replacing the publication_country_name with pubyear. Then we will write the data to disk for use in our infographic. library(dplyr) library(readr) country_totals &lt;- select(pizza_1990_2012, publication_country_name, publication_number, pubyear) %&gt;% mutate(n = sum(publication_number = 1)) %&gt;% count(publication_country_name, pubyear, wt = n) %&gt;% # note n spread(pubyear, nn) # note nn country_totals ## Source: local data frame [16 x 24] ## Groups: publication_country_name [16] ## ## publication_country_name `1990` `1991` `1992` `1993` `1994` `1995` ## * &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Canada 19 49 66 59 50 39 ## 2 China NA NA NA NA NA NA ## 3 Eurasian Patent Organization NA NA NA NA NA NA ## 4 European Patent Office 22 29 36 29 26 29 ## 5 Germany 2 2 2 2 5 2 ## 6 Israel NA NA 1 NA NA 1 ## 7 Japan NA NA NA NA NA NA ## 8 Korea, Republic of NA NA NA 1 NA NA ## 9 Mexico NA NA NA NA NA NA ## 10 Patent Co-operation Treaty 8 13 31 16 20 22 ## 11 Portugal NA NA NA NA NA NA ## 12 Russian Federation NA NA NA NA NA NA ## 13 Singapore NA NA NA NA NA NA ## 14 South Africa 2 3 3 3 3 1 ## 15 Spain NA NA NA NA NA NA ## 16 United States of America 86 58 73 91 58 79 ## # ... with 17 more variables: `1996` &lt;dbl&gt;, `1997` &lt;dbl&gt;, `1998` &lt;dbl&gt;, ## # `1999` &lt;dbl&gt;, `2000` &lt;dbl&gt;, `2001` &lt;dbl&gt;, `2002` &lt;dbl&gt;, `2003` &lt;dbl&gt;, ## # `2004` &lt;dbl&gt;, `2005` &lt;dbl&gt;, `2006` &lt;dbl&gt;, `2007` &lt;dbl&gt;, `2008` &lt;dbl&gt;, ## # `2009` &lt;dbl&gt;, `2010` &lt;dbl&gt;, `2011` &lt;dbl&gt;, `2012` &lt;dbl&gt; write_csv(country_totals, &quot;pizza_country_1990_2012.csv&quot;) To restore the data to long format we would need to use gather() as the counterpart to spread(). gather() takes a dataset, a key for the name of the column we want to gather the countries into, a value for the numeric count (in this case n), and finally the positions of the columns to gather in. Note here that we need to look up the column positions in country_totals (e.g. using View()) or count the columns using ncol(country_totals). library(dplyr) gather(country_totals, year, n, 2:24) %&gt;% print() ## Source: local data frame [368 x 3] ## Groups: publication_country_name [16] ## ## publication_country_name year n ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Canada 1990 19 ## 2 China 1990 NA ## 3 Eurasian Patent Organization 1990 NA ## 4 European Patent Office 1990 22 ## 5 Germany 1990 2 ## 6 Israel 1990 NA ## 7 Japan 1990 NA ## 8 Korea, Republic of 1990 NA ## 9 Mexico 1990 NA ## 10 Patent Co-operation Treaty 1990 8 ## # ... with 358 more rows The combination of spread and gather work really well to prepare data in formats that are expected by other software. However, one of the main issues we encounter with patent data is that our data is not tidy because various fields are concatenated. 12.9 Tidying data - Separating and Gathering In patent data we often see concatenated fields with a separator (normally a ;). These are typically applicant names, inventor names, International Patent Classification (IPC) codes, or document numbers (priority numbers, family numbers). We need to tidy this data prior to data cleaning (such as cleaning names) or to prepare for analysis and visualisation. For more on the concept of tidy data read Hadley Wickham’s Tidy Data article. The new R for Data Science book by Garrett Grolemund and Hadley Wickham (see Chapter 12) is also strongly recommended. To tidy patent data we will typically need to do two things. Separate the data so that each cell contains a unique data point (e.g. a name, code or publication number). This normally involves separating data into columns. Gathering the data back in. This involves transforming the data in the columns we have created into rows. Separating data into columns is very easy in tools such as Excel. However, gathering the data back into separate rows is remarkably difficult. Happily, this is very easy to do in R with the tidyr package. The tidyr package contains three functions that are very useful when working with patent data. When dealing with concatenated fields in columns the key function is separate_rows. Here we will work with the applicants_cleaned field in the pizza dataset. This field contains concatenated names with a ; as the separator. For example, on lines 1_9 there are single applicant names or NA values. However, on lines 10 and line 59 we see: Ehrno Flexible A/S; Stergaard, Ole Farrell Brian; Mcnulty John; Vishoot Lisa The problem here is that when we are dealing with thousands of lines of applicant names we don’t know how many names might be concatenated into each cell as a basis for separating the data into columns. Once we had split the columns (for example using Text to Columns in Excel) we would then need to work out how to gather the columns into rows. The separate_rows() function from tidyr makes light work of this problem. To use the function we name the dataset, the column we want to separate into rows and the separator (sep). library(dplyr) library(tidyr) pizza1 &lt;- separate_rows(pizza_1990_2012, applicants_cleaned, sep = &quot;;&quot;) pizza1 ## # A tibble: 12,729 × 31 ## applicants_cleaned_type applicants_organisations ## &lt;chr&gt; &lt;chr&gt; ## 1 People &lt;NA&gt; ## 2 Corporate Lazarillo De Tormes S L ## 3 People &lt;NA&gt; ## 4 People &lt;NA&gt; ## 5 Corporate Frisco Findus Ag ## 6 Corporate Bicycle Tools Incorporated ## 7 People &lt;NA&gt; ## 8 People &lt;NA&gt; ## 9 People &lt;NA&gt; ## 10 Corporate; People Ehrno Flexible A/S ## # ... with 12,719 more rows, and 29 more variables: ## # applicants_original &lt;chr&gt;, inventors_cleaned &lt;chr&gt;, ## # inventors_original &lt;chr&gt;, ipc_class &lt;chr&gt;, ipc_codes &lt;chr&gt;, ## # ipc_names &lt;chr&gt;, ipc_original &lt;chr&gt;, ipc_subclass_codes &lt;chr&gt;, ## # ipc_subclass_detail &lt;chr&gt;, ipc_subclass_names &lt;chr&gt;, ## # priority_country_code &lt;chr&gt;, priority_country_code_names &lt;chr&gt;, ## # priority_data_original &lt;chr&gt;, priority_date &lt;chr&gt;, ## # publication_country_code &lt;chr&gt;, publication_country_name &lt;chr&gt;, ## # publication_date &lt;chr&gt;, publication_date_original &lt;chr&gt;, ## # publication_day &lt;int&gt;, publication_month &lt;int&gt;, ## # publication_number &lt;chr&gt;, publication_number_espacenet_links &lt;chr&gt;, ## # pubyear &lt;int&gt;, title_cleaned &lt;chr&gt;, title_nlp_cleaned &lt;chr&gt;, ## # title_nlp_multiword_phrases &lt;chr&gt;, title_nlp_raw &lt;chr&gt;, ## # title_original &lt;chr&gt;, applicants_cleaned &lt;chr&gt; Our original dataset contained 8,262 rows. Our new dataset split on applicant names contains 12,729 rows. The function has moved our target column from column 1 to column 31 in the data frame. We can easily move it back to inspect. library(dplyr) pizza1 &lt;- select(pizza1, 31, 1:30) separate_rows() has done a great job but one of the problems with concatenated names is extra white space around the separator. We will deal with this next. 12.9.1 Trimming with stringr If we inspect the bottom of the column by subsetting into it using $ we will see that a lot of the names have a leading whitespace space. This results from the separate exercise where the ; is actually ;space. Take a look at the last few rows of the data using tail(). tail(pizza1$applicants_cleaned, 20) ## [1] &quot;Yahoo! Inc&quot; ## [2] &quot;Clarcor Inc&quot; ## [3] &quot;Holden Jeffrey A&quot; ## [4] &quot; Vengroff Darren E&quot; ## [5] &quot;Casper Jeffrey L&quot; ## [6] &quot; Erickson Braden J&quot; ## [7] &quot; Oppenheimer Alan A&quot; ## [8] &quot; Ray Madonna M&quot; ## [9] &quot; Weber Jean L&quot; ## [10] &quot;Pandey Neena&quot; ## [11] &quot; Sharma Sudhanshu&quot; ## [12] &quot; Verizon Patent And Licensing Inc&quot; ## [13] &quot;Pandey Neena&quot; ## [14] &quot; Sharma Sudhanshu&quot; ## [15] &quot;Brown Michael&quot; ## [16] &quot; Urban Scott&quot; ## [17] &quot;Brown Michael&quot; ## [18] &quot; Urban Scott&quot; ## [19] &quot;Cole Lorin R&quot; ## [20] &quot; Middleton Scott W&quot; This is a big issue because any counts that we make later on using the applicants_cleaned field will treat “Oppenheimer Alan A” and &quot; Oppenheimer Alan A&quot; as separate names when they should be grouped together. We can address this in a couple of ways. One approach is to recognise that actually our separator is not a simple &quot;;&quot; but &quot;;space&quot; in our call to separate_rows(). In that case the call to separate_rows() would actually be sep = &quot;; &quot;. We will add a line of code to illustrate the impact of this change. tmp &lt;- separate_rows(pizza_1990_2012, applicants_cleaned, sep = &quot;; &quot;) tail(tmp$applicants_cleaned, 20) ## [1] &quot;Yahoo! Inc&quot; &quot;Clarcor Inc&quot; ## [3] &quot;Holden Jeffrey A&quot; &quot;Vengroff Darren E&quot; ## [5] &quot;Casper Jeffrey L&quot; &quot;Erickson Braden J&quot; ## [7] &quot;Oppenheimer Alan A&quot; &quot;Ray Madonna M&quot; ## [9] &quot;Weber Jean L&quot; &quot;Pandey Neena&quot; ## [11] &quot;Sharma Sudhanshu&quot; &quot;Verizon Patent And Licensing Inc&quot; ## [13] &quot;Pandey Neena&quot; &quot;Sharma Sudhanshu&quot; ## [15] &quot;Brown Michael&quot; &quot;Urban Scott&quot; ## [17] &quot;Brown Michael&quot; &quot;Urban Scott&quot; ## [19] &quot;Cole Lorin R&quot; &quot;Middleton Scott W&quot; Another way to address this, is to use the str_trim() function from the stringr package. We can address this problem using a function from the stringr package str_trim(). We have a choice with str_trim() on whether to trim the whitespace on the right, left or both. Here we will choose both. Because we are seeking to modify an existing column (not to create a new vector or data.frame) we will use $ to select the column and as the data for the str_trim() function. That will apply the function to the applicants column in pizza1. library(stringr) pizza1$applicants_cleaned &lt;- str_trim(pizza1$applicants_cleaned, side = &quot;both&quot;) tail(pizza1$applicants_cleaned, 20) ## [1] &quot;Yahoo! Inc&quot; &quot;Clarcor Inc&quot; ## [3] &quot;Holden Jeffrey A&quot; &quot;Vengroff Darren E&quot; ## [5] &quot;Casper Jeffrey L&quot; &quot;Erickson Braden J&quot; ## [7] &quot;Oppenheimer Alan A&quot; &quot;Ray Madonna M&quot; ## [9] &quot;Weber Jean L&quot; &quot;Pandey Neena&quot; ## [11] &quot;Sharma Sudhanshu&quot; &quot;Verizon Patent And Licensing Inc&quot; ## [13] &quot;Pandey Neena&quot; &quot;Sharma Sudhanshu&quot; ## [15] &quot;Brown Michael&quot; &quot;Urban Scott&quot; ## [17] &quot;Brown Michael&quot; &quot;Urban Scott&quot; ## [19] &quot;Cole Lorin R&quot; &quot;Middleton Scott W&quot; Note that when using str_trim() we use subsetting to modify the applicants column in place. There is possibly a more efficient way of doing this with pipes but this appears difficult because the data.frame needs to exist for str_trim() to act on in place or we end up with a vector of applicant names rather than a data.frame. A solution to this problem is provided on Stack Overflow1. In practice, the most efficient solution in this case is to recognise that the separator for separate_rows is &quot;;space&quot;. However, that will not always be true making the tools in stringr invaluable. To learn more about string manipulation in R try Chapter 14 of R for Data Science by Garrett Grolemund and Hadley Wickham. We can tie the steps so far together using pipes into the following simpler code that we will become the applicants table for use in the infographic. We will add a call to rename and rename applicants_cleaned to tidy up. library(dplyr) library(tidyr) library(stringr) applicants &lt;- rename(pizza, pubyear = publication_year) %&gt;% filter(pubyear &gt;= 1990, pubyear &lt;= 2012) %&gt;% separate_rows(applicants_cleaned, sep = &quot;; &quot;) %&gt;% rename(applicants = applicants_cleaned) %&gt;% select(31, 1:30) # moves separated column to the beginning applicants ## # A tibble: 12,729 × 31 ## applicants applicants_cleaned_type ## &lt;chr&gt; &lt;chr&gt; ## 1 &lt;NA&gt; People ## 2 Lazarillo De Tormes S L Corporate ## 3 &lt;NA&gt; People ## 4 Depoortere, Thomas People ## 5 Frisco Findus Ag Corporate ## 6 Bicycle Tools Incorporated Corporate ## 7 Castiglioni, Carlo People ## 8 &lt;NA&gt; People ## 9 Bujalski, Wlodzimierz People ## 10 Ehrno Flexible A/S Corporate; People ## # ... with 12,719 more rows, and 29 more variables: ## # applicants_organisations &lt;chr&gt;, applicants_original &lt;chr&gt;, ## # inventors_cleaned &lt;chr&gt;, inventors_original &lt;chr&gt;, ipc_class &lt;chr&gt;, ## # ipc_codes &lt;chr&gt;, ipc_names &lt;chr&gt;, ipc_original &lt;chr&gt;, ## # ipc_subclass_codes &lt;chr&gt;, ipc_subclass_detail &lt;chr&gt;, ## # ipc_subclass_names &lt;chr&gt;, priority_country_code &lt;chr&gt;, ## # priority_country_code_names &lt;chr&gt;, priority_data_original &lt;chr&gt;, ## # priority_date &lt;chr&gt;, publication_country_code &lt;chr&gt;, ## # publication_country_name &lt;chr&gt;, publication_date &lt;chr&gt;, ## # publication_date_original &lt;chr&gt;, publication_day &lt;int&gt;, ## # publication_month &lt;int&gt;, publication_number &lt;chr&gt;, ## # publication_number_espacenet_links &lt;chr&gt;, pubyear &lt;int&gt;, ## # title_cleaned &lt;chr&gt;, title_nlp_cleaned &lt;chr&gt;, ## # title_nlp_multiword_phrases &lt;chr&gt;, title_nlp_raw &lt;chr&gt;, ## # title_original &lt;chr&gt; We will want to create a plot with the applicants data in our infographic software. For that we need to introduce a field to count on. We might also want to establish a cut off point based on the number of records per applicant. In this code we will simply print the applicants ranked in descending order. The second to last line of the code provides a filter on the number of records. This value can be changed after inspecting the data. The final line omits NA values (otherwise the top result) where an applicant name is not available. library(tidyr) library(dplyr) applicant_count &lt;- select(applicants, applicants, publication_number) %&gt;% mutate(n = sum(publication_number = 1)) %&gt;% count(applicants, wt = n) %&gt;% arrange(desc(nn)) %&gt;% filter(nn &gt;= 1) %&gt;% na.omit() applicant_count ## # A tibble: 6,178 × 2 ## applicants nn ## &lt;chr&gt; &lt;dbl&gt; ## 1 Graphic Packaging International, Inc 154 ## 2 Kraft Foods Holdings, Inc 132 ## 3 Google Inc 123 ## 4 Microsoft Corporation 88 ## 5 The Pillsbury Company 83 ## 6 General Mills, Inc 77 ## 7 Nestec 77 ## 8 The Procter &amp; Gamble Company 59 ## 9 Pizza Hut, Inc 57 ## 10 Yahoo! Inc 54 ## # ... with 6,168 more rows If we inspect applicant count using View(applicant_count) we have 6,178 rows. That is far too many to display in an infographic. So, next we will filter the data on the value for the top ten (54). Then we will write the data to a .csv file using the simple write_csv() from readr. library(dplyr) library(tidyr) library(readr) applicant_count &lt;- select(applicants, applicants, publication_number) %&gt;% mutate(n = sum(publication_number = 1)) %&gt;% count(applicants, wt = n) %&gt;% arrange(desc(nn)) %&gt;% filter(nn &gt;= 54) %&gt;% na.omit() applicant_count ## # A tibble: 10 × 2 ## applicants nn ## &lt;chr&gt; &lt;dbl&gt; ## 1 Graphic Packaging International, Inc 154 ## 2 Kraft Foods Holdings, Inc 132 ## 3 Google Inc 123 ## 4 Microsoft Corporation 88 ## 5 The Pillsbury Company 83 ## 6 General Mills, Inc 77 ## 7 Nestec 77 ## 8 The Procter &amp; Gamble Company 59 ## 9 Pizza Hut, Inc 57 ## 10 Yahoo! Inc 54 write_csv(applicant_count, &quot;pizza_applicants_1990_2012.csv&quot;) When we inspect applicant_count we will see that Graphic Packaging International is the top result with 154 results with Google ranking third with 123 results followed by Microsoft. This could suggest that Google and Microsoft are suddenly entering the market for online pizza sales or pizza making software or, as is more likely, that there are uses other uses of the word pizza in patent data that we are not aware of. As part of our infographic we will want to explore this intriguing result in more detail. We can do this by creating a subdataset for Google using filter(). 12.10 Selecting applicants using filter() As we saw above, while select() functions with columns, filter() from dplyr works with rows. Here we will filter the data to select the rows in the applicants column that contain Google Inc. and then write that to a .csv for use in our infographic. Note the use of double == and the quotes around “Google Inc”. library(dplyr) library(readr) google &lt;- filter(applicants, applicants == &quot;Google Inc&quot;) google ## # A tibble: 123 × 31 ## applicants applicants_cleaned_type applicants_organisations ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Google Inc Corporate; People Google Inc ## 2 Google Inc Corporate Google Inc ## 3 Google Inc Corporate; People Google Inc ## 4 Google Inc Corporate; People Google Inc ## 5 Google Inc Corporate Google Inc ## 6 Google Inc Corporate Google Inc ## 7 Google Inc Corporate Google Inc ## 8 Google Inc Corporate; People Google Inc ## 9 Google Inc Corporate Google Inc ## 10 Google Inc Corporate Google Inc ## # ... with 113 more rows, and 28 more variables: ## # applicants_original &lt;chr&gt;, inventors_cleaned &lt;chr&gt;, ## # inventors_original &lt;chr&gt;, ipc_class &lt;chr&gt;, ipc_codes &lt;chr&gt;, ## # ipc_names &lt;chr&gt;, ipc_original &lt;chr&gt;, ipc_subclass_codes &lt;chr&gt;, ## # ipc_subclass_detail &lt;chr&gt;, ipc_subclass_names &lt;chr&gt;, ## # priority_country_code &lt;chr&gt;, priority_country_code_names &lt;chr&gt;, ## # priority_data_original &lt;chr&gt;, priority_date &lt;chr&gt;, ## # publication_country_code &lt;chr&gt;, publication_country_name &lt;chr&gt;, ## # publication_date &lt;chr&gt;, publication_date_original &lt;chr&gt;, ## # publication_day &lt;int&gt;, publication_month &lt;int&gt;, ## # publication_number &lt;chr&gt;, publication_number_espacenet_links &lt;chr&gt;, ## # pubyear &lt;int&gt;, title_cleaned &lt;chr&gt;, title_nlp_cleaned &lt;chr&gt;, ## # title_nlp_multiword_phrases &lt;chr&gt;, title_nlp_raw &lt;chr&gt;, ## # title_original &lt;chr&gt; write_csv(google, &quot;google_1990_2012.csv&quot;) Note that the correct result for the period 1990 to 2012 for Google is 123 records from 191 records across the whole pizza dataset. The correct result will be achieved only where you use the filtered, separated and trimmed data we created in the applicants data frame. 12.11 Generating IPC Tables In the next step we will want to generate two tables containing International Patent Classification (IPC) data. IPC codes and the Cooperative Patent Classification (CPC, not present in this dataset) provide information on the technologies involved in a patent document. The IPC is hierarchical and proceeds from the general class level to the detailed group and subgroup level. Experience reveals that the majority of patent documents receive more than one IPC code to more fully describe the technological aspects of patent documents. The pizza dataset contains IPC codes on the class and the subclass level in concatenated fields. One important consideration in using IPC data is that the descriptions are long and can be difficult for non-specialists to grasp. This can make visualising the data difficult and often requires manual efforts to edit labels for display. We now want to generate three IPC tables. A general IPC table for the pizza dataset A general IPC table for the Google dataset A more detailed IPC subclass table for the Google dataset For ease of presentation in an infographic we will use the ipc_class field. For many patent analytics purposes this will be too general. However it has the advantage of being easy to visualise. To generate the table we can use a generic function based on the code developed for dealing with the applicants data. We will call the function patent_count(). patent_count &lt;- function(data, col = &quot;&quot;, count_col = &quot;&quot;, n_results = n_results, sep = &quot;[^[:alnum:]]+&quot;) { p_count &lt;- dplyr::select_(data, col, count_col) %&gt;% tidyr::separate_rows_(col, sep = sep) %&gt;% dplyr::mutate_(n = sum(count_col = 1)) %&gt;% dplyr::select(2:3) p_count %&gt;% dplyr::group_by_(col) %&gt;% dplyr::tally() %&gt;% dplyr::arrange(desc(nn)) %&gt;% dplyr::rename(records = nn) %&gt;% dplyr::ungroup() %&gt;% na.omit() %&gt;% .[1:n_results, ] } The patent_count() function is based on the the code we developed for applicants. It contains variations to make it work as a function. The function takes four arguments: col = the concatenated column that we want to split and gather back in col_count = a column for generating counts (in this dataset the publication_number) n_results = the number of results we want to see in the new table (typically 10 or 20 for visualisation). This is equivalent to the number of rows that you want to see. sep = the separator to use to separate the data in col. With patent data this is almost always “;” (as ;space. To generate the ipc_class data we can do the following and then write the file to .csv. Note that we have set the number of results n_results to 10. pizza_ipc_class &lt;- patent_count(data = pizza_1990_2012, col = &quot;ipc_class&quot;, count_col = &quot;publication_number&quot;, n_results = 10, sep = &quot;;&quot;) pizza_ipc_class ## # A tibble: 10 × 2 ## ipc_class records ## &lt;chr&gt; &lt;dbl&gt; ## 1 A21: Baking 2218 ## 2 G06: Computing 1209 ## 3 A23: Foods Or Foodstuffs 1058 ## 4 B65: Conveying 903 ## 5 A23: Foods Or Foodstuffs 785 ## 6 A47: Furniture 645 ## 7 B65: Conveying 480 ## 8 H05: Electric Techniques Not Otherwise Provided For 456 ## 9 H04: Electric Communication Technique 427 ## 10 H04: Electric Communication Technique 320 write_csv(pizza_ipc_class, &quot;pizza_ipcclass_1990_2012.csv&quot;) Note that this dataset is based on the main pizza_1990_2012 dataset (including cases where no applicant name is available). The reason we have not used the applicants dataset is because that dataset will duplicate the IPC field for each split of an applicant name. As a result it will over count the IPCs by the number of applicants on a document name. As this suggests, it is important to be careful when working with data that has been tidied because of the impact on other counts. This problem does not apply in the case of our Google data because the only applicant listed in that data is Google (excluding co-applicants). We can therefore safely use the Google dataset to identify the IPC codes. google_ipc_class &lt;- patent_count(data = google, col = &quot;ipc_class&quot;, count_col = &quot;publication_number&quot;, n_results = 10, sep = &quot;;&quot;) google_ipc_class ## # A tibble: 10 × 2 ## ipc_class records ## &lt;chr&gt; &lt;dbl&gt; ## 1 G06: Computing 95 ## 2 G01: Measuring 14 ## 3 G09: Educating 11 ## 4 G06: Computing 10 ## 5 H04: Electric Communication Technique 10 ## 6 H04: Electric Communication Technique 7 ## 7 G10: Musical Instruments 6 ## 8 G08: Signalling 1 ## 9 G10: Musical Instruments 1 ## 10 A63: Sports 1 write_csv(google_ipc_class, &quot;google_ipcclass_1990_2012.csv&quot;) There are only 7 classes and as we might expect they are dominated by computing. We might want to dig into this in a little more detail and so let’s also create an IPC subclass field. google_ipc_subclass &lt;- patent_count(data = google, col = &quot;ipc_subclass_detail&quot;, count_col = &quot;publication_number&quot;, n_results = 10, sep = &quot;;&quot;) google_ipc_subclass ## # A tibble: 10 × 2 ## ipc_subclass_detail ## &lt;chr&gt; ## 1 G06F: Electric Digital Data Processing ## 2 G01C: Measuring Distances, Levels Or Bearings ## 3 G06Q: Data Processing Systems Or Methods, Specially Adapted For Administra ## 4 G06Q: Data Processing Systems Or Methods, Specially Adapted For Administrat ## 5 G09B: Educational Or Demonstration Appliances ## 6 G06F: Electric Digital Data Processing ## 7 H04W: Wireless Communication Networks ## 8 G10L: Speech Analysis Or Synthesis ## 9 G09G: Arrangements Or Circuits For Control Of Indicating Devices Using Sta ## 10 H04B: Transmission ## # ... with 1 more variables: records &lt;dbl&gt; write_csv(google_ipc_subclass, &quot;google_ipcsubclass_1990_2012.csv&quot;) We now have the data on technology areas that we need to understand our data. The next and final step is to generate data from the text fields. 12.11.1 Phrases Tables We will be using data from words and phrases in the titles of patent documents for use in a word cloud in our infographic. It is possible to generate this type of data in R directly using the tm and NLP packages. Our pizza dataset already contains a title field broken down into phrases using Vantagepoint software and so we will use that. We will use the field title_nlp_multiword_phrases as phrases are generally more informative than individual words. Once again we will use our general patent_count() function although experimentation may be needed to identify the number of phrases that visualise well in a word cloud. pizza_phrases &lt;- patent_count(data = pizza_1990_2012, col = &quot;title_nlp_multiword_phrases&quot;, count_col = &quot;publication_number&quot;, n_results = 15, sep = &quot;;&quot;) pizza_phrases ## # A tibble: 15 × 2 ## title_nlp_multiword_phrases records ## &lt;chr&gt; &lt;dbl&gt; ## 1 Food Product 135 ## 2 Microwave Ovens 99 ## 3 Food Product 44 ## 4 Crust Pizza 41 ## 5 conveyor Oven 40 ## 6 Microwave Ovens 38 ## 7 Bakery Product 34 ## 8 Making Same 33 ## 9 Baked Product 33 ## 10 Cook Food 32 ## 11 Pizza Oven 30 ## 12 pizza Box 30 ## 13 Related Method 29 ## 14 Microwave Cooking 28 ## 15 microwave Heating 27 write_csv(pizza_phrases, &quot;pizza_phrases_1990_2012.csv&quot;) Now we do the same with the Google data. google_phrases &lt;- patent_count(data = google, col = &quot;title_nlp_multiword_phrases&quot;, count_col = &quot;publication_number&quot;, n_results = 15, sep = &quot;;&quot;) google_phrases ## # A tibble: 15 × 2 ## title_nlp_multiword_phrases records ## &lt;chr&gt; &lt;dbl&gt; ## 1 Digital Map System 10 ## 2 conversion Path Performance Measures 9 ## 3 Search Results 7 ## 4 Mobile Device 6 ## 5 Location Prominence 4 ## 6 Processing Queries 4 ## 7 Geographical Relevance 4 ## 8 Local Search Results 4 ## 9 Network Speech Recognizers 4 ## 10 Search Query 4 ## 11 indexing Documents 3 ## 12 providing Profile Information 3 ## 13 search Query Categorization 3 ## 14 Search Ranking 3 ## 15 aspect-Based Sentiment Summarization 3 write_csv(google_phrases, &quot;google_phrases_1990_2012.csv&quot;) We now have the following .csv files. pizza_total_1990_2012 pizza_country_1990_2012 pizza_applicants_1990_2012 pizza_ipcclass_1990_2012 pizza_phrases_1990_2012 Google_1990_2012 Google_ipclass_1990_2012 Google_ipcsubclass_1990_2012 Google_phrases-1990_2012 12.12 Creating an infographic in infogr.am If you are starting this chapter here then download the datasets we will be using as a single zip file from the Manual repository here and then unzip the file. We first need to sign up for a free account with infogr.am We will then see a page with some sample infographics to provide ideas to get you started. Click on one of the infograms with a graph such as Trends in Something and then click inside the graph box itself and select the edit button in the top right. This will open up a data panel with the toy data displayed. We want to replace this data by choosing the upload button and selecting our pizza_country_1990_2012.csv file. We now have a decent looking graph for our country trends data where we can see the number of records per country and year by hovering over the relevant data points. While some of the countries with low frequency data are crunched at the bottom (and would be better displayed in a separate graph), hovering over the data or over a country name will display the relevant country activity. We will therefore live with this. We now want to start adding story elements by clicking on the edit button in the title. Next we can start adding new boxes using the menu icons on the right. Here we have changed the title, added a simple body text for the data credit and then a quote from someone describing themselves as the Head of Pizza Analytics. Next we need to start digging into the data using our IPC, applicants and phrases data. To work with our IPC class data we will add a bar chart and load the data. To do this select the graph icon in the right and then Bar. Once again we will choose edit and then load our pizza_ipcclass_1990_2012 dataset. Then we can add a descriptive text box. We can then continue to add elements as follows: applicants bar chart pizza phrases by selecting graph and word cloud Google ipc-subclass Google word cloud. One useful approach to developing an infographic is to start by adding the images and then add titles and text boxes to raise key points. In infogram new text boxes appear below existing boxes but can be repositioned by dragging and dropping boxes onto each other. One nice feature of infogram is that it is easy to share the infographic with others through a url, an embed code or on facebook or via twitter. At the end of the infographic it is a good idea to provide a link where the reader can obtain more information, such as the full report or the underlying data. In this case we will add a link to the Tableau workbook on pizza patent activity that we developed in an earlier chapter. Our final infographic should look something like this. 12.12.1 Round Up In this chapter we have concentrated on using R to tidy patent data in order to create an online infographic using free software. Using our trusty pizza patent data from WIPO Patentscope we walked through the process of wrangling and tidying patent data first using short lines of code that we then combined into a reusable function. As this introduction to tidying data in R has hopefully revealed, R and packages such as dplyr, tidyr and stringr provide very useful tools for working with patent data, and they are free and well supported. In the final part of the chapter we used the data we had generated in RStudio to create an infographic using infogr.am that we then shared online. Infogram is just one of a number of online infographic services and it is well worth trying other services such as easel.ly to find a service that meets your needs. As regular users of R will already know, it is already possible to produce all of these graphics (such as word clouds) directly in R using tools such as ggplot2, plotly and word clouds using packages such as wordcloud. Some of these topics have been covered in other chapters and for more on text mining and word clouds in R see this recent article on R-bloggers. None of the infographic services we viewed appeared to offer an API that would enable a direct connection with R. There also seems to be a gap in R’s packages where infographics might sit with this 2015 R-bloggers article providing a walk through on how to create a basic infographic. http://stackoverflow.com/questions/25975827/how-to-feed-the-result-of-a-pipe-chain-magrittr-to-an-object↩ "],
["scientific-literature-with-rplos.html", "Chapter 13 Scientific Literature with Rplos 13.1 Introduction 13.2 Install R and RStudio 13.3 Create A Project 13.4 Install Packages 13.5 Key functions in rplos 13.6 Data Fields in rplos 13.7 Basic Searching using searchplos(), Navigating and Exporting Data 13.8 Limit by journal 13.9 Obtaining the full number of results 13.10 Obtaining the number of records across PLOS Journals 13.11 Writing the results and using a codebook 13.12 Proximity Searching 13.13 Searching Using Multiple Phrases 13.14 Tidying and Organising the Data 13.15 Filling Blank Spaces 13.16 Converting Dates 13.17 Add a count 13.18 Remove a column 13.19 Arranging the Data 13.20 Dealing with Duplicates 13.21 Restricting searches by section 13.22 By author 13.23 Title search using plostitle() 13.24 Abstract search using plosabstract() 13.25 Subject Area using plossubject() 13.26 Highlighting terms and text fragments with highplos() 13.27 Get the full text of one or more articles 13.28 Writing a corpus to disk 13.29 Round Up 13.30 Resources", " Chapter 13 Scientific Literature with Rplos 13.1 Introduction In this chapter we look at the use of the rplos package from rOpenSci to access the scientific literature from the Public Library of Science using the PLOS Search API. The Public Library of Science (PLOS) is the main champion of open access peer reviewed scientific publications and has published somewhere in the region of 140,000 articles. These articles are a fantastic resource. PLOS includes the following titles. PLOS ONE PLOS Biology PLOS Medicine PLOS Computational Biology PLOS Genetics PLOS Pathogens PLOS Neglected Tropical Diseases PLOS Clinical Trials () PLOS Collections (collections of articles) PLOS is important because it provides open access to the full text of peer reviewed research. For researchers interested in working with R, rplos and its bigger sister package, the rOpenSci fulltext package are very important tools for gaining access to research. This article is part of work in progress for the WIPO Manual on Open Source Patent Analytics. The Manual is intended to introduce open source analytics tools to patent researchers in developing countries and to be of wider use to the science and technology research community. An important part of patent research is being able to access and analyse the scientific literature. This article makes no assumptions about knowledge of R or programming. rplos is a good place to start with learning how to access scientific literature in R using Application Programming Interfaces (APIs). Because rplos is well organised and the data is very clean it is also a good place to learn some of the basics of working with data in R. This provides a good basis for working with the ROpenSci fulltext package. fulltext allows you to retrieve scientific literature from multiple data sources and we will deal with that next. We will also use this as an opportunity to introduce some of the popular packages for working with data in R, notably the family of packages for tidying and wrangling data developed by Hadley Wickham at RStudio (namely, plyr, dplyr, stringr and tidyr). We will only touch on these but we include then as everyday working packages that you will find useful in learning more about R. The first step is to make sure that you have R and RStudio. 13.2 Install R and RStudio To get up and running you need to install a version of R for your operating system. You can do that from here. Then download RStudio Desktop for your operating system from here using the installer for your system. Then open RStudio. 13.3 Create A Project Projects are probably the best way of organising your work in RStudio. To create a new project select the dropdown menu in to top right where you see the blue R icon. Navigate to where you want to keep your R materials and give your project a name (e.g. rplos). Now you will be able to save you work into an rplos project folder and R will keep everything together when you save the project. 13.4 Install Packages First we need to install some packages to help us work with the data. This list of packages are common “go to” packages for daily use. install.packages(&quot;rplos&quot;) #the main event install.packages(&quot;readr&quot;) #for reading data install.packages(&quot;plyr&quot;) #for wrangling data install.packages(&quot;dplyr&quot;) #for wrangling data install.packages(&quot;tidyr&quot;) #for tidying data install.packages(&quot;stringr&quot;) #for manipulating strings install.packages(&quot;tm&quot;) #for text mining install.packages(&quot;XML&quot;) #for dealing with text in xml Then we load the libraries. Note that rplos will install and load any other packages that it needs (in this case ggplot2 for graphing) so we don’t need to worry about that. library(rplos) library(readr) library(plyr) # load before dplyr to avoid errors library(dplyr) library(tidyr) library(stringr) library(tm) library(XML) Next let’s take a look at the wide range of functions that are available for searching using rplos by moving over to the Packages tab in RStudio and clicking on rplos. A very useful tutorial on using rplos can be found here and can be cited as “Scott Chamberlain, Carl Boettiger and Karthik Ram (2015). rplos: Interface to PLOS Journals search API. R package version 0.5.0 https://github.com/ropensci/rplos”. If you are already comfortable working in R you might want to head to that introductory tutorial as this article contains a lot more in the way of explanation. However, we will also add some new examples and code for working with the results to add to the resource base for rplos. 13.5 Key functions in rplos R is an object oriented language meaning that it works on objects such as a vector, table, list, or matrix. These are easy to create. We then apply functions to the data from base R or from packages we have installed for particular tasks. searchplos(), the basic function for searching plos plosauthor(), search on author name plostitle(), search the title plosabstract(), search the abstract plossubject(), search by subject citations(), search the PLOS Rich Citations plos_fulltext(), retrieve full text using a DOI highplos(), highlight search terms in the results. highbrow(), browse search terms in a browser with hyperlinks. Functions in R take (accept) arguments which are options for the type of data we want to obtain when using an API or the calculations that we want to run on the data. For rplos we will mainly use arguments setting out our search query, the fields that we want to search, and the number of results. If you are new to R this will typically takes the form of a short piece of code that is structured like this. newobject &lt;- function(yourdata, argument1, argument2, etc) A new object is likely to be a table or list containing data. the sign &lt;- gets or passes the results of the function (such as seachplos) to the new object. To specify what we want we first include our data (yourdata) and then one or more arguments which control what we get, such as the number of records or the title etc. 13.6 Data Fields in rplos There are quite a number of fields that can be searched with rplos or used to refine a search. We will only use a few of them. To see the range of fields type plosfields into the console and press Enter. plosfields For example, if we wanted to search the title, abstract and conclusions we would use these fields in building the query (see below). If we wanted to search everything but those fields we would probably use body. If we wanted to retrieve the references then we would include reference in the fields. In rplos a field is denoted by fl = with the fields in quotes such as fl = &quot;title&quot; and so on as we will see below. 13.7 Basic Searching using searchplos(), Navigating and Exporting Data searchplos() is the basic rplos search function and returns a list of document identifiers (DOIs) or other data fields. The basic search result is a set of DOIs that can be used for further work. To get help for a function, or to find working examples, use ? in front of the function in the console: `?`(searchplos) This will bring up the help page for that function with a description of the arguments that are available and with examples at the bottom of the page. The examples are there to help you. In rplos they presently focus on the use of single search terms such as ecology. However, as we will see below, it is possible to use phrases in searching and to use multiple terms. There are quite a number of arguments (options) available for refining the results and we will include some of these in the examples. The author of this article is a big fan of pizza. So, in the first example we will carry out a simple search for the term pizza and then specify the results we want to see using the argument fl = (for fields) and the number of results that we want to see using limit = 20. In specifying the fields we will use c() to combine them together. p &lt;- searchplos(q = &quot;pizza&quot;, fl = c(&quot;id&quot;, &quot;publication_date&quot;, &quot;title&quot;, &quot;abstract&quot;), limit = 20) p What searchplos() has done in the background is to send a request to the PLOS API to bring back the id, publication_date, title and abstract for 20 records across the PLOS journals. To see the results type: p Results in R are stored in objects (in this case the object is a list). To see the type of object in R use: class(p) When working with R it is generally more useful to understand the structure of the data so that you can work out how to access it. That can be done using str() for structure. This is one of the most useful functions in R and well worth writing down. str(p) The results might seem a little confusing at first but what this is telling us is that we have an R object that is a list consisting of two components. The first is an item called meta that reports the number of records found and the type of object (a data.frame). The second is data which contains the information on the two results in the form of a data frame (basically a table) containing the id, date, title and abstract information that we asked PLOS for. Note that the list contains a marker $ for the beginning of the two lists with the data they contain appearing as ..$ signifying that they are nested under meta or data. This hierarchy helps us with accessing the data using subsetting in R. For example, if we wanted to access the meta data (and we do) we can use the following: p$meta That will just print the full meta data entries. If we wanted to just access the number of records (num$Found) then we would extend this a little by moving to that position in the hierarchy with: p$meta$numFound That will print out just the number of records returned by our search. An alternative way of subsetting is to use the “[” and “[[” and the numeric position in the list. In Hands on Programming with R Garrett Grolemund compares this to a train with numbered carriages where “[]” selects the train carriage e.g. [1] and “[[1]]” selects the contents of carriage number 1. We don’t need to worry about this but it is very helpful as a way of remembering the difference. For example the following selects the contents of the first item in our list (meta): p[[1]] and is the same as p$meta. While: p[[1]][[1]] is the same as p$meta$numFound. Subsetting the data by its numeric position rather than its name makes life much easier when working with lists with lots of items. As we will see below, when applying a function to a list with multiple items we can also use “[[”, 2. This will retrieve the second item in each of our line of train carriages. Another useful tip for navigating the data in RStudio is using autocomplete. Try typing the following into the console. p\\(meta\\) #type me in the console, do not cut and paste When we type the $ a popup will appear and display two entries as tables for meta and data. Click on meta, then add another $ sign at the end. It will now display three items in purple (for vectors). Select numFound and hey presto! As you work with RStudio you will notice that when you start to type a function name, lists of names will start to pop up. Type search into the console but do not press enter and wait a moment. A list with three items should pop up with search {base}, searchpaths {base}, and searchplos {rplos}. This is really helpful because it saves a lot of typing. As you become more familiar with R it also helpfully displays what a function does and a reminder of its arguments. The soft brackets around {base} indicate the package where the function can be found (this can be useful for discovering functions when you get stuck). Finally, you can also see the items in your project in the Environment pane. Click on the blue arrow for p in the Environment pane under Values and you will see the structure of the data in p and some of its content. 13.7.1 Creating a New Object and Writing to File Ok so we have a list with some results containing meta and data. We now want to export data to a .csv file that we can work with in Excel or another programme. While we will want to make a note of the total number of results in meta, what we really want will be in data. We can simply create a new object using the code above and assign it to a name using &lt;-. Note that there is no space here and &lt; - will not work. dat &lt;- p$data If we look at the class of this object (class(dat)) we now have a data.frame (a table) that we can write to a .csv file to use later. We can do this easily using write.csv() and start by naming the object we want to write (dat) and then giving it a file name. Because we created an rplos project in RStudio earlier (didn’t we), the file will be saved into the project folder. If you didn’t create a project or want to check the directory then use: getwd() This will show your current working directory. If you do not see the name of your rplos project then copy the full file path so that it looks something like this (don’t forget the &quot;&quot; around the path): setwd(&quot;/Users/pauloldham/Desktop/open_source_master/rplos&quot;) Ok, we now know where we are. So, let’s save the file. write.csv(dat, &quot;dat.csv&quot;, row.names = FALSE) If we open this up in Excel or Open Office Calc then we will see two blank entries in the abstract fields. Blank cells can create calculation problems. Inside R we can handle this by filling in the blanks with NA as follows [2]. In this case we are subsetting into dat and then asking R to identify those cells that exactly match == with &quot;&quot;. We then fill those cells in dat with NA (for Not Available). dat[dat == &quot;&quot;] &lt;- NA dat We can then simply write the file as before. If we wanted to remove the NAs we have just introduced then we could use write.csv(dat, &quot;dat.csv&quot;, row.names = FALSE, na = &quot;&quot;) which will convert them back to blank spaces. A faster way to deal with writing files is to use the recent readr package as this will not add row numbers to exported files. Here we will use the write_csv() function. write_csv(dat, &quot;dat.csv&quot;) The advantage of readr is that it is fast and does not require the same number of arguments as the standard write.csv such as specifying row names or with read.csv specifying stringsAsFactors = FALSE. Finally, if we wanted to write the entire list p, including meta to file then we could use: write.csv(p, &quot;p.csv&quot;, row.names = FALSE) We have now retrieved some data containing pizza through the PLOS API using rplos and we have written the data to a file as a table we can use later. We will now move on to some more sophisticated things we can do with rplos. 13.8 Limit by journal As we have seen above, PLOS contains 7 journals and in rplos the results for a search can be limited to specific journals such as PLOS ONE or PLOS Biology. Note that the short journal names appear to use the old format for PLOS consisting of mixed upper and lowercase characters (e.g. PLoSONE not PLOSONE). A nice easy way to find the short journal names is to use: journalnamekey() Here we will limit the search to PLOS ONE by adding fq = to the arguments and then the cross_published_journal_key argument. Note that the fq= argument takes the same options as fl=. But, fq = filters the results returned by PLOS to only those specified in fq =. pizza &lt;- searchplos(q = &quot;pizza&quot;, fl = c(&quot;id&quot;, &quot;publication_date&quot;, &quot;title&quot;, &quot;abstract&quot;), fq = &#39;cross_published_journal_key:PLoSONE&#39;, start = 0, limit = 20) head(pizza$data) We have retrieved 20 records here using limit = 20 (the default is 10). It is generally a good idea to start with a small number of results to test that we are getting what we expect back rather than lots of irrelevant data. What if we wanted to retrieve all of the results? Here we will need to do a bit more work using the meta field. 13.9 Obtaining the full number of results One way to do this is to take our original number of results and then subset in to the data and create a new object containing the value for the number of records in numFound. Note that the number of records for a particular query below may well have gone up by the time that you read this article. r &lt;- pizza$meta$numFound To run a new search we can now insert r into the limit = value. This will be interpreted as the numeric value of r (210). pizza &lt;- searchplos(q = &quot;pizza&quot;, fl = c(&quot;id&quot;, &quot;publication_date&quot;, &quot;title&quot;, &quot;abstract&quot;), fq = &quot;cross_published_journal_key:PLoSONE&quot;, start = 0, limit = r) head(pizza$data) An alternative way of doing this is to make life a bit easier for ourselves by first running our query and setting the limit as limit = 0. This will only return the meta data. We then add the subset for number found to the end of the code as $meta$numFound. That will pull back the value directly. r &lt;- searchplos(q = &quot;pizza&quot;, fq = &quot;cross_published_journal_key:PLoSONE&quot;, limit = 0)$meta$numFound r We can then run the query again using the value of r in limit = : pizza &lt;- searchplos(q = &quot;pizza&quot;, fl = c(&quot;id&quot;, &quot;publication_date&quot;, &quot;title&quot;, &quot;abstract&quot;), fq = &#39;cross_published_journal_key:PLoSONE&#39;, start = 0, limit = r) head(pizza$data) 13.10 Obtaining the number of records across PLOS Journals That has returned the full 210 results for PLOS ONE. We could attempt to make life even easier by first getting the results across all PLOS journals. We do this by removing the fq = argument limiting the data to PLOS ONE and saving the result in and object we will call r1. Note that the number of records will probably have gone up by the time you read this. r1 &lt;- searchplos(&quot;pizza&quot;, limit = 0)$meta$numFound r1 This produces 298 results at the time of writing. What happens now if we run our original query using the value of r1 (298 records) but limiting the results only to PLOS ONE? pizza &lt;- searchplos(q = &quot;pizza&quot;, fl = c(&quot;id&quot;, &quot;publication_date&quot;, &quot;title&quot;, &quot;abstract&quot;), fq = &#39;cross_published_journal_key:PLoSONE&#39;, start = 0, limit = r1) pizza$meta$numFound The answer is that the 210 results in PLOS ONE are returned from the total of 244 across the PLOS journals. Why? The reason this works is that searchplos() initially pulls back all of the data from the PLOS API and then applies our entry in fq = as a filter. So, in reality the full 244 records are fetched and then filtered down to the 210 from PLOS ONE. In this case, this makes our lives easier because we can use the results across PLOS journals and then restrict the data. 13.11 Writing the results and using a codebook We now have a total of 210 results for pizza. We can simply write the results to a .csv file. write.csv(pizza, &quot;plosone_pizza.csv&quot;, row.names = FALSE) As this illustrates, it is very easy to use rplos() and rapidly create a file that can be used for other purposes. When working in R you will often create multiple tables and take multiple steps. To keep track of what you do it is a good idea to create a text file as a codebook. Use the codebook to note down the important steps you take. The idea of a codebook is taken from Jeffrey Leek’s Elements of Data Analytic Sytle which provides a very accessible introduction to staying organised. To create a codebook in RStudio simply use File &gt; New File &gt; Text File. This will open a text file that can be saved with your project. The codebook allows you to recall what actions you performed on the data months or years later. It also allows others to follow and reproduce your results and is important for reproducible research. 13.12 Proximity Searching We will typically want to carry out a search by first retrieving a rough working set of results to get a feel for the data and then experimenting until we are happy with the data to noise ratio (see this article for an example). In thinking about ways to refine our search criteria we can also use proximity searching. Proximity searching focuses on the distance between words that we are interested in. To read more about this use ?searchplos in the console and scroll down to example seven in the help list. We reproduce that example here using the words synthetic and biology as our terms. We can set the proximity of terms using tilde ~ and a value. For example, ~15 will find instances of the terms synthetic and biology within 15 words of each other in the full texts of PLOS articles. searchplos(q = &quot;everything:\\&quot;synthetic biology\\&quot;~15&quot;, fl = &quot;title&quot;, fq = &quot;doc_type:full&quot;) Note that while synthetic and biology appear inside quotes (suggesting they are a phrase to be searched) in reality the API will treat this as synthetic AND biology. That is, the query will look first for documents that contain the words synthetic AND biology and then for those cases where the words appear within 15 words of each other. In this case we get 1,684 results across PLOS (everything) and full texts (fq = &quot;doc_type:full) as we can see from this code. searchplos(q = &quot;everything:\\&quot;synthetic biology\\&quot;~15&quot;, fl = &quot;title&quot;, fq = &quot;doc_type:full&quot;)$meta$numFound We can narrow the search horizon to ~1 to capture those cases where the terms appear next to each other (within 1 word either to the left or the right) which produces 1001 results. searchplos(q = &quot;everything:\\&quot;synthetic biology\\&quot;~1&quot;, fl = &quot;title&quot;, fq = &quot;doc_type:full&quot;)$meta$numFound This is actually about 10 records higher than the total returned on an exact match for the phrase suggesting that there could be cases of “biology synthetic” or other issues (such as punctuation) or API performance that account for the variance. As noted in the searchplos() documentation: “Don’t be surprised if queries you perform in a scripting language, like using rplos in R, give different results than when searching for articles on the PLOS website. I am not sure what exact defaults they use on their website.” As a result, it is a good idea to try different approaches. Even if it is not possible to get to the bottom of any variance it is very useful to note it down in your codebook to highlight the issue to others who may try and repeat your work. It is also important to emphasise that when using rplos() it is possible to return a fragment of the text with the highlighted terms using highplos() and the hl.fragsize argument to set the horizon for the fragment of text around the search. This is particularly useful for text mining. In many cases the most useful information comes from searching using phrases and multiple terms. Unlike words, phrases can articulate concepts. This generally makes them more useful than single words for searching for information. 13.13 Searching Using Multiple Phrases To search by phrases we start by creating an object containing our phrases and put the phrases inside double quotation marks. If we do not use double quotation marks the search will look for documents containing both words rather than the complete phrase (e.g. synthetic AND biology rather than “synthetic biology”). Note that the code below will display &quot;&quot; as &quot;&quot; but you don’t need to enter the \\. We will use the search query developed in this PLOS ONE article on synthetic biology in this example and retrieve the id, data, author, title and abstract across the PLOS journals. First we create the search query. Note that we use c(), for combine, to combine the list of terms into a vector inside the object called s. s &lt;- c(&quot;\\&quot;synthetic biology\\&quot;&quot;, &quot;\\&quot;synthetic genomics\\&quot;&quot;, &quot;\\&quot;synthetic genome\\&quot;&quot;, &quot;\\&quot;synthetic genomes\\&quot;&quot;) s We now want to get the maximum number of results returned by one of the search terms. This is slightly tricky because rplos will return a list containing four list items (one for each of our search terms). Each of those lists will contain meta and data items. What we want to do is find out which of the search terms returns the highest number of results inside meta in numFound. Then we can use that number as our limit. This involves more than one step. First we need to fetch the data. Then we need to extract meta from each list. Then we need to select numFound and find and return the maximum value across the lists of results. The easiest way to do this is to create a small function that we will call plos_records. To load the function into your Environment copy it and paste it into your console and press enter. The comments following # explain what is happening will be ignored when the function runs. When you have done this if you move over to Environment you will see plos_records under Functions. plos_records &lt;- function(q) { library(plyr) #for ldply library(dplyr) #for pipes, select and filter lapply(q, function(x) searchplos(x, limit = 0)) %&gt;% ldply(&quot;[[&quot;, 1) %&gt;% #get meta from the lists select(numFound) %&gt;% #select numFound column of meta filter(numFound == max(numFound)) %&gt;% #filter on max numFound print() #print max value of numFound } Now we can run the following code using s as our query (q = s) in the function. If all goes well a result will be printed in the console with the maximum number of results. It can take a few moments for the results to come back from the API. r2 &lt;- plos_records(q = s) r2 You should now see a number around 1151 (at the time of writing). Yay! Now we can use r2 in the limit to return all of the records. We will write this in the standard way and then display a simpler way using pipes %&gt;% below. Note that we use s as our search terms (see q = s) and we have used r2 for the limit (limit = r2). Because we are calling a chunk of data this can take around a minute to run. Note that at each step in the code below we are creating and then overwriting an object called results. We are also naming results as the first argument in each step. This can take a few moments to run. library(plyr) results &lt;- lapply(s, function(x) searchplos(x, fl = c(&#39;id&#39;,&#39;author&#39;, &#39;publication_date&#39;, &#39;title&#39;, &#39;abstract&#39;), limit = r2)) results &lt;- setNames(results, s) #add query terms to the relevant results in the list results &lt;- ldply(results, &quot;[[&quot;, 2) #extract the data into a single data.frame We can make life simpler by using pipes %&gt;% to simplify the code. The advantage of using pipes is that we do not have to keep creating and overwriting temporary objects (see above for results). The code is also much easier to read and faster. To learn more about using pipes see this article from Sean Anderson. Again the query might be a bit slow as the data is fetched back. library(plyr) library(dplyr) results &lt;- lapply(s, function(x) searchplos(x, fl = c(&#39;id&#39;, &#39;author&#39;, &#39;publication_date&#39;, &#39;title&#39;, &#39;abstract&#39;), limit = r2)) %&gt;% setNames(s) %&gt;% ldply(&quot;[[&quot;, 2) results Pipes are a relatively recent innovation in R (see the magrittr, dplyr and tidyr packages) and most code you will see will be written in the traditional way. However, pipes make R code faster and much easier to follow. While you will need to be familiar with regular R code to follow most existing work, pipes are becoming increasingly popular because the code is simpler and has a clearer logic (e.g. do this then that). We now have our data consisting of 1,405 records in a single data frame that we can view. View(results) We could now simply write this to a .csv file. But there are a number of things that we might want to do first. Most of these tasks fall into the category of wrangling and tidying up data so that we can carry on working with it in R or other software such as Excel. 13.14 Tidying and Organising the Data Many useful data cleaning and organisational tasks can be easily performed using the dplyr() and tidyr() packages developed by Hadley Wickham at RStudio. Other important packages include stringr()(for working with text strings), plyr() and reshape2() (general wrangling) and lubridate() (for working with dates). These packages were developed by Hadley Wickham and colleagues with the specific aim of making it easier to work with data in R in a consistent way. We will mainly use dplyr and tidyr in the examples below and a very useful RStudio cheatsheet can help you with working with dplyr and tidyr. 13.14.1 Renaming a column First we might want to tidy up by renaming a column. For example we might want to rename .id to something more meaningful. We can use rename() from dplyr() to do that (see ?rename). results &lt;- rename(results, search_terms = .id) results 13.15 Filling Blank Spaces It is good practice to fill blank cells with NA for “Not Available”&quot; to avoid calculation problems. For example, as in the earlier example, we have some blank cells in the abstract field and there may be others somewhere else. Following this StackOverflow answer we can do this easily. results[results == &quot;&quot;] &lt;- NA If for some reason we wanted to remove the NA values we can handle that at the time of exporting to a file (see above). 13.16 Converting Dates The publication_date field is a character vector. We can easily turn this into a Date format that can be used in R and drop the T00:00:00 for time information using: results$publication_date &lt;- as.Date(results$publication_date) head(results$publication_date) ##Adding columns When dealing with dates we might want to simply split the publication_date field into three columns for year, month and day. We can do that using separate() from tidyr. results &lt;- separate(results, publication_date, c(&quot;year&quot;, &quot;month&quot;, &quot;day&quot;), sep = &quot;-&quot;, remove = FALSE) head(select(results, year, month, day)) Here we have specified the data (results), the column we want to separate (results) and then the three new columns that we want to create by closing them in c() and placing them in quotes. This creates three new columns. The remove argument specifies whether we want to remove the original column (the default is TRUE) or keep it. Because working with dates can be quite awkward (to put it mildly) it makes sense to have a range of options available to you early on in working with your data rather than having to go back to the beginning much later on. 13.17 Add a count One feature of pulling back literature from an API for scientific literature is that the fields tend to be character fields rather than numeric. Character vectors in R are quoted with &quot;&quot;. This can make life awkward if we want to start counting things later on. To add a count column we can use mutate from the dplyr() package to create a new column number. number is based on assigning the value 1 to the id columns using mutate(). We are avoiding the term count because it is the name of a function count(). There are other ways of doing this but this approach points to the very useful mutate() function in dplyr for adding a new variable. library(dplyr) results &lt;- mutate(results, number = sum(id = 1)) head(select(results, title, number)) When we view results we will now see a new column number that contains the value 1 for each entry. 13.18 Remove a column We will often end up with more data than we want, or create more columns than we need. The standard way to remove a column is to use the trusty $ to select the column and assign it to NULL. results$columnname &lt;- NULL #dummy example Another way of doing this, which can be used for multiple columns, is to use select() from dplyr (see ?select()). Select will only keep the columns that we name. We can do this using the column names or position. For example the following will keep the first 8 columns (1:8) but will drop the unnamed 9th column because the default is to drop columns that are not named. We could also write out the column names but using the position numbers is faster in this case. test &lt;- select(results, 1:8) length(test) We could also drop columns by position using the following (to remove column 5 and 6). This approach is useful when there are lots of columns to deal with. test &lt;- select(results, 1:4, 7:9) An easier approach in this case is to explicitly drop columns using - and keep the others. test &lt;- select(results, -month, -day) Select is also very useful for reordering columns. Let’s imagine that we wanted to move the id column to the first column. We can simply put id as the first entry in select() and then the total columns to reorder. test &lt;- select(results, id, 1:9) The select function is incredibly useful for rapidly organising data as we will see below. 13.19 Arranging the Data We might want to arrange our rows (which can be quite difficult to do in base R). The arrange() function in dplyr makes this easy and arranges a column’s values in ascending order by default. Here we will specify descending desc() because we want to see the most recent publications that mention our search terms at the top. results &lt;- arrange(results, desc(publication_date)) head(results$publication_date) When we use View(results) we will see that the most recent data is at the top. We will also see that some of the titles towards the top are duplicates of the same article because they include all the terms in our search. So, the next thing we will want to do is to address duplicates. 13.20 Dealing with Duplicates How you deal with duplicates depends on what you are trying to achieve. If you are attempting to develop data on trends then duplicates will result in overcounting unless you take steps to count only distinct records. Duplicates of the same data will also distort text mining of the frequencies of terms. So, from that perspective duplicates are bad. On the other hand. If we are interested in the use of terms over time within an emerging area of science and technology, then we might well want to look in detail at the use of particular terms. For example, synthetic genomics is an alternative term for synthetic biology favoured by the J. Craig Venter group. We could look at whether this term is more widely used. Do synthetic biologists also use terms such as engineering biology, genome engineering or the fashionable new genome editing technique? In these cases duplicate records using terms are good because shifts in language can be mapped over time. This suggests a need for a strategy that uses different data tables to answer different questions. As we have already seen, it is very easy in R to create new objects (typically data.frames), take some kind of action, and write the data to a file. In thinking about duplicates we would probably first want to find out what we are dealing with by identifying unique records. There are multiple ways to do this, here are two: unique(results$id) #displays unique DOIs (base R) n_distinct(results$id) #displays the count of distinct DOIs (dplyr) This tells us there are 1,098 unique DOIs meaning there were 307 duplicates at the time of writing. Next we have two main options. We can spread the duplicate results across the table We can identify and delete the duplicates. 13.20.1 Spreading data using spread() from tidyr Rather than simply deleting our duplicate DOIs, we could create new columns for each search term and its associated DOI. This will be useful because it will tell us which terms are associated with which records over time. This is easy to do with spread() by providing a key and a value in the arguments. In this case, we want to use search_terms as the key (column names) to spread across the table and the DOIs in the id column as the value for the rows. spread_results &lt;- spread(results, search_terms, id) This creates a column for each search term with the relevant DOIs as the values. Note that the default is to drop the original column (in this case search_terms) when creating the new columns. Things will go badly wrong if you try to keep the existing column because R will be simultaneously trying to spread the data, thus reducing the size of the table, and keep the table in the same size. So, we will leave the default to drop the column as is. We now have a data.frame with 1098 rows and the search terms identified in each column. If we briefly inspect spread_results on the terms at the end we can detect a potentially interesting pattern where some documents are only using terms such as synthetic genome or synthetic genomics while others are using only synthetic biology or a mix of terms. We have now reduced our data to unique records while preserving our search terms as reference points. The limitation of this approach is that by spreading the DOIs across 4 columns we no longer have a tidy single column of DOIs. 13.20.2 Deleting Duplicates As an alternative, or complement, to spread we can use a logical TRUE/FALSE test to filter our dataset. There are a number of functions that perform logical tests in R (see also which(), %in%, within()). In this case the most appropriate choice is probably duplicated(). duplicated() will mark duplicate records as TRUE and non-duplicated records as FALSE. We will add a column to our data using the trusty $ when creating the new column. results$duplicate &lt;- duplicated(results$id) If we use View(results) a new column will have been added to results. Records that are not duplicates are marked FALSE while records that are duplicates are marked TRUE. We now want to filter that table down to the results that are not duplicated (are FALSE) from our logical test. We will use filter() from dplyr (see above). While select() works exclusively with columns filter() works with rows and allows us to easily filter the data on the values contained in a row. unique_results &lt;- filter(results, duplicate == FALSE) %&gt;% select(- search_terms) #drop search_terms column Here we have asked filter() to show us only those values in the duplicate column that exactly match with FALSE. We now have a data from with 1097 unique results with the DOIs in one column. The creation of logical TRUE/FALSE vectors is very useful in creating conditions to filter data. In this case however, in the process note that we will lose information from the search_terms column which will become incomplete. To avoid potential confusion later on we drop the search_terms column using select(- search_terms) in the code above. If we wanted to keep the terms we would use the spread method above. We now have three data.frames, results, spread_results, and unique_results. results is our core or reference set. If we planned to do a significant amount of work with this data we would save a copy of results to .csv and label it as raw with notes in our codebook on its origins and the actions taken to generate it. It can be a good idea to .zip a raw file so that it is more difficult to access by accident. Going forward we would use the spread_results and unique_results for further work. As we did earlier, use either write.csv(x, “x.csv”, row.names = FALSE) or the simpler and faster write_csv(). R can write multiple files in a blink. This will write all three files to the rplos project folder (use getwd() and setwd() if you want to do something different). write_csv(results, &quot;results.csv&quot;) write_csv(spread_results, &quot;spread_results.csv&quot;) write_csv(unique_results, &quot;unique_results.csv&quot;) Ok, so we have now a dataset containing the records for a range of terms and we have come a long way. Quite a lot of this has been about what to do with PLOS data once we have accessed it in terms of turning it into tables that we can work with. In the next section we will look at how to restrict searches by section. 13.21 Restricting searches by section The default for searching with rplos is to search everything. This can produce many passing results and be overwhelming. There are quite a number of options for restricting searches in rplos. 13.22 By author In creating the results dataset above we included the author field. However, there are some complexities to searching with author names and working with author data that it is important to understand. We will start by searching on author names and then look at how to process the data. To restrict a search by author name we can use either the full name or the surname: plosauthor(q = &quot;Paul Oldham&quot;, fl = c(&quot;author&quot;, &quot;id&quot;), fq = &quot;doc_type:full&quot;, limit = 20) In this example we have specified doc_type:full to return only the results for full articles. If you do not use this then the search will return a large number of repeated results based on article sections. So, in this case, Paul Oldham - the author of this article on rplos - has published two articles in PLOS ONE. If doc_type:full isn’t specified more than 20 results are returned that display different sections of the two articles. This will create a duplication issue later on, so a sensible default approach is to use doc_type:full. As a general observation, considerable caution should be exercised when working with author names because of problems with the lumping of names and splitting of names as described in this PLOS ONE article. If a large number of results are encountered on a single author name consider using match criteria from other available data fields to ensure that separate persons are not being lumped together by name. Above all, do not assume that simply because a name is the same, or very similar to the target name, that the name designates the same person. The next issue we need to address is what to do with the author data when we have retrieved it. The reason for this is that the author field in the results is generally a concatenated field containing the names of the authors of a particular article. We will start with the oldham results set. In this case we will make the call to plosauthor() and then use ldply() from plyr to return a data frame containing meta and data. Then we will use fill from tidyr to take the numFound and fill down that column. We will remove the start column using select() and finally filter() to limit the table to data. oldham &lt;- plosauthor(q = &quot;Paul Oldham&quot;, fl = c(&quot;author&quot;, &quot;id&quot;), fq = &quot;doc_type:full&quot;, limit = 20) %&gt;% ldply(&quot;[&quot;, 1:2) %&gt;% fill(numFound, start) %&gt;% select(- start) %&gt;% filter(.id == &quot;data&quot;) We now have a two records with the author and id (DOI) data. The next thing we want to do is to separate the author names out. We can do this using separate(). Note that separate() will need to know the number of names involved before hand. In the oldham data case there are three authors of each article. We will deal with how to calculate the number of author names shortly. oldham &lt;- separate(oldham, author, 1:3, sep = &quot;;&quot;, remove = FALSE) We now have some other choices. We could simply keep only the first author name. To do that, in this particular case, we could use select() and the numeric position of the columns that we want to remove. first_author &lt;- select(oldham, -7, -8) As an alternative, we could place each author name on its own row so that we can focus in on a specific author later. For that we can use gather() from tidyr and the column position numbers (not their names in this case) of the columns we want to gather. authors &lt;- gather(oldham, number, authors, 5:7) As above gather() requires a key and value field. In this case we have used the number as our key and authors as our value. We have then specified that we want to gather columns 6 to 8 into the new column authors. That was easy because we are dealing with a small number of results with a uniform number of authors. However, our results data is more complicated than this because we have multiple author names for each article and the number of authors for the articles could vary considerably. We will need to organise the data and to run some simple calculations to make this work. This will take six steps. The full working code is below. We calculate the number of columns in our dataset. We do this because the number may vary depending on what fields we retrieve from rplos. We will use ncols() to make the calculation. We use a short function from stringr to calculate the number of authors based on the author name separator “;” (+1 to capture the final names in the sequence). This gives us the maximum number of authors across the dataset that we need to split the data into (in this case 83 as the value of n). Copy and paste the function below into the console to access it. author_count &lt;- function(data, col = &quot;&quot;, sep = &quot;[^[:alnum:]]+&quot;) { library(stringr) authcount &lt;- str_count(data[[col]], pattern = sep) n &lt;- as.integer(max(authcount) + 1) print(n) } We use select() from dplyr to move our target column to the first column. This simply makes it easier to specify column positions in separate() and gather() later on. We use the value of n to separate the author names into multiple columns We then gather them back in using the value of n. Splitting on a separator such as ; normally generates invisible leading and trailing white space. This will prevent author names from ranking correctly (e.g. in Excel or Tableau). The str_trim() function from stringr provides an easy way of removing the white space (specify side as right, left or both). Copy and paste the code below and then hit Enter. #---calculations--- colno &lt;- ncol(unique_results) #calculate number of columns n &lt;- author_count(unique_results, &quot;author&quot;, &quot;;&quot;) # See function above. Calculate n as an integer to meet requirement for separate() #---select, separate and gather--- full_authors &lt;- select(unique_results, author, 1:colno) #bring author to the front full_authors &lt;- separate(full_authors, author, 1:n, sep = &quot;;&quot;, remove = TRUE, convert = FALSE, extra = &quot;merge&quot;, fill = &quot;right&quot;) #separate full_authors &lt;- gather(full_authors, value, authors, 1:n, na.rm = TRUE) #gather #---trim authors---- full_authors$authors &lt;- str_trim(full_authors$authors, side = &quot;both&quot;) #trim leading and trailing whitespace We can simplify this with pipes to bring together the actions on the new full_authors object. #---calculations--- colno &lt;- ncol(unique_results) n &lt;- author_count(unique_results, &quot;author&quot;, &quot;;&quot;) #---select, separate, gather--- full_authors &lt;- select(unique_results, author, 1:colno) %&gt;% separate(author, 1:n, sep = &quot;;&quot;, remove = TRUE, convert = FALSE, extra = &quot;merge&quot;, fill = &quot;right&quot;) %&gt;% gather(value, authors, 1:n, na.rm = TRUE) #---trim authors---- full_authors$authors &lt;- str_trim(full_authors$authors, side = &quot;both&quot;) In running this code we will remove the original author column (column 1) by specifying remove = TRUE in separate(). gather() will place the new authors column at the end. So, make sure you scroll to the final column when viewing the results. We could also drop unwanted columns. We now have a complete list of individual author names that could be used to look up individual authors, to clean up author names for statistical use and for author network mapping. As a brief example, if we wanted to look up contributions by Jean Peccoud who leads the PLOS SynBio blog we might use the following based on this useful Stack Overflow answer. See ?grepl for more info. Peccoud &lt;- filter(full_authors, grepl(&quot;Peccoud&quot;, authors)) We will not go into depth on these topics, but generating this type of author list is an important step in enabling wider analytics and visualisation. While the code used to get to this list of authors may appear quite involved, once the basics are understood it can be used over and over again. Let’s write that data to a .csv file to explore later. write_csv(full_authors, &quot;full_authors.csv&quot;) 13.23 Title search using plostitle() For a title search we can use plostitle(). As above you may want to count the number of records first using: t &lt;- plostitle(q = &quot;synthetic biology&quot;, limit = 0)$meta$numFound Then we run the search to return the number of results we would like. Here we have set it to the value of t above (11). We have limited the results to the data field by subsetting with $data. title &lt;- plostitle(q = &quot;synthetic biology&quot;, fl = &quot;title&quot;, limit = t)$data 13.24 Abstract search using plosabstract() For confining the searches to abstracts we can use plosabstract(). We will start with a quick count of records. a &lt;- plosabstract(q = &quot;synthetic biology&quot;, limit = 0)$meta$numFound To retrieve the results we could use the value of a. As an alternative we could set it arbitrarily high and the correct results will be returned. Of course if we don’t know what the total number of results are then we will be unsure whether we have captured the universe. But, an arbitrary number can be useful for exploration. abstract &lt;- plosabstract(q = &quot;synthetic biology&quot;, fl = &quot;id, title, abstract&quot;, limit = 200) abstract$data As before, we can easily create a new object containing the data.frame. In this case we will also include the meta data and then use fill() from tidyr() to fill down the numFound field and the start with 0. Note that meta will appear at the top of the list and will create a largely blank row. To avoid this, while keeping number of records for reference, we will use filter from tidyr(). This short code will do that. abstract_df &lt;- ldply(abstract, &quot;[&quot;, 1:2) %&gt;% fill(numFound, start) %&gt;% filter(.id == &quot;data&quot;) 13.25 Subject Area using plossubject() To search by subject area use plossubject. The default return is 10 results of the total results. So, try starting with a search such as this to get an idea of how many results there are. In this case the query has been limited to PLOS ONE and full text articles. sa &lt;- plossubject(q = &quot;\\&quot;synthetic+biology\\&quot;&quot;, fq = list(&quot;cross_published_journal_key:PLoSONE&quot;, &quot;doc_type:full&quot;))$meta$numFound At the time of writing this returns 739 results. We will simply pull back 10 results. To pull back all of the results replace 10 with sa above or type the number into limit =. plossubject(q = &quot;\\&quot;synthetic+biology\\&quot;&quot;, fl = &quot;id&quot;, fq = list(&quot;cross_published_journal_key:PLoSONE&quot;, &quot;doc_type:full&quot;), limit = 10) As noted in the documentation, the results we return from the API and the results on the website are not necessarily the same because the settings used by PLOS on the website are not clear. In this case we return 740 results while, at the time of writing, PLOS ONE lists 417 articles in the Synthetic Biology subject area. This will merit clarification of the criteria for counts used on the PLOS website and the API returns. 13.26 Highlighting terms and text fragments with highplos() highplos() is a great function for research in PLOS, particularly when combined with opening results in a browser using highbrow(). Highlighting will pull back a chunk of text with the search term highlighted with the emphasis tag enclosing the individual words in a search phrase. It is possible that an entire phrase can be highlighted (see hl.usePhraseHighlighter) but this requires further exploration. In this example we will simply use the term synthetic biology and then highlight the terms in the abstract hl.fl = and limit this to 10 rows of results. We will also add the function highbrow() (for highlight browse) at the end. This will open the results in our browser. In the examples we use a pipe (%&gt;%) meaning this %then% that. This means that we do not have to enter the name snippet into the highbrow function and simplifies the code. When reviewing the results in a browser note that we can click on the DOI to see the full article. This is a really useful tool for assessing which articles we might want to take a closer look at. highplos(q = &#39;&quot;synthetic biology&quot;&#39;, hl.fl = &#39;abstract&#39;, fq = &quot;doc_type:full&quot;, rows = 10) %&gt;% highbrow() #launches the browser Note that in some cases, even though we are restricting to doc-type:full, we retrieve entries with no data. In one case this is because we are highlighting terms in the abstract when the term appears in the full text. In a second case we have picked up a correction where one of the authors is at a synthetic biology centre but neither the abstract or text mention synthetic biology. So, bear in mind that some further exploration may be required to understand why particular results are being returned. These issues are minor and this is a great tool. There are two additional options (arguments) for highplos() that we can use. The first of these is snippets using hl.snippets = and the second is hl.fragsize =. Both can be used in conjunction with highbrow(). 13.26.1 Snippets using hl.snippets snippet &lt;- highplos(q = &#39;&quot;synthetic biology&quot;&#39;, hl.fl = list(&quot;title&quot;, &quot;abstract&quot;), hl.snippets = 10, rows = 100) %&gt;% highbrow() The snippets argument is handy (the default value for a snippet is 1 but goes up to as many as you like). It become very interesting when we add hl.mergeContiguous = 'true'. This will display the entries captured in the order of the articles to provide a sense of its uses by the author(s). highplos(q=&#39;&quot;synthetic biology&quot;&#39;, hl.fl = &quot;abstract&quot;, hl.snippets = 10, hl.mergeContiguous = &#39;true&#39;, rows = 10) %&gt;% highbrow() 13.26.2 fragment size using hl.fragsize Greater control over what we are seeing is provided using the hl.fragsize option. This allows us to specify the number of characters (including spaces) that we want to see in relation to our target terms. In the first example we will highlight the phrase synthetic biology in the titles and abstracts and set the fragment size (using hl.fragsize ) to a high 500. This will return the first 500 characters including spaces rather than words. We will set the number of rows to a somewhat arbitrary 200. This can easily be pushed a lot higher but expect to wait for a few moments if you move this to 1000 rows. highplos(q = &#39;&quot;synthetic biology&quot;&#39;, hl.fl = list(&quot;title&quot;, &quot;abstract&quot;), hl.fragsize = 500, rows = 200) %&gt;% highbrow() We can also do the reverse of a larger search by reducing the fragment size to say up to 100 characters. At the moment it is unclear whether it is possible to control whether characters are selected to the right or the left of our target terms. Note that results will display up to 100 characters where they are available (short results will be for sentences such as titles that are less than 100 characters) highplos(q = &#39;&quot;synthetic biology&quot;&#39;, hl.fl = list(&quot;title&quot;, &quot;abstract&quot;), hl.fragsize = 100, rows = 200) %&gt;% highbrow() What is great about this is that we can easily control the amount of text that we are seeing and then select articles of interest to read straight from the browser. We can also start to think about ways to use this information for text mining to identify terms used in conjunction with synthetic biology or types of synthetic biology. 13.27 Get the full text of one or more articles We will finish this article by briefly demonstrating how to retrieve and save the full text of one or more articles. rplos uses a combination of the XML and the tm (for text mining) package. Retrieving full text should initially be used rather sparingly because you could pull back a lot of data in XML format that you may then struggle to process. So, it is probably best to start small. Using the unique_results data that we created above we have a list of DOIs in the id field. We can create a vector of these using the following: doi &lt;- unique_results$id That has created a vector of 1097 dois. To limit those results, let’s create a shorter version where we select five rows. short_doi &lt;- doi[1:5] Now we can use plos_fulltext() to retrieve the full text. ft &lt;- plos_fulltext(short_doi) When we pull back the two articles an object is created of class plosft. To see the full text of one of the individual articles we use the trusty $ and then select a doi. ft$`10.1371/journal.pone.0140969` This displays a lot of the XML tags inside the text. We would now like to extract the text without the XML tags. The rplos documentation for plos_fulltext() helps us to do this using the following code. The first part of the code uses the XML package to parse the results removing the xml tags in the process. library(tm) library(XML) ft_parsed &lt;- lapply(ft, function(x) { xpathApply(xmlParse(x), &quot;//body&quot;, xmlValue) }) If we type ft_parsed we will now see the text (the body without title and abstract) fly by without all of the tags. ft_parsed The object returned by this is a list (use class(ft_parsed)). Next, we can transform this into a corpus (a text or collection of texts) that we can save to disk using the following code from the rplos plos_fulltext() example. tmcorpus &lt;- Corpus(VectorSource(ft_parsed)) If we type tmcorpus$ into the console then we will see 1 to 5 pop up, but this will return NULL if selected. The data is there but we need to use str(tmcorpus) to see the structure of the corpus. If we want to view a text within the corpus we can use writeLines() writeLines(as.character(tmcorpus[[2]])) We can also view the five texts in our corpus (be prepared for a lot of scrolling) by using lapply to read over the two texts as character. lapply(tmcorpus[1:5], as.character) For more information see the Ingo Feinerer (2015) Introduction to the tm package (also available in the tm documentation) from which the above is drawn. 13.28 Writing a corpus to disk To write a corpus we first need to create a folder where the files will be housed (otherwise they will simply be written into your project folder with everything else). The easiest way to create a new folder is to head over to the Files Tab in RStudio (normally in the bottom right pane) and choose New Folder. We will call it tm. Now use getwd() and copy the file path into the following function, from the writeCorpus examples, adding /tm at the end. It will look something like this but replace the path with your own, not forgetting the /tm. Then press Enter. writeCorpus(tmcorpus, path = &quot;/Users/paul/Desktop/open_source_master/rplos/tm&quot;) When you look in the tm folder inside rplos (use the Files tab in RStudio) you will now see five texts with the names 1 to 5. For more details, such as naming files and specifying file types, see ?writeCorpus and the tm package documentation. 13.29 Round Up In this chapter we have focused on using the rplos package to access scientific articles from the Public Library of Science (PLOS). As we have seen, with short pieces of code it is easy to search and retrieve data from PLOS on a whole range of subjects whether it be pizza or synthetic biology. One of the most powerful features of R is that it is quite easy to access free online data using APIs. rplos is a very good starting point for learning how to retrieve data using an API because it is well written and the data that comes back is remarkably clean. Perhaps the biggest challenge facing new users of R is what to do with data once you have retrieved it. This can result in many hours of frustration staring at a list or object with the data you need without the tools to access it and transform it into the format you need. In this article we have focused on using the plyr, dplyr, tidyr and stringr suite of packages to turn rplos data into something you can use. These packages are rightly very popular for everyday work in R and becoming more familiar with them will reap rewards in learning R for practical work. At the close of the article we used the tm (text mining) package to save the full text of articles. This is only a very small part of this package and rplos provides some useful examples to begin text mining using tm (see the plos_fulltext() examples). R now has a rich range of text mining packages and we will address this in a future article. In the meantime, if you would like to learn more about R try the resources below. If you would like to learn R inside R then try the very useful Swirl package (details below). 13.30 Resources rOpenSci Winston Chang’s R Cookbook RStudio Online Learning r-bloggers.com Datacamp Swirl (developed by the free Coursea R Programming course team at John Hopkins University. If you would like to get started with Swirl run the code chunk below to install the package and load the library. install.packages(&quot;swirl&quot;) library(swirl) "]
]
